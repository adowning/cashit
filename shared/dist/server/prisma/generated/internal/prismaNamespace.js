/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * All exports from this file are wrapped under a `Prisma` namespace object in the client.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 *
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective
 * model files in the `model` directory!
 */
import * as runtime from "@prisma/client/runtime/library";
/**
 * Validator
 */
export const validator = runtime.Public.validator;
/**
 * Prisma Errors
 */
export const PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError;
export const PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError;
export const PrismaClientRustPanicError = runtime.PrismaClientRustPanicError;
export const PrismaClientInitializationError = runtime.PrismaClientInitializationError;
export const PrismaClientValidationError = runtime.PrismaClientValidationError;
/**
 * Re-export of sql-template-tag
 */
export const sql = runtime.sqltag;
export const empty = runtime.empty;
export const join = runtime.join;
export const raw = runtime.raw;
export const Sql = runtime.Sql;
/**
 * Decimal.js
 */
export const Decimal = runtime.Decimal;
export const getExtensionContext = runtime.Extensions.getExtensionContext;
/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
export const prismaVersion = {
    client: "6.8.2",
    engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
};
export const NullTypes = {
    DbNull: runtime.objectEnumValues.classes.DbNull,
    JsonNull: runtime.objectEnumValues.classes.JsonNull,
    AnyNull: runtime.objectEnumValues.classes.AnyNull,
};
/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull;
/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull;
/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull;
export const ModelName = {
    User: 'User',
    Session: 'Session',
    Account: 'Account',
    Verification: 'Verification',
    Game: 'Game',
    GameSession: 'GameSession',
    GameSpin: 'GameSpin',
    GameProvider: 'GameProvider',
    GameLaunchLink: 'GameLaunchLink',
    Operator: 'Operator',
    OperatorInvitation: 'OperatorInvitation',
    Product: 'Product',
    Todo: 'Todo',
    Tournament: 'Tournament',
    TournamentGame: 'TournamentGame',
    TournamentParticipant: 'TournamentParticipant',
    TournamentGamePlay: 'TournamentGamePlay',
    TournamentReward: 'TournamentReward',
    Transaction: 'Transaction',
    RebateTransaction: 'RebateTransaction',
    Wallet: 'Wallet',
    UserProfile: 'UserProfile'
};
/**
 * Enums
 */
export const TransactionIsolationLevel = runtime.makeStrictEnum({
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
});
export const UserScalarFieldEnum = {
    id: 'id',
    name: 'name',
    username: 'username',
    displayUsername: 'displayUsername',
    email: 'email',
    emailVerified: 'emailVerified',
    image: 'image',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
};
export const SessionScalarFieldEnum = {
    id: 'id',
    expiresAt: 'expiresAt',
    token: 'token',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    userId: 'userId'
};
export const AccountScalarFieldEnum = {
    id: 'id',
    accountId: 'accountId',
    providerId: 'providerId',
    userId: 'userId',
    accessToken: 'accessToken',
    refreshToken: 'refreshToken',
    idToken: 'idToken',
    accessTokenExpiresAt: 'accessTokenExpiresAt',
    refreshTokenExpiresAt: 'refreshTokenExpiresAt',
    scope: 'scope',
    password: 'password',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
};
export const VerificationScalarFieldEnum = {
    id: 'id',
    identifier: 'identifier',
    value: 'value',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
};
export const GameScalarFieldEnum = {
    id: 'id',
    name: 'name',
    title: 'title',
    goldsvetData: 'goldsvetData',
    description: 'description',
    supportedProviders: 'supportedProviders',
    category: 'category',
    tags: 'tags',
    isActive: 'isActive',
    thumbnailUrl: 'thumbnailUrl',
    bannerUrl: 'bannerUrl',
    meta: 'meta',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    featured: 'featured',
    providerName: 'providerName',
    totalWagered: 'totalWagered',
    gameProviderId: 'gameProviderId',
    operatorId: 'operatorId'
};
export const GameSessionScalarFieldEnum = {
    id: 'id',
    isActive: 'isActive',
    sessionData: 'sessionData',
    authSessionId: 'authSessionId',
    currencyId: 'currencyId',
    startedAt: 'startedAt',
    endTime: 'endTime',
    startTime: 'startTime',
    ipAddress: 'ipAddress',
    startingBalance: 'startingBalance',
    startingTotalXp: 'startingTotalXp',
    userAgent: 'userAgent',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    totalWagered: 'totalWagered',
    totalWon: 'totalWon',
    userId: 'userId',
    gameId: 'gameId',
    rtgToken: 'rtgToken',
    rtgFingerPrint: 'rtgFingerPrint',
    profileId: 'profileId'
};
export const GameSpinScalarFieldEnum = {
    id: 'id',
    spinData: 'spinData',
    createdAt: 'createdAt',
    grossWinAmount: 'grossWinAmount',
    currencyId: 'currencyId',
    spinNumber: 'spinNumber',
    gameSessionId: 'gameSessionId',
    wagerAmount: 'wagerAmount',
    sessionId: 'sessionId',
    timeStamp: 'timeStamp'
};
export const GameProviderScalarFieldEnum = {
    id: 'id',
    name: 'name',
    displayName: 'displayName',
    rgsBaseUrl: 'rgsBaseUrl',
    settingsPath: 'settingsPath',
    spinPath: 'spinPath',
    resolveBetPath: 'resolveBetPath',
    providerRoundId: 'providerRoundId',
    authType: 'authType',
    apiKey: 'apiKey',
    apiSecret: 'apiSecret',
    publicKey: 'publicKey',
    privateKeyRef: 'privateKeyRef',
    configJson: 'configJson',
    isActive: 'isActive',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
};
export const GameLaunchLinkScalarFieldEnum = {
    id: 'id',
    token_internal: 'token_internal',
    currency: 'currency',
    player_operator_id: 'player_operator_id',
    mode: 'mode',
    meta: 'meta',
    requestIp: 'requestIp',
    userAgent: 'userAgent',
    session_url: 'session_url',
    state: 'state',
    active: 'active',
    expiresAt: 'expiresAt',
    extra_meta: 'extra_meta',
    token_original: 'token_original',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId',
    gameId: 'gameId',
    operatorId: 'operatorId',
    userProfileId: 'userProfileId'
};
export const OperatorScalarFieldEnum = {
    id: 'id',
    name: 'name',
    operator_secret: 'operator_secret',
    operator_access: 'operator_access',
    callbackUrl: 'callbackUrl',
    active: 'active',
    permissions: 'permissions',
    ips: 'ips',
    description: 'description',
    lastUsedAt: 'lastUsedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    ownerId: 'ownerId',
    acceptedPayments: 'acceptedPayments'
};
export const OperatorInvitationScalarFieldEnum = {
    id: 'id',
    operatorId: 'operatorId',
    username: 'username',
    role: 'role',
    token: 'token',
    expiresAt: 'expiresAt',
    acceptedAt: 'acceptedAt',
    invitedById: 'invitedById',
    userProfileId: 'userProfileId'
};
export const ProductScalarFieldEnum = {
    id: 'id',
    title: 'title',
    description: 'description',
    url: 'url',
    iconUrl: 'iconUrl',
    productType: 'productType',
    bonusCode: 'bonusCode',
    bonusTotalInCredits: 'bonusTotalInCredits',
    isActive: 'isActive',
    priceInCents: 'priceInCents',
    amountToReceiveInCredits: 'amountToReceiveInCredits',
    bestValue: 'bestValue',
    discountInCents: 'discountInCents',
    bonusSpins: 'bonusSpins',
    isPromo: 'isPromo',
    totalDiscountInCents: 'totalDiscountInCents',
    shopId: 'shopId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    transactionId: 'transactionId'
};
export const TodoScalarFieldEnum = {
    id: 'id',
    text: 'text',
    completed: 'completed'
};
export const TournamentScalarFieldEnum = {
    id: 'id',
    name: 'name',
    description: 'description',
    startTime: 'startTime',
    endTime: 'endTime',
    targetScore: 'targetScore',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdByid: 'createdByid',
    userId: 'userId'
};
export const TournamentGameScalarFieldEnum = {
    id: 'id',
    tournamentId: 'tournamentId',
    gameId: 'gameId',
    pointMultiplier: 'pointMultiplier'
};
export const TournamentParticipantScalarFieldEnum = {
    id: 'id',
    tournamentId: 'tournamentId',
    userId: 'userId',
    score: 'score',
    rank: 'rank',
    joinedAt: 'joinedAt'
};
export const TournamentGamePlayScalarFieldEnum = {
    id: 'id',
    tournamentParticipantId: 'tournamentParticipantId',
    gameId: 'gameId',
    pointsEarned: 'pointsEarned',
    playedAt: 'playedAt',
    gameSessionId: 'gameSessionId'
};
export const TournamentRewardScalarFieldEnum = {
    id: 'id',
    tournamentId: 'tournamentId',
    rank: 'rank',
    description: 'description',
    isClaimed: 'isClaimed',
    winnerId: 'winnerId'
};
export const TransactionScalarFieldEnum = {
    id: 'id',
    processedAt: 'processedAt',
    walletId: 'walletId',
    type: 'type',
    status: 'status',
    amount: 'amount',
    netAmount: 'netAmount',
    feeAmount: 'feeAmount',
    productId: 'productId',
    paymentMethod: 'paymentMethod',
    balanceBefore: 'balanceBefore',
    balanceAfter: 'balanceAfter',
    bonusBalanceBefore: 'bonusBalanceBefore',
    bonusBalanceAfter: 'bonusBalanceAfter',
    bonusAmount: 'bonusAmount',
    wageringRequirement: 'wageringRequirement',
    wageringProgress: 'wageringProgress',
    description: 'description',
    provider: 'provider',
    providerTxId: 'providerTxId',
    relatedGameId: 'relatedGameId',
    relatedRoundId: 'relatedRoundId',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userProfileId: 'userProfileId',
    operatorId: 'operatorId'
};
export const RebateTransactionScalarFieldEnum = {
    id: 'id',
    userId: 'userId',
    transactionId: 'transactionId',
    rebateAmount: 'rebateAmount',
    currencyId: 'currencyId',
    vipLevel: 'vipLevel',
    rebatePercentage: 'rebatePercentage',
    status: 'status',
    paidOutAt: 'paidOutAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
};
export const WalletScalarFieldEnum = {
    id: 'id',
    balance: 'balance',
    isActive: 'isActive',
    address: 'address',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId',
    operatorId: 'operatorId',
    paymentMethod: 'paymentMethod',
    bonusBalance: 'bonusBalance',
    lockedBalance: 'lockedBalance'
};
export const UserProfileScalarFieldEnum = {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    username: 'username',
    avatar: 'avatar',
    balance: 'balance',
    totalXpFromOperator: 'totalXpFromOperator',
    activeCurrencyType: 'activeCurrencyType',
    userId: 'userId',
    isActive: 'isActive',
    otherUserid: 'otherUserid',
    role: 'role',
    operatorId: 'operatorId',
    currentGameSessionid: 'currentGameSessionid'
};
export const SortOrder = {
    asc: 'asc',
    desc: 'desc'
};
export const NullableJsonNullValueInput = {
    DbNull: DbNull,
    JsonNull: JsonNull
};
export const QueryMode = {
    default: 'default',
    insensitive: 'insensitive'
};
export const NullsOrder = {
    first: 'first',
    last: 'last'
};
export const JsonNullValueFilter = {
    DbNull: DbNull,
    JsonNull: JsonNull,
    AnyNull: AnyNull
};
export const defineExtension = runtime.Extensions.defineExtension;
