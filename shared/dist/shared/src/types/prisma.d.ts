export type EnumRole = 'USER' | 'ADMIN' | 'VIP' | 'MODERATOR' | 'SYSTEM' | 'OWNER' | 'MEMBER' | 'OPERATOR' | 'SUPPORT_AGENT';
export type EnumProductType = 'DEPOSIT_PACKAGE' | 'VIRTUAL_CURRENCY' | 'ITEM' | 'SUBSCRIPTION' | 'FEATURE_UNLOCK';
export type EnumUserStatus = 'ACTIVE' | 'DEACTIVATED' | 'ONLINE' | 'OFFLINE' | 'SUSPENDED' | 'BANNED';
export type EnumGender = 'MALE' | 'FEMALE' | 'NON_BINARY' | 'OTHER' | 'PREFER_NOT_TO_SAY';
export type EnumGameCategory = 'FISH' | 'POKER' | 'SLOTS' | 'TABLE_GAMES' | 'LIVE_CASINO' | 'SPORTSBOOK' | 'VIRTUAL_SPORTS' | 'LOTTERY' | 'CRASH' | 'OTHER';
export type EnumGameProviderName = 'PRAGMATICPLAY' | 'EVOPLAY' | 'NETENT' | 'PLAYNGO' | 'RELAXGAMING' | 'HACKSAW' | 'BGAMING' | 'SPRIBE' | 'INTERNAL' | 'REDTIGER' | 'NETGAME' | 'BIGFISHGAMES' | 'CQNINE' | 'NOLIMIT' | 'KICKASS';
export type EnumTransactionType = 'DEPOSIT' | 'WITHDRAWAL' | 'BET' | 'WIN' | 'TRANSFER_SENT' | 'TRANSFER_RECEIVED' | 'SYSTEM_ADJUSTMENT_CREDIT' | 'SYSTEM_ADJUSTMENT_DEBIT' | 'TOURNAMENT_BUYIN' | 'TOURNAMENT_PRIZE' | 'AFFILIATE_COMMISSION' | 'REFUND' | 'FEE' | 'BONUS_AWARD' | 'BET_PLACE' | 'BET_WIN' | 'BET_LOSE' | 'BET_REFUND' | 'BONUS_WAGER' | 'BONUS_CONVERT' | 'BONUS_EXPIRED' | 'XP_AWARD' | 'ADJUSTMENT_ADD' | 'ADJUSTMENT_SUB' | 'INTERNAL_TRANSFER' | 'PRODUCT_PURCHASE' | 'REBATE_PAYOUT';
export type EnumTransactionStatus = 'PENDING' | 'PROCESSING' | 'COMPLETED' | 'FAILED' | 'CANCELLED' | 'REFUNDED' | 'EXPIRED' | 'REJECTED' | 'REQUIRES_ACTION' | 'ON_HOLD';
export type EnumNotificationType = 'SYSTEM_MESSAGE' | 'FRIEND_REQUEST_RECEIVED' | 'FRIEND_REQUEST_ACCEPTED' | 'ACHIEVEMENT_UNLOCKED' | 'BALANCE_UPDATE' | 'PROMOTIONAL_OFFER' | 'TOURNAMENT_INVITE' | 'TOURNAMENT_RESULT' | 'SECURITY_ALERT' | 'GAME_EVENT' | 'NEW_MESSAGE' | 'LEVEL_UP' | 'GENERAL_INFO' | 'PROMOTION' | 'SECUITY_ALERT' | 'TRANSACTION_UPDATE' | 'REWARD_UNLOCKED' | 'MAINTENANCE';
export type EnumFriendshipStatus = 'PENDING' | 'ACCEPTED' | 'DECLINED' | 'BLOCKED';
export type EnumKeyMode = 'read' | 'write' | 'upload' | 'manage_users' | 'manage_settings' | 'launch_game';
export type EnumInvitationStatus = 'PENDING' | 'ACCEPTED' | 'DECLINED' | 'INACTIVE';
export type EnumPaymentMethod = 'INSTORE_CASH' | 'INSTORE_CARD' | 'CASH_APP';
export type EnumCurrencyType = 'FIAT' | 'CRYPTO' | 'VIRTUAL';
export type EnumProviderAuthType = 'API_KEY' | 'OAUTH2' | 'JWT_SIGN' | 'CUSTOM' | 'NONE';
export type EnumRewardType = 'DAILY_SIGN_IN' | 'WEEKLY_CYCLE' | 'MONTHLY_CYCLE' | 'LEVEL_UP' | 'VIP_TASK_COMPLETION' | 'BET_REBATE' | 'ACHIEVEMENT_UNLOCKED' | 'PROMO_CODE' | 'DEPOSIT_BONUS' | 'REGISTRATION_BONUS' | 'FREE_SPINS' | 'TOURNAMENT_PRIZE' | 'OTHER';
export type EnumRewardStatus = 'AVAILABLE' | 'CLAIMED' | 'EXPIRED' | 'PENDING' | 'VOIDED';
export type EnumVipTaskType = 'DEPOSIT_STREAK' | 'WAGER_AMOUNT' | 'LOGIN_STREAK' | 'PROFILE_COMPLETION' | 'PLAY_SPECIFIC_GAME' | 'VERIFY_EMAIL' | 'PLACE_BETS' | 'WIN_STREAK';
export type EnumTournamentStatus = 'PENDING' | 'ACTIVE' | 'COMPLETED' | 'CANCELLED';
export type User = {
    id: string;
    username: string | null;
    name: string;
    email: string;
    emailVerified: boolean | null;
    displayUsername: string | null;
    phone: string | null;
    cashtag: string | null;
    phoneVerified: Date | null;
    isVerified: boolean;
    passwordHash: string | null;
    role: EnumRole;
    status: EnumUserStatus;
    totalXp: number;
    currentLevel: number;
    referralCode: string | null;
    commissionRate: number | null;
    twoFactorEnabled: boolean | null;
    isOnline: boolean | null;
    twoFactorSecret: string | null;
    image: string | null;
    twoFactorRecoveryCodes: string[];
    lastLogin: Date | null;
    lastIp: string | null;
    createdAt: Date;
    updatedAt: Date;
    profile?: Profile | null;
    otherProfiles?: Profile[];
    settings?: Settings | null;
    activeWalletId: string | null;
    wallets?: Wallet[];
    posts?: Post[];
    comments?: Comment[];
    gameSessions?: GameSession[];
    xpEvents?: XpEvent[];
    userAchievements?: UserAchievement[];
    sentMessages?: ChatMessage[];
    friendshipsSent?: Friendship[];
    friendshipsReceived?: Friendship[];
    gameLaunchLinks?: GameLaunchLink[];
    eventLogsAsActor?: EventLog[];
    createdOperators?: OperatorAccess[];
    invitationsSent?: OperatorInvitation[];
    invitationsReceived?: OperatorInvitation[];
    referrerId: string | null;
    referrer?: User | null;
    referrals?: User[];
    account?: Account[];
    Session?: Session[];
    vipInfo?: VipInfo | null;
    rebateTransaction?: RebateTransaction[];
    firstName: string | null;
    lastName: string | null;
    avatarUrl: string | null;
    dob: Date | null;
    gender: EnumGender | null;
    preferredCurrencyId: string | null;
    preferredCurrency?: Currency | null;
    timezone: string | null;
    locale: string | null;
    mfaEnabled: boolean;
    mfaSecret: string | null;
    userRewards?: UserReward[];
    userVipTaskProgress?: UserVipTaskProgress[];
    sentNotifications?: Notification[];
    receivedNotifications?: Notification[];
    originatedTransactions?: Transaction[];
    receivedTransactions?: Transaction[];
    TournamentParticipant?: TournamentParticipant[];
    TournamentReward?: TournamentReward[];
    Tournament?: Tournament[];
};
export type Currency = {
    id: string;
    name: string;
    symbol: string;
    type: string;
    precision: number;
    isActive: boolean;
    isDefault: boolean;
    contractAddress: string | null;
    blockchain: string | null;
    withdrawalFeeFixed: number | null;
    withdrawalFeePercent: number | null;
    usersPreferringThisCurrency?: User[];
    wallets?: Wallet[];
    transactions?: Transaction[];
    products?: Product[];
    createdAt: Date;
    updatedAt: Date;
};
export type Session = {
    id: string;
    userId: string;
    username: string | null;
    name: string | null;
    activeGameId: string | null;
    ipAddress: string | null;
    startTime: Date;
    endTime: Date | null;
    lastActivityAt: Date | null;
    userAgent: string | null;
    expiresAt: Date;
    createdAt: Date;
    refreshToken: string | null;
    active: boolean;
    token: string;
    updatedAt: Date | null;
    user?: User;
};
export type Account = {
    id: string;
    accountId: string;
    providerId: string;
    userId: string;
    accessToken: string | null;
    refreshToken: string | null;
    idToken: string | null;
    accessTokenExpiresAt: Date | null;
    refreshTokenExpiresAt: Date | null;
    scope: string | null;
    password: string | null;
    createdAt: Date;
    updatedAt: Date | null;
    user?: User;
};
export type Verification = {
    id: string;
    identifier: string;
    value: string;
    expiresAt: Date;
    createdAt: Date | null;
    updatedAt: Date | null;
};
export type Profile = {
    id: string;
    balance: number;
    totalXpFromOperator: number;
    activeCurrencyType: string;
    createdAt: Date;
    updatedAt: Date;
    currentGameSession?: GameSession | null;
    currentGameSessionid: string | null;
    userId: string;
    user?: User;
    otherUser?: User | null;
    otherUserid: string | null;
    role: EnumRole | null;
    operatorAccessId: string | null;
    operator?: OperatorAccess | null;
};
export type Settings = {
    id: string;
    theme: string | null;
    language: string | null;
    emailNotifications: boolean;
    smsNotifications: boolean;
    pushNotifications: boolean;
    meta: JsonValue | null;
    createdAt: Date;
    updatedAt: Date;
    userId: string;
    user?: User;
};
export type Wallet = {
    id: string;
    balance: number;
    isActive: boolean;
    address: string | null;
    createdAt: Date;
    updatedAt: Date;
    userId: string;
    user?: User;
    currencyId: string;
    currency?: Currency;
    transactions?: Transaction[];
    bonusBalance: number;
    lockedBalance: number;
};
export type OperatorAccess = {
    id: string;
    name: string;
    operator_secret: string;
    operator_access: string;
    callbackUrl: string;
    active: boolean;
    permissions: EnumKeyMode[];
    ips: string[];
    description: string | null;
    lastUsedAt: Date | null;
    createdAt: Date;
    updatedAt: Date;
    ownerId: string | null;
    acceptedPayments: EnumPaymentMethod[];
    invitations?: OperatorInvitation[];
    ownedById: string | null;
    owner?: User | null;
    gameLaunchLinks?: GameLaunchLink[];
    products?: Product[];
    games?: Game[];
    profiles?: Profile[];
};
export type Achievement = {
    id: string;
    name: string;
    description: string;
    xpReward: number;
    iconUrl: string | null;
    secret: boolean;
    createdAt: Date;
    updatedAt: Date;
    blur: number;
    userAchievements?: UserAchievement[];
};
export type Game = {
    id: string;
    name: string;
    title: string;
    goldsvetData: JsonValue | null;
    description: string | null;
    supportedProviders: EnumGameProviderName[];
    category: EnumGameCategory;
    tags: string[];
    isActive: boolean;
    thumbnailUrl: string | null;
    bannerUrl: string | null;
    meta: JsonValue | null;
    createdAt: Date;
    updatedAt: Date;
    featured: boolean;
    providerName: string | null;
    gameProviderId: string | null;
    gameProvider?: GameProvider | null;
    gameSessions?: GameSession[];
    gameLaunchLinks?: GameLaunchLink[];
    operatorId: string | null;
    operator?: OperatorAccess | null;
    TournamentGame?: TournamentGame[];
};
export type Post = {
    id: string;
    title: string;
    content: string;
    published: boolean;
    tags: string[];
    viewCount: number;
    meta: JsonValue | null;
    createdAt: Date;
    updatedAt: Date;
    authorId: string;
    author?: User;
    comments?: Comment[];
};
export type Comment = {
    id: string;
    content: string;
    createdAt: Date;
    updatedAt: Date;
    postId: string;
    post?: Post;
    authorId: string;
    author?: User;
};
export type GameSpin = {
    id: string;
    spinData: JsonValue | null;
    createdAt: Date;
    grossWinAmount: number;
    currencyId: string | null;
    spinNumber: number;
    gameSessionId: string;
    wagerAmount: number;
    sessionId: string;
    timeStamp: Date;
    gameSession?: GameSession;
};
export type GameProvider = {
    id: string;
    name: string;
    displayName: string | null;
    rgsBaseUrl: string;
    settingsPath: string | null;
    spinPath: string | null;
    resolveBetPath: string | null;
    providerRoundId: string | null;
    authType: EnumProviderAuthType;
    apiKey: string | null;
    apiSecret: string | null;
    publicKey: string | null;
    privateKeyRef: string | null;
    configJson: JsonValue | null;
    isActive: boolean;
    notes: string | null;
    games?: Game[];
    createdAt: Date;
    updatedAt: Date;
};
export type GameSession = {
    id: string;
    isActive: boolean;
    sessionData: JsonValue | null;
    spins?: GameSpin[];
    authSessionId: string | null;
    currencyId: string | null;
    startedAt: Date;
    endTime: Date | null;
    startTime: Date | null;
    ipAddress: string | null;
    startingBalance: number | null;
    startingTotalXp: number | null;
    userAgent: string | null;
    createdAt: Date;
    updatedAt: Date;
    totalWagered: number;
    totalWon: number;
    userId: string;
    user?: User;
    gameId: string;
    game?: Game;
    rtgToken: string | null;
    rtgFingerPrint: string | null;
    profileId: string | null;
    profile?: Profile[];
};
export type UserAchievement = {
    id: string;
    unlockedAt: Date;
    metaData: JsonValue | null;
    createdAt: Date;
    updatedAt: Date;
    userId: string;
    user?: User;
    achievementId: string;
    achievement?: Achievement;
};
export type XpEvent = {
    id: string;
    points: number;
    source: string;
    sourceId: string | null;
    meta: JsonValue | null;
    createdAt: Date;
    updatedAt: Date;
    userId: string;
    user?: User;
};
export type Notification = {
    id: string;
    userId: string;
    type: EnumNotificationType;
    title: string;
    message: string;
    isRead: boolean;
    readAt: Date | null;
    actionUrl: string | null;
    imageUrl: string | null;
    metadata: JsonValue | null;
    createdAt: Date;
    updatedAt: Date;
    sender?: User;
    originator?: User;
};
export type ChatMessage = {
    id: string;
    channel: string;
    content: string;
    mediaUrl: string | null;
    createdAt: Date;
    updatedAt: Date;
    authorId: string;
    author?: User;
};
export type Friendship = {
    id: string;
    status: EnumFriendshipStatus;
    createdAt: Date;
    updatedAt: Date;
    requesterId: string;
    requester?: User;
    receiverId: string;
    receiver?: User;
};
export type Transaction = {
    id: string;
    originatorUserId: string;
    processedAt: Date | null;
    gameId: string | null;
    originator?: User;
    receiverUserId: string | null;
    receiver?: User | null;
    walletId: string | null;
    wallet?: Wallet | null;
    type: EnumTransactionType;
    status: EnumTransactionStatus;
    amount: number;
    netAmount: number | null;
    feeAmount: number | null;
    productId: string | null;
    product?: Product | null;
    currencyId: string;
    currency?: Currency;
    balanceBefore: number | null;
    balanceAfter: number | null;
    bonusBalanceBefore: number | null;
    bonusBalanceAfter: number | null;
    bonusAmount: number | null;
    wageringRequirement: number | null;
    wageringProgress: number | null;
    description: string | null;
    provider: string | null;
    providerTxId: string | null;
    relatedGameId: string | null;
    relatedRoundId: string | null;
    metadata: JsonValue | null;
    createdAt: Date;
    updatedAt: Date;
    rebateGenerated?: RebateTransaction | null;
    Product?: Product[];
};
export type GameLaunchLink = {
    id: string;
    token_internal: string;
    currency: string;
    player_operator_id: string | null;
    mode: string;
    meta: JsonValue | null;
    requestIp: string | null;
    userAgent: string | null;
    session_url: string | null;
    state: string;
    active: boolean;
    expiresAt: Date | null;
    extra_meta: JsonValue | null;
    token_original: string | null;
    createdAt: Date;
    updatedAt: Date;
    userId: string;
    user?: User;
    gameId: string;
    game?: Game;
    operatorId: string;
    operator?: OperatorAccess;
};
export type Product = {
    id: string;
    title: string;
    description: string;
    url: string;
    iconUrl: string | null;
    productType: string;
    bonusCode: string | null;
    bonusTotalInCredits: number;
    isActive: boolean | null;
    currencyId: string;
    currency?: Currency;
    priceInCents: number;
    amountToReceiveInCredits: number;
    bestValue: number;
    discountInCents: number;
    bonusSpins: number;
    isPromo: boolean | null;
    totalDiscountInCents: number;
    shopId: string | null;
    createdAt: Date;
    updatedAt: Date | null;
    operator?: OperatorAccess | null;
    transactions?: Transaction[];
    Transaction?: Transaction | null;
    transactionId: string | null;
};
export type EventLog = {
    id: string;
    action: string;
    targetType: string | null;
    targetId: string | null;
    data: JsonValue | null;
    ipAddress: string | null;
    userAgent: string | null;
    timestamp: Date;
    createdAt: Date;
    updatedAt: Date;
    actorId: string | null;
    actor?: User | null;
};
export type OperatorInvitation = {
    id: string;
    operatorId: string;
    email: string;
    role: EnumRole;
    token: string;
    expiresAt: Date;
    acceptedAt: Date | null;
    invitedById: string;
    operator?: OperatorAccess;
    invitedBy?: User;
    User?: User[];
};
export type VipInfo = {
    id: string;
    userId: string;
    user?: User;
    level: number;
    currentLevelXp: number;
    totalXp: number;
    nextLevelXpRequired: number;
    cashbackPercentage: number;
    prioritySupport: boolean;
    specialBonusesAvailable: number;
    dailyBonusClaimedAt: Date | null;
    weeklyBonusClaimedAt: Date | null;
    monthlyBonusClaimedAt: Date | null;
    createdAt: Date;
    updatedAt: Date;
};
export type UserReward = {
    id: string;
    userId: string;
    user?: User;
    rewardType: EnumRewardType;
    claimedAt: Date | null;
    description: string;
    status: EnumRewardStatus;
    amount: number | null;
    currencyId: string | null;
    metaData: JsonValue | null;
    expiresAt: Date | null;
    availableFrom: Date;
    createdAt: Date;
    updatedAt: Date;
    vipLevelRequirement: number | null;
};
export type VipTask = {
    id: string;
    taskType: EnumVipTaskType;
    title: string | null;
    description: string;
    xpReward: number | null;
    itemRewardId: string | null;
    bonusRewardAmount: number | null;
    bonusCurrencyId: string | null;
    targetValue: number | null;
    durationDays: number | null;
    isActive: boolean;
    requiredVipLevel: number;
    resetCycle: string | null;
    userTaskProgress?: UserVipTaskProgress[];
    createdAt: Date;
    updatedAt: Date;
};
export type UserVipTaskProgress = {
    id: string;
    userId: string;
    user?: User;
    taskId: string;
    task?: VipTask;
    progress: number;
    isCompleted: boolean;
    rewardClaimedAt: Date | null;
    lastProgressAt: Date;
    createdAt: Date;
    updatedAt: Date;
};
export type RebateTransaction = {
    id: string;
    userId: string;
    user?: User;
    transactionId: string;
    originalTransaction?: Transaction;
    rebateAmount: number;
    currencyId: string;
    vipLevel: number;
    rebatePercentage: number;
    status: EnumRewardStatus;
    paidOutAt: Date | null;
    createdAt: Date;
    updatedAt: Date;
};
export type Tournament = {
    id: string;
    name: string;
    description: string | null;
    startTime: Date;
    endTime: Date | null;
    targetScore: number | null;
    status: EnumTournamentStatus;
    createdAt: Date;
    updatedAt: Date;
    eligibleGames?: TournamentGame[];
    participants?: TournamentParticipant[];
    rewards?: TournamentReward[];
    createdBy?: User | null;
    createdByid: string | null;
};
export type TournamentGame = {
    id: string;
    tournament?: Tournament;
    tournamentId: string;
    game?: Game;
    gameId: string;
    pointMultiplier: number;
};
export type TournamentParticipant = {
    id: string;
    tournament?: Tournament;
    tournamentId: string;
    user?: User;
    userId: string;
    score: number;
    rank: number | null;
    joinedAt: Date;
    gamePlays?: TournamentGamePlay[];
};
export type TournamentGamePlay = {
    id: string;
    tournamentParticipant?: TournamentParticipant;
    tournamentParticipantId: string;
    gameId: string;
    pointsEarned: number;
    playedAt: Date;
    gameSessionId: string | null;
};
export type TournamentReward = {
    id: string;
    tournament?: Tournament;
    tournamentId: string;
    rank: number;
    description: string;
    isClaimed: boolean;
    winnerId: string | null;
    winner?: User | null;
};
type JsonValue = string | number | boolean | {
    [key in string]?: JsonValue;
} | Array<JsonValue> | null;
export {};
