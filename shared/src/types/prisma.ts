// This file was auto-generated by prisma-generator-typescript-interfaces

export type PrismaGameCategory =
  | "FISH"
  | "POKER"
  | "SLOTS"
  | "TABLE_GAMES"
  | "LIVE_CASINO"
  | "SPORTSBOOK"
  | "VIRTUAL_SPORTS"
  | "LOTTERY"
  | "CRASH"
  | "OTHER";

export type PrismaGameProviderName =
  | "PRAGMATICPLAY"
  | "EVOPLAY"
  | "NETENT"
  | "PLAYNGO"
  | "RELAXGAMING"
  | "HACKSAW"
  | "BGAMING"
  | "SPRIBE"
  | "INTERNAL"
  | "REDTIGER"
  | "NETGAME"
  | "BIGFISHGAMES"
  | "CQNINE"
  | "NOLIMIT"
  | "KICKASS";

export type PrismaProviderAuthType =
  | "API_KEY"
  | "OAUTH2"
  | "JWT_SIGN"
  | "CUSTOM"
  | "NONE";

export type PrismaPaymentMethod = "INSTORE_CASH" | "INSTORE_CARD" | "CASH_APP";

export type PrismaRole =
  | "USER"
  | "ADMIN"
  | "VIP"
  | "MODERATOR"
  | "SYSTEM"
  | "OWNER"
  | "MEMBER"
  | "OPERATOR"
  | "SUPPORT_AGENT";

export type PrismaKeyMode =
  | "read"
  | "write"
  | "upload"
  | "manage_users"
  | "manage_settings"
  | "launch_game";

export type PrismaInvitationStatus =
  | "PENDING"
  | "ACCEPTED"
  | "DECLINED"
  | "INACTIVE";

export type PrismaTournamentStatus =
  | "PENDING"
  | "ACTIVE"
  | "COMPLETED"
  | "CANCELLED";

export type PrismaTransactionType =
  | "DEPOSIT"
  | "WITHDRAWAL"
  | "BET"
  | "WIN"
  | "TRANSFER_SENT"
  | "TRANSFER_RECEIVED"
  | "SYSTEM_ADJUSTMENT_CREDIT"
  | "SYSTEM_ADJUSTMENT_DEBIT"
  | "TOURNAMENT_BUYIN"
  | "TOURNAMENT_PRIZE"
  | "AFFILIATE_COMMISSION"
  | "REFUND"
  | "FEE"
  | "BONUS_AWARD"
  | "BET_PLACE"
  | "BET_WIN"
  | "BET_LOSE"
  | "BET_REFUND"
  | "BONUS_WAGER"
  | "BONUS_CONVERT"
  | "BONUS_EXPIRED"
  | "XP_AWARD"
  | "ADJUSTMENT_ADD"
  | "ADJUSTMENT_SUB"
  | "INTERNAL_TRANSFER"
  | "PRODUCT_PURCHASE"
  | "REBATE_PAYOUT";

export type PrismaTransactionStatus =
  | "PENDING"
  | "PROCESSING"
  | "COMPLETED"
  | "FAILED"
  | "CANCELLED"
  | "REFUNDED"
  | "EXPIRED"
  | "REJECTED"
  | "REQUIRES_ACTION"
  | "ON_HOLD";

export type PrismaRewardStatus =
  | "AVAILABLE"
  | "CLAIMED"
  | "EXPIRED"
  | "PENDING"
  | "VOIDED";

export type PrismaUser = {
  id: string;
  name: string;
  username: string;
  displayUsername: string;
  email: string;
  emailVerified: boolean;
  image: string | null;
  createdAt: Date;
  updatedAt: Date;
  sessions?: PrismaSession[];
  accounts?: PrismaAccount[];
  Tournament?: PrismaTournament[];
};

export type PrismaSession = {
  id: string;
  expiresAt: Date;
  token: string;
  createdAt: Date;
  updatedAt: Date;
  ipAddress: string | null;
  userAgent: string | null;
  userId: string;
  user?: PrismaUser;
};

export type PrismaAccount = {
  id: string;
  accountId: string;
  providerId: string;
  userId: string;
  user?: PrismaUser;
  accessToken: string | null;
  refreshToken: string | null;
  idToken: string | null;
  accessTokenExpiresAt: Date | null;
  refreshTokenExpiresAt: Date | null;
  scope: string | null;
  password: string | null;
  createdAt: Date;
  updatedAt: Date;
};

export type PrismaVerification = {
  id: string;
  identifier: string;
  value: string;
  expiresAt: Date;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type PrismaGame = {
  id: string;
  name: string;
  title: string;
  goldsvetData: JsonValue | null;
  description: string | null;
  supportedProviders: PrismaGameProviderName[];
  category: PrismaGameCategory;
  tags: string[];
  isActive: boolean;
  thumbnailUrl: string | null;
  bannerUrl: string | null;
  meta: JsonValue | null;
  createdAt: Date;
  updatedAt: Date;
  featured: boolean;
  providerName: string | null;
  totalWagered: number;
  gameProviderId: string | null;
  gameProvider?: PrismaGameProvider | null;
  gameSessions?: PrismaGameSession[];
  gameLaunchLinks?: PrismaGameLaunchLink[];
  operatorId: string | null;
  operator?: PrismaOperator | null;
  TournamentGame?: PrismaTournamentGame[];
};

export type PrismaGameSession = {
  id: string;
  isActive: boolean;
  sessionData: JsonValue | null;
  spins?: PrismaGameSpin[];
  authSessionId: string | null;
  currencyId: string | null;
  startedAt: Date;
  endTime: Date | null;
  startTime: Date | null;
  ipAddress: string | null;
  startingBalance: number | null;
  startingTotalXp: number | null;
  userAgent: string | null;
  createdAt: Date;
  updatedAt: Date;
  totalWagered: number;
  totalWon: number;
  userId: string;
  refferenceToUserProfile?: PrismaUserProfile;
  gameId: string;
  game?: PrismaGame;
  rtgToken: string | null;
  rtgFingerPrint: string | null;
  profileId: string | null;
  UserProfile?: PrismaUserProfile[];
};

export type PrismaGameSpin = {
  id: string;
  spinData: JsonValue | null;
  createdAt: Date;
  grossWinAmount: number;
  currencyId: string | null;
  spinNumber: number;
  gameSessionId: string;
  wagerAmount: number;
  sessionId: string;
  timeStamp: Date;
  gameSession?: PrismaGameSession;
};

export type PrismaGameProvider = {
  id: string;
  name: string;
  displayName: string | null;
  rgsBaseUrl: string;
  settingsPath: string | null;
  spinPath: string | null;
  resolveBetPath: string | null;
  providerRoundId: string | null;
  authType: PrismaProviderAuthType;
  apiKey: string | null;
  apiSecret: string | null;
  publicKey: string | null;
  privateKeyRef: string | null;
  configJson: JsonValue | null;
  isActive: boolean;
  notes: string | null;
  games?: PrismaGame[];
  createdAt: Date;
  updatedAt: Date;
};

export type PrismaGameLaunchLink = {
  id: string;
  token_internal: string;
  currency: string;
  player_operator_id: string | null;
  mode: string;
  meta: JsonValue | null;
  requestIp: string | null;
  userAgent: string | null;
  session_url: string | null;
  state: string;
  active: boolean;
  expiresAt: Date | null;
  extra_meta: JsonValue | null;
  token_original: string | null;
  createdAt: Date;
  updatedAt: Date;
  userId: string;
  gameId: string;
  game?: PrismaGame;
  operatorId: string;
  operator?: PrismaOperator;
  UserProfile?: PrismaUserProfile | null;
  userProfileId: string | null;
};

export type PrismaOperator = {
  id: string;
  name: string;
  operator_secret: string;
  operator_access: string;
  callbackUrl: string;
  active: boolean;
  permissions: PrismaKeyMode[];
  ips: string[];
  description: string | null;
  lastUsedAt: Date | null;
  createdAt: Date;
  updatedAt: Date;
  ownerId: string | null;
  acceptedPayments: PrismaPaymentMethod[];
  invitations?: PrismaOperatorInvitation[];
  gameLaunchLinks?: PrismaGameLaunchLink[];
  products?: PrismaProduct[];
  games?: PrismaGame[];
  wallets?: PrismaWallet[];
  transactions?: PrismaTransaction[];
};

export type PrismaOperatorInvitation = {
  id: string;
  operatorId: string;
  username: string;
  role: PrismaRole;
  token: string;
  expiresAt: Date;
  acceptedAt: Date | null;
  invitedById: string;
  operator?: PrismaOperator;
  invitedUser?: PrismaUserProfile | null;
  userProfileId: string | null;
};

export type PrismaProduct = {
  id: string;
  title: string;
  description: string;
  url: string;
  iconUrl: string | null;
  productType: string;
  bonusCode: string | null;
  bonusTotalInCredits: number;
  isActive: boolean | null;
  priceInCents: number;
  amountToReceiveInCredits: number;
  bestValue: number;
  discountInCents: number;
  bonusSpins: number;
  isPromo: boolean | null;
  totalDiscountInCents: number;
  shopId: string | null;
  createdAt: Date;
  updatedAt: Date | null;
  operator?: PrismaOperator | null;
  transactions?: PrismaTransaction[];
  transactionId: string | null;
  Transaction?: PrismaTransaction | null;
};

export type PrismaTodo = {
  id: number;
  text: string;
  completed: boolean;
};

export type PrismaTournament = {
  id: string;
  name: string;
  description: string | null;
  startTime: Date;
  endTime: Date | null;
  targetScore: number | null;
  status: PrismaTournamentStatus;
  createdAt: Date;
  updatedAt: Date;
  eligibleGames?: PrismaTournamentGame[];
  participants?: PrismaTournamentParticipant[];
  rewards?: PrismaTournamentReward[];
  createdByid: string | null;
  User?: PrismaUser | null;
  userId: string | null;
};

export type PrismaTournamentGame = {
  id: string;
  tournament?: PrismaTournament;
  tournamentId: string;
  game?: PrismaGame;
  gameId: string;
  pointMultiplier: number;
};

export type PrismaTournamentParticipant = {
  id: string;
  tournament?: PrismaTournament;
  tournamentId: string;
  user?: PrismaUserProfile;
  userId: string;
  score: number;
  rank: number | null;
  joinedAt: Date;
  gamePlays?: PrismaTournamentGamePlay[];
};

export type PrismaTournamentGamePlay = {
  id: string;
  tournamentParticipant?: PrismaTournamentParticipant;
  tournamentParticipantId: string;
  gameId: string;
  pointsEarned: number;
  playedAt: Date;
  gameSessionId: string | null;
};

export type PrismaTournamentReward = {
  id: string;
  tournament?: PrismaTournament;
  tournamentId: string;
  rank: number;
  description: string;
  isClaimed: boolean;
  winnerId: string | null;
  winner?: PrismaUserProfile | null;
};

export type PrismaTransaction = {
  id: string;
  processedAt: Date | null;
  walletId: string | null;
  wallet?: PrismaWallet | null;
  type: PrismaTransactionType;
  status: PrismaTransactionStatus;
  amount: number;
  netAmount: number | null;
  feeAmount: number | null;
  productId: string | null;
  product?: PrismaProduct | null;
  paymentMethod: PrismaPaymentMethod | null;
  balanceBefore: number | null;
  balanceAfter: number | null;
  bonusBalanceBefore: number | null;
  bonusBalanceAfter: number | null;
  bonusAmount: number | null;
  wageringRequirement: number | null;
  wageringProgress: number | null;
  description: string | null;
  provider: string | null;
  providerTxId: string | null;
  relatedGameId: string | null;
  relatedRoundId: string | null;
  metadata: JsonValue | null;
  createdAt: Date;
  updatedAt: Date;
  rebateGenerated?: PrismaRebateTransaction | null;
  products?: PrismaProduct[];
  UserProfile?: PrismaUserProfile | null;
  userProfileId: string | null;
  Operator?: PrismaOperator | null;
  operatorId: string | null;
};

export type PrismaRebateTransaction = {
  id: string;
  userId: string;
  user?: PrismaUserProfile;
  transactionId: string;
  originalTransaction?: PrismaTransaction;
  rebateAmount: number;
  currencyId: string;
  vipLevel: number;
  rebatePercentage: number;
  status: PrismaRewardStatus;
  paidOutAt: Date | null;
  createdAt: Date;
  updatedAt: Date;
};

export type PrismaWallet = {
  id: string;
  balance: number;
  isActive: boolean;
  address: string | null;
  createdAt: Date;
  updatedAt: Date;
  userId: string;
  user?: PrismaUserProfile;
  operatorId: string;
  operator?: PrismaOperator;
  paymentMethod: PrismaPaymentMethod;
  transactions?: PrismaTransaction[];
  bonusBalance: number;
  lockedBalance: number;
};

export type PrismaUserProfile = {
  id: string;
  createdAt: Date;
  updatedAt: Date;
  username: string;
  avatar: string | null;
  cashtag: string | null;
  balance: number;
  totalXpFromOperator: number;
  activeCurrencyType: string;
  lastDailySpin: Date;
  userId: string;
  isActive: boolean;
  otherUserid: string | null;
  role: PrismaRole | null;
  operatorId: string | null;
  wallets?: PrismaWallet[];
  transactions?: PrismaTransaction[];
  rebateTransactions?: PrismaRebateTransaction[];
  operatorInvitations?: PrismaOperatorInvitation[];
  TournamentReward?: PrismaTournamentReward[];
  gameLaunchLink?: PrismaGameLaunchLink[];
  TournamentParticipant?: PrismaTournamentParticipant[];
  pastGameSessions?: PrismaGameSession[];
  currentGameSessionid: string | null;
  currentGameSession?: PrismaGameSession | null;
  vipInfoId: string;
  vipInfo?: PrismaVipInfo;
};

export type PrismaVipInfo = {
  id: string;
  createdAt: Date;
  updatedAt: Date;
  username: string;
  avatar: string | null;
  userId: string;
  level: number;
  currentLevelXp: number;
  totalXp: number;
  dailyBonusClaimedAt: Date | null;
  weeklyBonusClaimedAt: Date | null;
  monthlyBonusClaimedAt: Date | null;
  cashbackPercentage: number;
  userProfile?: PrismaUserProfile | null;
};

type JsonValue =
  | string
  | number
  | boolean
  | { [key in string]?: JsonValue }
  | Array<JsonValue>
  | null;
