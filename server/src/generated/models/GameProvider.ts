
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `GameProvider` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model GameProvider
 * 
 */
export type GameProviderModel = runtime.Types.Result.DefaultSelection<Prisma.$GameProviderPayload>

export type AggregateGameProvider = {
  _count: GameProviderCountAggregateOutputType | null
  _min: GameProviderMinAggregateOutputType | null
  _max: GameProviderMaxAggregateOutputType | null
}

export type GameProviderMinAggregateOutputType = {
  id: string | null
  name: string | null
  displayName: string | null
  rgsBaseUrl: string | null
  settingsPath: string | null
  spinPath: string | null
  resolveBetPath: string | null
  providerRoundId: string | null
  authType: $Enums.ProviderAuthType | null
  apiKey: string | null
  apiSecret: string | null
  publicKey: string | null
  privateKeyRef: string | null
  isActive: boolean | null
  notes: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type GameProviderMaxAggregateOutputType = {
  id: string | null
  name: string | null
  displayName: string | null
  rgsBaseUrl: string | null
  settingsPath: string | null
  spinPath: string | null
  resolveBetPath: string | null
  providerRoundId: string | null
  authType: $Enums.ProviderAuthType | null
  apiKey: string | null
  apiSecret: string | null
  publicKey: string | null
  privateKeyRef: string | null
  isActive: boolean | null
  notes: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type GameProviderCountAggregateOutputType = {
  id: number
  name: number
  displayName: number
  rgsBaseUrl: number
  settingsPath: number
  spinPath: number
  resolveBetPath: number
  providerRoundId: number
  authType: number
  apiKey: number
  apiSecret: number
  publicKey: number
  privateKeyRef: number
  configJson: number
  isActive: number
  notes: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type GameProviderMinAggregateInputType = {
  id?: true
  name?: true
  displayName?: true
  rgsBaseUrl?: true
  settingsPath?: true
  spinPath?: true
  resolveBetPath?: true
  providerRoundId?: true
  authType?: true
  apiKey?: true
  apiSecret?: true
  publicKey?: true
  privateKeyRef?: true
  isActive?: true
  notes?: true
  createdAt?: true
  updatedAt?: true
}

export type GameProviderMaxAggregateInputType = {
  id?: true
  name?: true
  displayName?: true
  rgsBaseUrl?: true
  settingsPath?: true
  spinPath?: true
  resolveBetPath?: true
  providerRoundId?: true
  authType?: true
  apiKey?: true
  apiSecret?: true
  publicKey?: true
  privateKeyRef?: true
  isActive?: true
  notes?: true
  createdAt?: true
  updatedAt?: true
}

export type GameProviderCountAggregateInputType = {
  id?: true
  name?: true
  displayName?: true
  rgsBaseUrl?: true
  settingsPath?: true
  spinPath?: true
  resolveBetPath?: true
  providerRoundId?: true
  authType?: true
  apiKey?: true
  apiSecret?: true
  publicKey?: true
  privateKeyRef?: true
  configJson?: true
  isActive?: true
  notes?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type GameProviderAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which GameProvider to aggregate.
   */
  where?: Prisma.GameProviderWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of GameProviders to fetch.
   */
  orderBy?: Prisma.GameProviderOrderByWithRelationInput | Prisma.GameProviderOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.GameProviderWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` GameProviders from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` GameProviders.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned GameProviders
  **/
  _count?: true | GameProviderCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: GameProviderMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: GameProviderMaxAggregateInputType
}

export type GetGameProviderAggregateType<T extends GameProviderAggregateArgs> = {
      [P in keyof T & keyof AggregateGameProvider]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateGameProvider[P]>
    : Prisma.GetScalarType<T[P], AggregateGameProvider[P]>
}




export type GameProviderGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.GameProviderWhereInput
  orderBy?: Prisma.GameProviderOrderByWithAggregationInput | Prisma.GameProviderOrderByWithAggregationInput[]
  by: Prisma.GameProviderScalarFieldEnum[] | Prisma.GameProviderScalarFieldEnum
  having?: Prisma.GameProviderScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: GameProviderCountAggregateInputType | true
  _min?: GameProviderMinAggregateInputType
  _max?: GameProviderMaxAggregateInputType
}

export type GameProviderGroupByOutputType = {
  id: string
  name: string
  displayName: string | null
  rgsBaseUrl: string
  settingsPath: string | null
  spinPath: string | null
  resolveBetPath: string | null
  providerRoundId: string | null
  authType: $Enums.ProviderAuthType
  apiKey: string | null
  apiSecret: string | null
  publicKey: string | null
  privateKeyRef: string | null
  configJson: runtime.JsonValue | null
  isActive: boolean
  notes: string | null
  createdAt: Date
  updatedAt: Date
  _count: GameProviderCountAggregateOutputType | null
  _min: GameProviderMinAggregateOutputType | null
  _max: GameProviderMaxAggregateOutputType | null
}

type GetGameProviderGroupByPayload<T extends GameProviderGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<GameProviderGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof GameProviderGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], GameProviderGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], GameProviderGroupByOutputType[P]>
      }
    >
  > 



export type GameProviderWhereInput = {
  AND?: Prisma.GameProviderWhereInput | Prisma.GameProviderWhereInput[]
  OR?: Prisma.GameProviderWhereInput[]
  NOT?: Prisma.GameProviderWhereInput | Prisma.GameProviderWhereInput[]
  id?: Prisma.StringFilter<"GameProvider"> | string
  name?: Prisma.StringFilter<"GameProvider"> | string
  displayName?: Prisma.StringNullableFilter<"GameProvider"> | string | null
  rgsBaseUrl?: Prisma.StringFilter<"GameProvider"> | string
  settingsPath?: Prisma.StringNullableFilter<"GameProvider"> | string | null
  spinPath?: Prisma.StringNullableFilter<"GameProvider"> | string | null
  resolveBetPath?: Prisma.StringNullableFilter<"GameProvider"> | string | null
  providerRoundId?: Prisma.StringNullableFilter<"GameProvider"> | string | null
  authType?: Prisma.EnumProviderAuthTypeFilter<"GameProvider"> | $Enums.ProviderAuthType
  apiKey?: Prisma.StringNullableFilter<"GameProvider"> | string | null
  apiSecret?: Prisma.StringNullableFilter<"GameProvider"> | string | null
  publicKey?: Prisma.StringNullableFilter<"GameProvider"> | string | null
  privateKeyRef?: Prisma.StringNullableFilter<"GameProvider"> | string | null
  configJson?: Prisma.JsonNullableFilter<"GameProvider">
  isActive?: Prisma.BoolFilter<"GameProvider"> | boolean
  notes?: Prisma.StringNullableFilter<"GameProvider"> | string | null
  createdAt?: Prisma.DateTimeFilter<"GameProvider"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"GameProvider"> | Date | string
  games?: Prisma.GameListRelationFilter
}

export type GameProviderOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  displayName?: Prisma.SortOrderInput | Prisma.SortOrder
  rgsBaseUrl?: Prisma.SortOrder
  settingsPath?: Prisma.SortOrderInput | Prisma.SortOrder
  spinPath?: Prisma.SortOrderInput | Prisma.SortOrder
  resolveBetPath?: Prisma.SortOrderInput | Prisma.SortOrder
  providerRoundId?: Prisma.SortOrderInput | Prisma.SortOrder
  authType?: Prisma.SortOrder
  apiKey?: Prisma.SortOrderInput | Prisma.SortOrder
  apiSecret?: Prisma.SortOrderInput | Prisma.SortOrder
  publicKey?: Prisma.SortOrderInput | Prisma.SortOrder
  privateKeyRef?: Prisma.SortOrderInput | Prisma.SortOrder
  configJson?: Prisma.SortOrderInput | Prisma.SortOrder
  isActive?: Prisma.SortOrder
  notes?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  games?: Prisma.GameOrderByRelationAggregateInput
}

export type GameProviderWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  name?: string
  AND?: Prisma.GameProviderWhereInput | Prisma.GameProviderWhereInput[]
  OR?: Prisma.GameProviderWhereInput[]
  NOT?: Prisma.GameProviderWhereInput | Prisma.GameProviderWhereInput[]
  displayName?: Prisma.StringNullableFilter<"GameProvider"> | string | null
  rgsBaseUrl?: Prisma.StringFilter<"GameProvider"> | string
  settingsPath?: Prisma.StringNullableFilter<"GameProvider"> | string | null
  spinPath?: Prisma.StringNullableFilter<"GameProvider"> | string | null
  resolveBetPath?: Prisma.StringNullableFilter<"GameProvider"> | string | null
  providerRoundId?: Prisma.StringNullableFilter<"GameProvider"> | string | null
  authType?: Prisma.EnumProviderAuthTypeFilter<"GameProvider"> | $Enums.ProviderAuthType
  apiKey?: Prisma.StringNullableFilter<"GameProvider"> | string | null
  apiSecret?: Prisma.StringNullableFilter<"GameProvider"> | string | null
  publicKey?: Prisma.StringNullableFilter<"GameProvider"> | string | null
  privateKeyRef?: Prisma.StringNullableFilter<"GameProvider"> | string | null
  configJson?: Prisma.JsonNullableFilter<"GameProvider">
  isActive?: Prisma.BoolFilter<"GameProvider"> | boolean
  notes?: Prisma.StringNullableFilter<"GameProvider"> | string | null
  createdAt?: Prisma.DateTimeFilter<"GameProvider"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"GameProvider"> | Date | string
  games?: Prisma.GameListRelationFilter
}, "id" | "name">

export type GameProviderOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  displayName?: Prisma.SortOrderInput | Prisma.SortOrder
  rgsBaseUrl?: Prisma.SortOrder
  settingsPath?: Prisma.SortOrderInput | Prisma.SortOrder
  spinPath?: Prisma.SortOrderInput | Prisma.SortOrder
  resolveBetPath?: Prisma.SortOrderInput | Prisma.SortOrder
  providerRoundId?: Prisma.SortOrderInput | Prisma.SortOrder
  authType?: Prisma.SortOrder
  apiKey?: Prisma.SortOrderInput | Prisma.SortOrder
  apiSecret?: Prisma.SortOrderInput | Prisma.SortOrder
  publicKey?: Prisma.SortOrderInput | Prisma.SortOrder
  privateKeyRef?: Prisma.SortOrderInput | Prisma.SortOrder
  configJson?: Prisma.SortOrderInput | Prisma.SortOrder
  isActive?: Prisma.SortOrder
  notes?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.GameProviderCountOrderByAggregateInput
  _max?: Prisma.GameProviderMaxOrderByAggregateInput
  _min?: Prisma.GameProviderMinOrderByAggregateInput
}

export type GameProviderScalarWhereWithAggregatesInput = {
  AND?: Prisma.GameProviderScalarWhereWithAggregatesInput | Prisma.GameProviderScalarWhereWithAggregatesInput[]
  OR?: Prisma.GameProviderScalarWhereWithAggregatesInput[]
  NOT?: Prisma.GameProviderScalarWhereWithAggregatesInput | Prisma.GameProviderScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"GameProvider"> | string
  name?: Prisma.StringWithAggregatesFilter<"GameProvider"> | string
  displayName?: Prisma.StringNullableWithAggregatesFilter<"GameProvider"> | string | null
  rgsBaseUrl?: Prisma.StringWithAggregatesFilter<"GameProvider"> | string
  settingsPath?: Prisma.StringNullableWithAggregatesFilter<"GameProvider"> | string | null
  spinPath?: Prisma.StringNullableWithAggregatesFilter<"GameProvider"> | string | null
  resolveBetPath?: Prisma.StringNullableWithAggregatesFilter<"GameProvider"> | string | null
  providerRoundId?: Prisma.StringNullableWithAggregatesFilter<"GameProvider"> | string | null
  authType?: Prisma.EnumProviderAuthTypeWithAggregatesFilter<"GameProvider"> | $Enums.ProviderAuthType
  apiKey?: Prisma.StringNullableWithAggregatesFilter<"GameProvider"> | string | null
  apiSecret?: Prisma.StringNullableWithAggregatesFilter<"GameProvider"> | string | null
  publicKey?: Prisma.StringNullableWithAggregatesFilter<"GameProvider"> | string | null
  privateKeyRef?: Prisma.StringNullableWithAggregatesFilter<"GameProvider"> | string | null
  configJson?: Prisma.JsonNullableWithAggregatesFilter<"GameProvider">
  isActive?: Prisma.BoolWithAggregatesFilter<"GameProvider"> | boolean
  notes?: Prisma.StringNullableWithAggregatesFilter<"GameProvider"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"GameProvider"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"GameProvider"> | Date | string
}

export type GameProviderCreateInput = {
  id?: string
  name: string
  displayName?: string | null
  rgsBaseUrl: string
  settingsPath?: string | null
  spinPath?: string | null
  resolveBetPath?: string | null
  providerRoundId?: string | null
  authType?: $Enums.ProviderAuthType
  apiKey?: string | null
  apiSecret?: string | null
  publicKey?: string | null
  privateKeyRef?: string | null
  configJson?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  isActive?: boolean
  notes?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  games?: Prisma.GameCreateNestedManyWithoutGameProviderInput
}

export type GameProviderUncheckedCreateInput = {
  id?: string
  name: string
  displayName?: string | null
  rgsBaseUrl: string
  settingsPath?: string | null
  spinPath?: string | null
  resolveBetPath?: string | null
  providerRoundId?: string | null
  authType?: $Enums.ProviderAuthType
  apiKey?: string | null
  apiSecret?: string | null
  publicKey?: string | null
  privateKeyRef?: string | null
  configJson?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  isActive?: boolean
  notes?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  games?: Prisma.GameUncheckedCreateNestedManyWithoutGameProviderInput
}

export type GameProviderUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  displayName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rgsBaseUrl?: Prisma.StringFieldUpdateOperationsInput | string
  settingsPath?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  spinPath?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  resolveBetPath?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  providerRoundId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  authType?: Prisma.EnumProviderAuthTypeFieldUpdateOperationsInput | $Enums.ProviderAuthType
  apiKey?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  apiSecret?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  publicKey?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  privateKeyRef?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  configJson?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  games?: Prisma.GameUpdateManyWithoutGameProviderNestedInput
}

export type GameProviderUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  displayName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rgsBaseUrl?: Prisma.StringFieldUpdateOperationsInput | string
  settingsPath?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  spinPath?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  resolveBetPath?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  providerRoundId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  authType?: Prisma.EnumProviderAuthTypeFieldUpdateOperationsInput | $Enums.ProviderAuthType
  apiKey?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  apiSecret?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  publicKey?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  privateKeyRef?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  configJson?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  games?: Prisma.GameUncheckedUpdateManyWithoutGameProviderNestedInput
}

export type GameProviderCreateManyInput = {
  id?: string
  name: string
  displayName?: string | null
  rgsBaseUrl: string
  settingsPath?: string | null
  spinPath?: string | null
  resolveBetPath?: string | null
  providerRoundId?: string | null
  authType?: $Enums.ProviderAuthType
  apiKey?: string | null
  apiSecret?: string | null
  publicKey?: string | null
  privateKeyRef?: string | null
  configJson?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  isActive?: boolean
  notes?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type GameProviderUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  displayName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rgsBaseUrl?: Prisma.StringFieldUpdateOperationsInput | string
  settingsPath?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  spinPath?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  resolveBetPath?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  providerRoundId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  authType?: Prisma.EnumProviderAuthTypeFieldUpdateOperationsInput | $Enums.ProviderAuthType
  apiKey?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  apiSecret?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  publicKey?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  privateKeyRef?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  configJson?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type GameProviderUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  displayName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rgsBaseUrl?: Prisma.StringFieldUpdateOperationsInput | string
  settingsPath?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  spinPath?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  resolveBetPath?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  providerRoundId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  authType?: Prisma.EnumProviderAuthTypeFieldUpdateOperationsInput | $Enums.ProviderAuthType
  apiKey?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  apiSecret?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  publicKey?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  privateKeyRef?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  configJson?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type GameProviderNullableScalarRelationFilter = {
  is?: Prisma.GameProviderWhereInput | null
  isNot?: Prisma.GameProviderWhereInput | null
}

export type GameProviderCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  displayName?: Prisma.SortOrder
  rgsBaseUrl?: Prisma.SortOrder
  settingsPath?: Prisma.SortOrder
  spinPath?: Prisma.SortOrder
  resolveBetPath?: Prisma.SortOrder
  providerRoundId?: Prisma.SortOrder
  authType?: Prisma.SortOrder
  apiKey?: Prisma.SortOrder
  apiSecret?: Prisma.SortOrder
  publicKey?: Prisma.SortOrder
  privateKeyRef?: Prisma.SortOrder
  configJson?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type GameProviderMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  displayName?: Prisma.SortOrder
  rgsBaseUrl?: Prisma.SortOrder
  settingsPath?: Prisma.SortOrder
  spinPath?: Prisma.SortOrder
  resolveBetPath?: Prisma.SortOrder
  providerRoundId?: Prisma.SortOrder
  authType?: Prisma.SortOrder
  apiKey?: Prisma.SortOrder
  apiSecret?: Prisma.SortOrder
  publicKey?: Prisma.SortOrder
  privateKeyRef?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type GameProviderMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  displayName?: Prisma.SortOrder
  rgsBaseUrl?: Prisma.SortOrder
  settingsPath?: Prisma.SortOrder
  spinPath?: Prisma.SortOrder
  resolveBetPath?: Prisma.SortOrder
  providerRoundId?: Prisma.SortOrder
  authType?: Prisma.SortOrder
  apiKey?: Prisma.SortOrder
  apiSecret?: Prisma.SortOrder
  publicKey?: Prisma.SortOrder
  privateKeyRef?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type GameProviderCreateNestedOneWithoutGamesInput = {
  create?: Prisma.XOR<Prisma.GameProviderCreateWithoutGamesInput, Prisma.GameProviderUncheckedCreateWithoutGamesInput>
  connectOrCreate?: Prisma.GameProviderCreateOrConnectWithoutGamesInput
  connect?: Prisma.GameProviderWhereUniqueInput
}

export type GameProviderUpdateOneWithoutGamesNestedInput = {
  create?: Prisma.XOR<Prisma.GameProviderCreateWithoutGamesInput, Prisma.GameProviderUncheckedCreateWithoutGamesInput>
  connectOrCreate?: Prisma.GameProviderCreateOrConnectWithoutGamesInput
  upsert?: Prisma.GameProviderUpsertWithoutGamesInput
  disconnect?: Prisma.GameProviderWhereInput | boolean
  delete?: Prisma.GameProviderWhereInput | boolean
  connect?: Prisma.GameProviderWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.GameProviderUpdateToOneWithWhereWithoutGamesInput, Prisma.GameProviderUpdateWithoutGamesInput>, Prisma.GameProviderUncheckedUpdateWithoutGamesInput>
}

export type EnumProviderAuthTypeFieldUpdateOperationsInput = {
  set?: $Enums.ProviderAuthType
}

export type GameProviderCreateWithoutGamesInput = {
  id?: string
  name: string
  displayName?: string | null
  rgsBaseUrl: string
  settingsPath?: string | null
  spinPath?: string | null
  resolveBetPath?: string | null
  providerRoundId?: string | null
  authType?: $Enums.ProviderAuthType
  apiKey?: string | null
  apiSecret?: string | null
  publicKey?: string | null
  privateKeyRef?: string | null
  configJson?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  isActive?: boolean
  notes?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type GameProviderUncheckedCreateWithoutGamesInput = {
  id?: string
  name: string
  displayName?: string | null
  rgsBaseUrl: string
  settingsPath?: string | null
  spinPath?: string | null
  resolveBetPath?: string | null
  providerRoundId?: string | null
  authType?: $Enums.ProviderAuthType
  apiKey?: string | null
  apiSecret?: string | null
  publicKey?: string | null
  privateKeyRef?: string | null
  configJson?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  isActive?: boolean
  notes?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type GameProviderCreateOrConnectWithoutGamesInput = {
  where: Prisma.GameProviderWhereUniqueInput
  create: Prisma.XOR<Prisma.GameProviderCreateWithoutGamesInput, Prisma.GameProviderUncheckedCreateWithoutGamesInput>
}

export type GameProviderUpsertWithoutGamesInput = {
  update: Prisma.XOR<Prisma.GameProviderUpdateWithoutGamesInput, Prisma.GameProviderUncheckedUpdateWithoutGamesInput>
  create: Prisma.XOR<Prisma.GameProviderCreateWithoutGamesInput, Prisma.GameProviderUncheckedCreateWithoutGamesInput>
  where?: Prisma.GameProviderWhereInput
}

export type GameProviderUpdateToOneWithWhereWithoutGamesInput = {
  where?: Prisma.GameProviderWhereInput
  data: Prisma.XOR<Prisma.GameProviderUpdateWithoutGamesInput, Prisma.GameProviderUncheckedUpdateWithoutGamesInput>
}

export type GameProviderUpdateWithoutGamesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  displayName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rgsBaseUrl?: Prisma.StringFieldUpdateOperationsInput | string
  settingsPath?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  spinPath?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  resolveBetPath?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  providerRoundId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  authType?: Prisma.EnumProviderAuthTypeFieldUpdateOperationsInput | $Enums.ProviderAuthType
  apiKey?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  apiSecret?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  publicKey?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  privateKeyRef?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  configJson?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type GameProviderUncheckedUpdateWithoutGamesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  displayName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rgsBaseUrl?: Prisma.StringFieldUpdateOperationsInput | string
  settingsPath?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  spinPath?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  resolveBetPath?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  providerRoundId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  authType?: Prisma.EnumProviderAuthTypeFieldUpdateOperationsInput | $Enums.ProviderAuthType
  apiKey?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  apiSecret?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  publicKey?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  privateKeyRef?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  configJson?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type GameProviderCountOutputType
 */

export type GameProviderCountOutputType = {
  games: number
}

export type GameProviderCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  games?: boolean | GameProviderCountOutputTypeCountGamesArgs
}

/**
 * GameProviderCountOutputType without action
 */
export type GameProviderCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameProviderCountOutputType
   */
  select?: Prisma.GameProviderCountOutputTypeSelect<ExtArgs> | null
}

/**
 * GameProviderCountOutputType without action
 */
export type GameProviderCountOutputTypeCountGamesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.GameWhereInput
}


export type GameProviderSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  displayName?: boolean
  rgsBaseUrl?: boolean
  settingsPath?: boolean
  spinPath?: boolean
  resolveBetPath?: boolean
  providerRoundId?: boolean
  authType?: boolean
  apiKey?: boolean
  apiSecret?: boolean
  publicKey?: boolean
  privateKeyRef?: boolean
  configJson?: boolean
  isActive?: boolean
  notes?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  games?: boolean | Prisma.GameProvider$gamesArgs<ExtArgs>
  _count?: boolean | Prisma.GameProviderCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["gameProvider"]>

export type GameProviderSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  displayName?: boolean
  rgsBaseUrl?: boolean
  settingsPath?: boolean
  spinPath?: boolean
  resolveBetPath?: boolean
  providerRoundId?: boolean
  authType?: boolean
  apiKey?: boolean
  apiSecret?: boolean
  publicKey?: boolean
  privateKeyRef?: boolean
  configJson?: boolean
  isActive?: boolean
  notes?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["gameProvider"]>

export type GameProviderSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  displayName?: boolean
  rgsBaseUrl?: boolean
  settingsPath?: boolean
  spinPath?: boolean
  resolveBetPath?: boolean
  providerRoundId?: boolean
  authType?: boolean
  apiKey?: boolean
  apiSecret?: boolean
  publicKey?: boolean
  privateKeyRef?: boolean
  configJson?: boolean
  isActive?: boolean
  notes?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["gameProvider"]>

export type GameProviderSelectScalar = {
  id?: boolean
  name?: boolean
  displayName?: boolean
  rgsBaseUrl?: boolean
  settingsPath?: boolean
  spinPath?: boolean
  resolveBetPath?: boolean
  providerRoundId?: boolean
  authType?: boolean
  apiKey?: boolean
  apiSecret?: boolean
  publicKey?: boolean
  privateKeyRef?: boolean
  configJson?: boolean
  isActive?: boolean
  notes?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type GameProviderOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "displayName" | "rgsBaseUrl" | "settingsPath" | "spinPath" | "resolveBetPath" | "providerRoundId" | "authType" | "apiKey" | "apiSecret" | "publicKey" | "privateKeyRef" | "configJson" | "isActive" | "notes" | "createdAt" | "updatedAt", ExtArgs["result"]["gameProvider"]>
export type GameProviderInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  games?: boolean | Prisma.GameProvider$gamesArgs<ExtArgs>
  _count?: boolean | Prisma.GameProviderCountOutputTypeDefaultArgs<ExtArgs>
}
export type GameProviderIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type GameProviderIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $GameProviderPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "GameProvider"
  objects: {
    games: Prisma.$GamePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    displayName: string | null
    rgsBaseUrl: string
    settingsPath: string | null
    spinPath: string | null
    resolveBetPath: string | null
    providerRoundId: string | null
    authType: $Enums.ProviderAuthType
    apiKey: string | null
    apiSecret: string | null
    publicKey: string | null
    privateKeyRef: string | null
    configJson: runtime.JsonValue | null
    isActive: boolean
    notes: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["gameProvider"]>
  composites: {}
}

export type GameProviderGetPayload<S extends boolean | null | undefined | GameProviderDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$GameProviderPayload, S>

export type GameProviderCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<GameProviderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: GameProviderCountAggregateInputType | true
  }

export interface GameProviderDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GameProvider'], meta: { name: 'GameProvider' } }
  /**
   * Find zero or one GameProvider that matches the filter.
   * @param {GameProviderFindUniqueArgs} args - Arguments to find a GameProvider
   * @example
   * // Get one GameProvider
   * const gameProvider = await prisma.gameProvider.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends GameProviderFindUniqueArgs>(args: Prisma.SelectSubset<T, GameProviderFindUniqueArgs<ExtArgs>>): Prisma.Prisma__GameProviderClient<runtime.Types.Result.GetResult<Prisma.$GameProviderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one GameProvider that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {GameProviderFindUniqueOrThrowArgs} args - Arguments to find a GameProvider
   * @example
   * // Get one GameProvider
   * const gameProvider = await prisma.gameProvider.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends GameProviderFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, GameProviderFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__GameProviderClient<runtime.Types.Result.GetResult<Prisma.$GameProviderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first GameProvider that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameProviderFindFirstArgs} args - Arguments to find a GameProvider
   * @example
   * // Get one GameProvider
   * const gameProvider = await prisma.gameProvider.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends GameProviderFindFirstArgs>(args?: Prisma.SelectSubset<T, GameProviderFindFirstArgs<ExtArgs>>): Prisma.Prisma__GameProviderClient<runtime.Types.Result.GetResult<Prisma.$GameProviderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first GameProvider that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameProviderFindFirstOrThrowArgs} args - Arguments to find a GameProvider
   * @example
   * // Get one GameProvider
   * const gameProvider = await prisma.gameProvider.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends GameProviderFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, GameProviderFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__GameProviderClient<runtime.Types.Result.GetResult<Prisma.$GameProviderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more GameProviders that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameProviderFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all GameProviders
   * const gameProviders = await prisma.gameProvider.findMany()
   * 
   * // Get first 10 GameProviders
   * const gameProviders = await prisma.gameProvider.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const gameProviderWithIdOnly = await prisma.gameProvider.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends GameProviderFindManyArgs>(args?: Prisma.SelectSubset<T, GameProviderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GameProviderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a GameProvider.
   * @param {GameProviderCreateArgs} args - Arguments to create a GameProvider.
   * @example
   * // Create one GameProvider
   * const GameProvider = await prisma.gameProvider.create({
   *   data: {
   *     // ... data to create a GameProvider
   *   }
   * })
   * 
   */
  create<T extends GameProviderCreateArgs>(args: Prisma.SelectSubset<T, GameProviderCreateArgs<ExtArgs>>): Prisma.Prisma__GameProviderClient<runtime.Types.Result.GetResult<Prisma.$GameProviderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many GameProviders.
   * @param {GameProviderCreateManyArgs} args - Arguments to create many GameProviders.
   * @example
   * // Create many GameProviders
   * const gameProvider = await prisma.gameProvider.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends GameProviderCreateManyArgs>(args?: Prisma.SelectSubset<T, GameProviderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many GameProviders and returns the data saved in the database.
   * @param {GameProviderCreateManyAndReturnArgs} args - Arguments to create many GameProviders.
   * @example
   * // Create many GameProviders
   * const gameProvider = await prisma.gameProvider.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many GameProviders and only return the `id`
   * const gameProviderWithIdOnly = await prisma.gameProvider.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends GameProviderCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, GameProviderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GameProviderPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a GameProvider.
   * @param {GameProviderDeleteArgs} args - Arguments to delete one GameProvider.
   * @example
   * // Delete one GameProvider
   * const GameProvider = await prisma.gameProvider.delete({
   *   where: {
   *     // ... filter to delete one GameProvider
   *   }
   * })
   * 
   */
  delete<T extends GameProviderDeleteArgs>(args: Prisma.SelectSubset<T, GameProviderDeleteArgs<ExtArgs>>): Prisma.Prisma__GameProviderClient<runtime.Types.Result.GetResult<Prisma.$GameProviderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one GameProvider.
   * @param {GameProviderUpdateArgs} args - Arguments to update one GameProvider.
   * @example
   * // Update one GameProvider
   * const gameProvider = await prisma.gameProvider.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends GameProviderUpdateArgs>(args: Prisma.SelectSubset<T, GameProviderUpdateArgs<ExtArgs>>): Prisma.Prisma__GameProviderClient<runtime.Types.Result.GetResult<Prisma.$GameProviderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more GameProviders.
   * @param {GameProviderDeleteManyArgs} args - Arguments to filter GameProviders to delete.
   * @example
   * // Delete a few GameProviders
   * const { count } = await prisma.gameProvider.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends GameProviderDeleteManyArgs>(args?: Prisma.SelectSubset<T, GameProviderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more GameProviders.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameProviderUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many GameProviders
   * const gameProvider = await prisma.gameProvider.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends GameProviderUpdateManyArgs>(args: Prisma.SelectSubset<T, GameProviderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more GameProviders and returns the data updated in the database.
   * @param {GameProviderUpdateManyAndReturnArgs} args - Arguments to update many GameProviders.
   * @example
   * // Update many GameProviders
   * const gameProvider = await prisma.gameProvider.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more GameProviders and only return the `id`
   * const gameProviderWithIdOnly = await prisma.gameProvider.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends GameProviderUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, GameProviderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GameProviderPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one GameProvider.
   * @param {GameProviderUpsertArgs} args - Arguments to update or create a GameProvider.
   * @example
   * // Update or create a GameProvider
   * const gameProvider = await prisma.gameProvider.upsert({
   *   create: {
   *     // ... data to create a GameProvider
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the GameProvider we want to update
   *   }
   * })
   */
  upsert<T extends GameProviderUpsertArgs>(args: Prisma.SelectSubset<T, GameProviderUpsertArgs<ExtArgs>>): Prisma.Prisma__GameProviderClient<runtime.Types.Result.GetResult<Prisma.$GameProviderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of GameProviders.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameProviderCountArgs} args - Arguments to filter GameProviders to count.
   * @example
   * // Count the number of GameProviders
   * const count = await prisma.gameProvider.count({
   *   where: {
   *     // ... the filter for the GameProviders we want to count
   *   }
   * })
  **/
  count<T extends GameProviderCountArgs>(
    args?: Prisma.Subset<T, GameProviderCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], GameProviderCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a GameProvider.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameProviderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends GameProviderAggregateArgs>(args: Prisma.Subset<T, GameProviderAggregateArgs>): Prisma.PrismaPromise<GetGameProviderAggregateType<T>>

  /**
   * Group by GameProvider.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameProviderGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends GameProviderGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: GameProviderGroupByArgs['orderBy'] }
      : { orderBy?: GameProviderGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, GameProviderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameProviderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the GameProvider model
 */
readonly fields: GameProviderFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for GameProvider.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__GameProviderClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  games<T extends Prisma.GameProvider$gamesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.GameProvider$gamesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the GameProvider model
 */
export interface GameProviderFieldRefs {
  readonly id: Prisma.FieldRef<"GameProvider", 'String'>
  readonly name: Prisma.FieldRef<"GameProvider", 'String'>
  readonly displayName: Prisma.FieldRef<"GameProvider", 'String'>
  readonly rgsBaseUrl: Prisma.FieldRef<"GameProvider", 'String'>
  readonly settingsPath: Prisma.FieldRef<"GameProvider", 'String'>
  readonly spinPath: Prisma.FieldRef<"GameProvider", 'String'>
  readonly resolveBetPath: Prisma.FieldRef<"GameProvider", 'String'>
  readonly providerRoundId: Prisma.FieldRef<"GameProvider", 'String'>
  readonly authType: Prisma.FieldRef<"GameProvider", 'ProviderAuthType'>
  readonly apiKey: Prisma.FieldRef<"GameProvider", 'String'>
  readonly apiSecret: Prisma.FieldRef<"GameProvider", 'String'>
  readonly publicKey: Prisma.FieldRef<"GameProvider", 'String'>
  readonly privateKeyRef: Prisma.FieldRef<"GameProvider", 'String'>
  readonly configJson: Prisma.FieldRef<"GameProvider", 'Json'>
  readonly isActive: Prisma.FieldRef<"GameProvider", 'Boolean'>
  readonly notes: Prisma.FieldRef<"GameProvider", 'String'>
  readonly createdAt: Prisma.FieldRef<"GameProvider", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"GameProvider", 'DateTime'>
}
    

// Custom InputTypes
/**
 * GameProvider findUnique
 */
export type GameProviderFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameProvider
   */
  select?: Prisma.GameProviderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameProvider
   */
  omit?: Prisma.GameProviderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameProviderInclude<ExtArgs> | null
  /**
   * Filter, which GameProvider to fetch.
   */
  where: Prisma.GameProviderWhereUniqueInput
}

/**
 * GameProvider findUniqueOrThrow
 */
export type GameProviderFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameProvider
   */
  select?: Prisma.GameProviderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameProvider
   */
  omit?: Prisma.GameProviderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameProviderInclude<ExtArgs> | null
  /**
   * Filter, which GameProvider to fetch.
   */
  where: Prisma.GameProviderWhereUniqueInput
}

/**
 * GameProvider findFirst
 */
export type GameProviderFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameProvider
   */
  select?: Prisma.GameProviderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameProvider
   */
  omit?: Prisma.GameProviderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameProviderInclude<ExtArgs> | null
  /**
   * Filter, which GameProvider to fetch.
   */
  where?: Prisma.GameProviderWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of GameProviders to fetch.
   */
  orderBy?: Prisma.GameProviderOrderByWithRelationInput | Prisma.GameProviderOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for GameProviders.
   */
  cursor?: Prisma.GameProviderWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` GameProviders from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` GameProviders.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of GameProviders.
   */
  distinct?: Prisma.GameProviderScalarFieldEnum | Prisma.GameProviderScalarFieldEnum[]
}

/**
 * GameProvider findFirstOrThrow
 */
export type GameProviderFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameProvider
   */
  select?: Prisma.GameProviderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameProvider
   */
  omit?: Prisma.GameProviderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameProviderInclude<ExtArgs> | null
  /**
   * Filter, which GameProvider to fetch.
   */
  where?: Prisma.GameProviderWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of GameProviders to fetch.
   */
  orderBy?: Prisma.GameProviderOrderByWithRelationInput | Prisma.GameProviderOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for GameProviders.
   */
  cursor?: Prisma.GameProviderWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` GameProviders from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` GameProviders.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of GameProviders.
   */
  distinct?: Prisma.GameProviderScalarFieldEnum | Prisma.GameProviderScalarFieldEnum[]
}

/**
 * GameProvider findMany
 */
export type GameProviderFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameProvider
   */
  select?: Prisma.GameProviderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameProvider
   */
  omit?: Prisma.GameProviderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameProviderInclude<ExtArgs> | null
  /**
   * Filter, which GameProviders to fetch.
   */
  where?: Prisma.GameProviderWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of GameProviders to fetch.
   */
  orderBy?: Prisma.GameProviderOrderByWithRelationInput | Prisma.GameProviderOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing GameProviders.
   */
  cursor?: Prisma.GameProviderWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` GameProviders from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` GameProviders.
   */
  skip?: number
  distinct?: Prisma.GameProviderScalarFieldEnum | Prisma.GameProviderScalarFieldEnum[]
}

/**
 * GameProvider create
 */
export type GameProviderCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameProvider
   */
  select?: Prisma.GameProviderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameProvider
   */
  omit?: Prisma.GameProviderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameProviderInclude<ExtArgs> | null
  /**
   * The data needed to create a GameProvider.
   */
  data: Prisma.XOR<Prisma.GameProviderCreateInput, Prisma.GameProviderUncheckedCreateInput>
}

/**
 * GameProvider createMany
 */
export type GameProviderCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many GameProviders.
   */
  data: Prisma.GameProviderCreateManyInput | Prisma.GameProviderCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * GameProvider createManyAndReturn
 */
export type GameProviderCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameProvider
   */
  select?: Prisma.GameProviderSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the GameProvider
   */
  omit?: Prisma.GameProviderOmit<ExtArgs> | null
  /**
   * The data used to create many GameProviders.
   */
  data: Prisma.GameProviderCreateManyInput | Prisma.GameProviderCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * GameProvider update
 */
export type GameProviderUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameProvider
   */
  select?: Prisma.GameProviderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameProvider
   */
  omit?: Prisma.GameProviderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameProviderInclude<ExtArgs> | null
  /**
   * The data needed to update a GameProvider.
   */
  data: Prisma.XOR<Prisma.GameProviderUpdateInput, Prisma.GameProviderUncheckedUpdateInput>
  /**
   * Choose, which GameProvider to update.
   */
  where: Prisma.GameProviderWhereUniqueInput
}

/**
 * GameProvider updateMany
 */
export type GameProviderUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update GameProviders.
   */
  data: Prisma.XOR<Prisma.GameProviderUpdateManyMutationInput, Prisma.GameProviderUncheckedUpdateManyInput>
  /**
   * Filter which GameProviders to update
   */
  where?: Prisma.GameProviderWhereInput
  /**
   * Limit how many GameProviders to update.
   */
  limit?: number
}

/**
 * GameProvider updateManyAndReturn
 */
export type GameProviderUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameProvider
   */
  select?: Prisma.GameProviderSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the GameProvider
   */
  omit?: Prisma.GameProviderOmit<ExtArgs> | null
  /**
   * The data used to update GameProviders.
   */
  data: Prisma.XOR<Prisma.GameProviderUpdateManyMutationInput, Prisma.GameProviderUncheckedUpdateManyInput>
  /**
   * Filter which GameProviders to update
   */
  where?: Prisma.GameProviderWhereInput
  /**
   * Limit how many GameProviders to update.
   */
  limit?: number
}

/**
 * GameProvider upsert
 */
export type GameProviderUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameProvider
   */
  select?: Prisma.GameProviderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameProvider
   */
  omit?: Prisma.GameProviderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameProviderInclude<ExtArgs> | null
  /**
   * The filter to search for the GameProvider to update in case it exists.
   */
  where: Prisma.GameProviderWhereUniqueInput
  /**
   * In case the GameProvider found by the `where` argument doesn't exist, create a new GameProvider with this data.
   */
  create: Prisma.XOR<Prisma.GameProviderCreateInput, Prisma.GameProviderUncheckedCreateInput>
  /**
   * In case the GameProvider was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.GameProviderUpdateInput, Prisma.GameProviderUncheckedUpdateInput>
}

/**
 * GameProvider delete
 */
export type GameProviderDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameProvider
   */
  select?: Prisma.GameProviderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameProvider
   */
  omit?: Prisma.GameProviderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameProviderInclude<ExtArgs> | null
  /**
   * Filter which GameProvider to delete.
   */
  where: Prisma.GameProviderWhereUniqueInput
}

/**
 * GameProvider deleteMany
 */
export type GameProviderDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which GameProviders to delete
   */
  where?: Prisma.GameProviderWhereInput
  /**
   * Limit how many GameProviders to delete.
   */
  limit?: number
}

/**
 * GameProvider.games
 */
export type GameProvider$gamesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Game
   */
  select?: Prisma.GameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Game
   */
  omit?: Prisma.GameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameInclude<ExtArgs> | null
  where?: Prisma.GameWhereInput
  orderBy?: Prisma.GameOrderByWithRelationInput | Prisma.GameOrderByWithRelationInput[]
  cursor?: Prisma.GameWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.GameScalarFieldEnum | Prisma.GameScalarFieldEnum[]
}

/**
 * GameProvider without action
 */
export type GameProviderDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameProvider
   */
  select?: Prisma.GameProviderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameProvider
   */
  omit?: Prisma.GameProviderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameProviderInclude<ExtArgs> | null
}
