
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `TournamentReward` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model TournamentReward
 * 
 */
export type TournamentRewardModel = runtime.Types.Result.DefaultSelection<Prisma.$TournamentRewardPayload>

export type AggregateTournamentReward = {
  _count: TournamentRewardCountAggregateOutputType | null
  _avg: TournamentRewardAvgAggregateOutputType | null
  _sum: TournamentRewardSumAggregateOutputType | null
  _min: TournamentRewardMinAggregateOutputType | null
  _max: TournamentRewardMaxAggregateOutputType | null
}

export type TournamentRewardAvgAggregateOutputType = {
  rank: number | null
}

export type TournamentRewardSumAggregateOutputType = {
  rank: number | null
}

export type TournamentRewardMinAggregateOutputType = {
  id: string | null
  tournamentId: string | null
  rank: number | null
  description: string | null
  isClaimed: boolean | null
  winnerId: string | null
}

export type TournamentRewardMaxAggregateOutputType = {
  id: string | null
  tournamentId: string | null
  rank: number | null
  description: string | null
  isClaimed: boolean | null
  winnerId: string | null
}

export type TournamentRewardCountAggregateOutputType = {
  id: number
  tournamentId: number
  rank: number
  description: number
  isClaimed: number
  winnerId: number
  _all: number
}


export type TournamentRewardAvgAggregateInputType = {
  rank?: true
}

export type TournamentRewardSumAggregateInputType = {
  rank?: true
}

export type TournamentRewardMinAggregateInputType = {
  id?: true
  tournamentId?: true
  rank?: true
  description?: true
  isClaimed?: true
  winnerId?: true
}

export type TournamentRewardMaxAggregateInputType = {
  id?: true
  tournamentId?: true
  rank?: true
  description?: true
  isClaimed?: true
  winnerId?: true
}

export type TournamentRewardCountAggregateInputType = {
  id?: true
  tournamentId?: true
  rank?: true
  description?: true
  isClaimed?: true
  winnerId?: true
  _all?: true
}

export type TournamentRewardAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TournamentReward to aggregate.
   */
  where?: Prisma.TournamentRewardWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TournamentRewards to fetch.
   */
  orderBy?: Prisma.TournamentRewardOrderByWithRelationInput | Prisma.TournamentRewardOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TournamentRewardWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TournamentRewards from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TournamentRewards.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned TournamentRewards
  **/
  _count?: true | TournamentRewardCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: TournamentRewardAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: TournamentRewardSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TournamentRewardMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TournamentRewardMaxAggregateInputType
}

export type GetTournamentRewardAggregateType<T extends TournamentRewardAggregateArgs> = {
      [P in keyof T & keyof AggregateTournamentReward]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTournamentReward[P]>
    : Prisma.GetScalarType<T[P], AggregateTournamentReward[P]>
}




export type TournamentRewardGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TournamentRewardWhereInput
  orderBy?: Prisma.TournamentRewardOrderByWithAggregationInput | Prisma.TournamentRewardOrderByWithAggregationInput[]
  by: Prisma.TournamentRewardScalarFieldEnum[] | Prisma.TournamentRewardScalarFieldEnum
  having?: Prisma.TournamentRewardScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TournamentRewardCountAggregateInputType | true
  _avg?: TournamentRewardAvgAggregateInputType
  _sum?: TournamentRewardSumAggregateInputType
  _min?: TournamentRewardMinAggregateInputType
  _max?: TournamentRewardMaxAggregateInputType
}

export type TournamentRewardGroupByOutputType = {
  id: string
  tournamentId: string
  rank: number
  description: string
  isClaimed: boolean
  winnerId: string | null
  _count: TournamentRewardCountAggregateOutputType | null
  _avg: TournamentRewardAvgAggregateOutputType | null
  _sum: TournamentRewardSumAggregateOutputType | null
  _min: TournamentRewardMinAggregateOutputType | null
  _max: TournamentRewardMaxAggregateOutputType | null
}

type GetTournamentRewardGroupByPayload<T extends TournamentRewardGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TournamentRewardGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TournamentRewardGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TournamentRewardGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TournamentRewardGroupByOutputType[P]>
      }
    >
  > 



export type TournamentRewardWhereInput = {
  AND?: Prisma.TournamentRewardWhereInput | Prisma.TournamentRewardWhereInput[]
  OR?: Prisma.TournamentRewardWhereInput[]
  NOT?: Prisma.TournamentRewardWhereInput | Prisma.TournamentRewardWhereInput[]
  id?: Prisma.StringFilter<"TournamentReward"> | string
  tournamentId?: Prisma.StringFilter<"TournamentReward"> | string
  rank?: Prisma.IntFilter<"TournamentReward"> | number
  description?: Prisma.StringFilter<"TournamentReward"> | string
  isClaimed?: Prisma.BoolFilter<"TournamentReward"> | boolean
  winnerId?: Prisma.StringNullableFilter<"TournamentReward"> | string | null
  tournament?: Prisma.XOR<Prisma.TournamentScalarRelationFilter, Prisma.TournamentWhereInput>
  winner?: Prisma.XOR<Prisma.UserProfileNullableScalarRelationFilter, Prisma.UserProfileWhereInput> | null
}

export type TournamentRewardOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  tournamentId?: Prisma.SortOrder
  rank?: Prisma.SortOrder
  description?: Prisma.SortOrder
  isClaimed?: Prisma.SortOrder
  winnerId?: Prisma.SortOrderInput | Prisma.SortOrder
  tournament?: Prisma.TournamentOrderByWithRelationInput
  winner?: Prisma.UserProfileOrderByWithRelationInput
}

export type TournamentRewardWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.TournamentRewardWhereInput | Prisma.TournamentRewardWhereInput[]
  OR?: Prisma.TournamentRewardWhereInput[]
  NOT?: Prisma.TournamentRewardWhereInput | Prisma.TournamentRewardWhereInput[]
  tournamentId?: Prisma.StringFilter<"TournamentReward"> | string
  rank?: Prisma.IntFilter<"TournamentReward"> | number
  description?: Prisma.StringFilter<"TournamentReward"> | string
  isClaimed?: Prisma.BoolFilter<"TournamentReward"> | boolean
  winnerId?: Prisma.StringNullableFilter<"TournamentReward"> | string | null
  tournament?: Prisma.XOR<Prisma.TournamentScalarRelationFilter, Prisma.TournamentWhereInput>
  winner?: Prisma.XOR<Prisma.UserProfileNullableScalarRelationFilter, Prisma.UserProfileWhereInput> | null
}, "id">

export type TournamentRewardOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  tournamentId?: Prisma.SortOrder
  rank?: Prisma.SortOrder
  description?: Prisma.SortOrder
  isClaimed?: Prisma.SortOrder
  winnerId?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.TournamentRewardCountOrderByAggregateInput
  _avg?: Prisma.TournamentRewardAvgOrderByAggregateInput
  _max?: Prisma.TournamentRewardMaxOrderByAggregateInput
  _min?: Prisma.TournamentRewardMinOrderByAggregateInput
  _sum?: Prisma.TournamentRewardSumOrderByAggregateInput
}

export type TournamentRewardScalarWhereWithAggregatesInput = {
  AND?: Prisma.TournamentRewardScalarWhereWithAggregatesInput | Prisma.TournamentRewardScalarWhereWithAggregatesInput[]
  OR?: Prisma.TournamentRewardScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TournamentRewardScalarWhereWithAggregatesInput | Prisma.TournamentRewardScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"TournamentReward"> | string
  tournamentId?: Prisma.StringWithAggregatesFilter<"TournamentReward"> | string
  rank?: Prisma.IntWithAggregatesFilter<"TournamentReward"> | number
  description?: Prisma.StringWithAggregatesFilter<"TournamentReward"> | string
  isClaimed?: Prisma.BoolWithAggregatesFilter<"TournamentReward"> | boolean
  winnerId?: Prisma.StringNullableWithAggregatesFilter<"TournamentReward"> | string | null
}

export type TournamentRewardCreateInput = {
  id?: string
  rank: number
  description: string
  isClaimed?: boolean
  tournament: Prisma.TournamentCreateNestedOneWithoutRewardsInput
  winner?: Prisma.UserProfileCreateNestedOneWithoutTournamentRewardInput
}

export type TournamentRewardUncheckedCreateInput = {
  id?: string
  tournamentId: string
  rank: number
  description: string
  isClaimed?: boolean
  winnerId?: string | null
}

export type TournamentRewardUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  rank?: Prisma.IntFieldUpdateOperationsInput | number
  description?: Prisma.StringFieldUpdateOperationsInput | string
  isClaimed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  tournament?: Prisma.TournamentUpdateOneRequiredWithoutRewardsNestedInput
  winner?: Prisma.UserProfileUpdateOneWithoutTournamentRewardNestedInput
}

export type TournamentRewardUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  tournamentId?: Prisma.StringFieldUpdateOperationsInput | string
  rank?: Prisma.IntFieldUpdateOperationsInput | number
  description?: Prisma.StringFieldUpdateOperationsInput | string
  isClaimed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  winnerId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type TournamentRewardCreateManyInput = {
  id?: string
  tournamentId: string
  rank: number
  description: string
  isClaimed?: boolean
  winnerId?: string | null
}

export type TournamentRewardUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  rank?: Prisma.IntFieldUpdateOperationsInput | number
  description?: Prisma.StringFieldUpdateOperationsInput | string
  isClaimed?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type TournamentRewardUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  tournamentId?: Prisma.StringFieldUpdateOperationsInput | string
  rank?: Prisma.IntFieldUpdateOperationsInput | number
  description?: Prisma.StringFieldUpdateOperationsInput | string
  isClaimed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  winnerId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type TournamentRewardListRelationFilter = {
  every?: Prisma.TournamentRewardWhereInput
  some?: Prisma.TournamentRewardWhereInput
  none?: Prisma.TournamentRewardWhereInput
}

export type TournamentRewardOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type TournamentRewardCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  tournamentId?: Prisma.SortOrder
  rank?: Prisma.SortOrder
  description?: Prisma.SortOrder
  isClaimed?: Prisma.SortOrder
  winnerId?: Prisma.SortOrder
}

export type TournamentRewardAvgOrderByAggregateInput = {
  rank?: Prisma.SortOrder
}

export type TournamentRewardMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  tournamentId?: Prisma.SortOrder
  rank?: Prisma.SortOrder
  description?: Prisma.SortOrder
  isClaimed?: Prisma.SortOrder
  winnerId?: Prisma.SortOrder
}

export type TournamentRewardMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  tournamentId?: Prisma.SortOrder
  rank?: Prisma.SortOrder
  description?: Prisma.SortOrder
  isClaimed?: Prisma.SortOrder
  winnerId?: Prisma.SortOrder
}

export type TournamentRewardSumOrderByAggregateInput = {
  rank?: Prisma.SortOrder
}

export type TournamentRewardCreateNestedManyWithoutTournamentInput = {
  create?: Prisma.XOR<Prisma.TournamentRewardCreateWithoutTournamentInput, Prisma.TournamentRewardUncheckedCreateWithoutTournamentInput> | Prisma.TournamentRewardCreateWithoutTournamentInput[] | Prisma.TournamentRewardUncheckedCreateWithoutTournamentInput[]
  connectOrCreate?: Prisma.TournamentRewardCreateOrConnectWithoutTournamentInput | Prisma.TournamentRewardCreateOrConnectWithoutTournamentInput[]
  createMany?: Prisma.TournamentRewardCreateManyTournamentInputEnvelope
  connect?: Prisma.TournamentRewardWhereUniqueInput | Prisma.TournamentRewardWhereUniqueInput[]
}

export type TournamentRewardUncheckedCreateNestedManyWithoutTournamentInput = {
  create?: Prisma.XOR<Prisma.TournamentRewardCreateWithoutTournamentInput, Prisma.TournamentRewardUncheckedCreateWithoutTournamentInput> | Prisma.TournamentRewardCreateWithoutTournamentInput[] | Prisma.TournamentRewardUncheckedCreateWithoutTournamentInput[]
  connectOrCreate?: Prisma.TournamentRewardCreateOrConnectWithoutTournamentInput | Prisma.TournamentRewardCreateOrConnectWithoutTournamentInput[]
  createMany?: Prisma.TournamentRewardCreateManyTournamentInputEnvelope
  connect?: Prisma.TournamentRewardWhereUniqueInput | Prisma.TournamentRewardWhereUniqueInput[]
}

export type TournamentRewardUpdateManyWithoutTournamentNestedInput = {
  create?: Prisma.XOR<Prisma.TournamentRewardCreateWithoutTournamentInput, Prisma.TournamentRewardUncheckedCreateWithoutTournamentInput> | Prisma.TournamentRewardCreateWithoutTournamentInput[] | Prisma.TournamentRewardUncheckedCreateWithoutTournamentInput[]
  connectOrCreate?: Prisma.TournamentRewardCreateOrConnectWithoutTournamentInput | Prisma.TournamentRewardCreateOrConnectWithoutTournamentInput[]
  upsert?: Prisma.TournamentRewardUpsertWithWhereUniqueWithoutTournamentInput | Prisma.TournamentRewardUpsertWithWhereUniqueWithoutTournamentInput[]
  createMany?: Prisma.TournamentRewardCreateManyTournamentInputEnvelope
  set?: Prisma.TournamentRewardWhereUniqueInput | Prisma.TournamentRewardWhereUniqueInput[]
  disconnect?: Prisma.TournamentRewardWhereUniqueInput | Prisma.TournamentRewardWhereUniqueInput[]
  delete?: Prisma.TournamentRewardWhereUniqueInput | Prisma.TournamentRewardWhereUniqueInput[]
  connect?: Prisma.TournamentRewardWhereUniqueInput | Prisma.TournamentRewardWhereUniqueInput[]
  update?: Prisma.TournamentRewardUpdateWithWhereUniqueWithoutTournamentInput | Prisma.TournamentRewardUpdateWithWhereUniqueWithoutTournamentInput[]
  updateMany?: Prisma.TournamentRewardUpdateManyWithWhereWithoutTournamentInput | Prisma.TournamentRewardUpdateManyWithWhereWithoutTournamentInput[]
  deleteMany?: Prisma.TournamentRewardScalarWhereInput | Prisma.TournamentRewardScalarWhereInput[]
}

export type TournamentRewardUncheckedUpdateManyWithoutTournamentNestedInput = {
  create?: Prisma.XOR<Prisma.TournamentRewardCreateWithoutTournamentInput, Prisma.TournamentRewardUncheckedCreateWithoutTournamentInput> | Prisma.TournamentRewardCreateWithoutTournamentInput[] | Prisma.TournamentRewardUncheckedCreateWithoutTournamentInput[]
  connectOrCreate?: Prisma.TournamentRewardCreateOrConnectWithoutTournamentInput | Prisma.TournamentRewardCreateOrConnectWithoutTournamentInput[]
  upsert?: Prisma.TournamentRewardUpsertWithWhereUniqueWithoutTournamentInput | Prisma.TournamentRewardUpsertWithWhereUniqueWithoutTournamentInput[]
  createMany?: Prisma.TournamentRewardCreateManyTournamentInputEnvelope
  set?: Prisma.TournamentRewardWhereUniqueInput | Prisma.TournamentRewardWhereUniqueInput[]
  disconnect?: Prisma.TournamentRewardWhereUniqueInput | Prisma.TournamentRewardWhereUniqueInput[]
  delete?: Prisma.TournamentRewardWhereUniqueInput | Prisma.TournamentRewardWhereUniqueInput[]
  connect?: Prisma.TournamentRewardWhereUniqueInput | Prisma.TournamentRewardWhereUniqueInput[]
  update?: Prisma.TournamentRewardUpdateWithWhereUniqueWithoutTournamentInput | Prisma.TournamentRewardUpdateWithWhereUniqueWithoutTournamentInput[]
  updateMany?: Prisma.TournamentRewardUpdateManyWithWhereWithoutTournamentInput | Prisma.TournamentRewardUpdateManyWithWhereWithoutTournamentInput[]
  deleteMany?: Prisma.TournamentRewardScalarWhereInput | Prisma.TournamentRewardScalarWhereInput[]
}

export type TournamentRewardCreateNestedManyWithoutWinnerInput = {
  create?: Prisma.XOR<Prisma.TournamentRewardCreateWithoutWinnerInput, Prisma.TournamentRewardUncheckedCreateWithoutWinnerInput> | Prisma.TournamentRewardCreateWithoutWinnerInput[] | Prisma.TournamentRewardUncheckedCreateWithoutWinnerInput[]
  connectOrCreate?: Prisma.TournamentRewardCreateOrConnectWithoutWinnerInput | Prisma.TournamentRewardCreateOrConnectWithoutWinnerInput[]
  createMany?: Prisma.TournamentRewardCreateManyWinnerInputEnvelope
  connect?: Prisma.TournamentRewardWhereUniqueInput | Prisma.TournamentRewardWhereUniqueInput[]
}

export type TournamentRewardUncheckedCreateNestedManyWithoutWinnerInput = {
  create?: Prisma.XOR<Prisma.TournamentRewardCreateWithoutWinnerInput, Prisma.TournamentRewardUncheckedCreateWithoutWinnerInput> | Prisma.TournamentRewardCreateWithoutWinnerInput[] | Prisma.TournamentRewardUncheckedCreateWithoutWinnerInput[]
  connectOrCreate?: Prisma.TournamentRewardCreateOrConnectWithoutWinnerInput | Prisma.TournamentRewardCreateOrConnectWithoutWinnerInput[]
  createMany?: Prisma.TournamentRewardCreateManyWinnerInputEnvelope
  connect?: Prisma.TournamentRewardWhereUniqueInput | Prisma.TournamentRewardWhereUniqueInput[]
}

export type TournamentRewardUpdateManyWithoutWinnerNestedInput = {
  create?: Prisma.XOR<Prisma.TournamentRewardCreateWithoutWinnerInput, Prisma.TournamentRewardUncheckedCreateWithoutWinnerInput> | Prisma.TournamentRewardCreateWithoutWinnerInput[] | Prisma.TournamentRewardUncheckedCreateWithoutWinnerInput[]
  connectOrCreate?: Prisma.TournamentRewardCreateOrConnectWithoutWinnerInput | Prisma.TournamentRewardCreateOrConnectWithoutWinnerInput[]
  upsert?: Prisma.TournamentRewardUpsertWithWhereUniqueWithoutWinnerInput | Prisma.TournamentRewardUpsertWithWhereUniqueWithoutWinnerInput[]
  createMany?: Prisma.TournamentRewardCreateManyWinnerInputEnvelope
  set?: Prisma.TournamentRewardWhereUniqueInput | Prisma.TournamentRewardWhereUniqueInput[]
  disconnect?: Prisma.TournamentRewardWhereUniqueInput | Prisma.TournamentRewardWhereUniqueInput[]
  delete?: Prisma.TournamentRewardWhereUniqueInput | Prisma.TournamentRewardWhereUniqueInput[]
  connect?: Prisma.TournamentRewardWhereUniqueInput | Prisma.TournamentRewardWhereUniqueInput[]
  update?: Prisma.TournamentRewardUpdateWithWhereUniqueWithoutWinnerInput | Prisma.TournamentRewardUpdateWithWhereUniqueWithoutWinnerInput[]
  updateMany?: Prisma.TournamentRewardUpdateManyWithWhereWithoutWinnerInput | Prisma.TournamentRewardUpdateManyWithWhereWithoutWinnerInput[]
  deleteMany?: Prisma.TournamentRewardScalarWhereInput | Prisma.TournamentRewardScalarWhereInput[]
}

export type TournamentRewardUncheckedUpdateManyWithoutWinnerNestedInput = {
  create?: Prisma.XOR<Prisma.TournamentRewardCreateWithoutWinnerInput, Prisma.TournamentRewardUncheckedCreateWithoutWinnerInput> | Prisma.TournamentRewardCreateWithoutWinnerInput[] | Prisma.TournamentRewardUncheckedCreateWithoutWinnerInput[]
  connectOrCreate?: Prisma.TournamentRewardCreateOrConnectWithoutWinnerInput | Prisma.TournamentRewardCreateOrConnectWithoutWinnerInput[]
  upsert?: Prisma.TournamentRewardUpsertWithWhereUniqueWithoutWinnerInput | Prisma.TournamentRewardUpsertWithWhereUniqueWithoutWinnerInput[]
  createMany?: Prisma.TournamentRewardCreateManyWinnerInputEnvelope
  set?: Prisma.TournamentRewardWhereUniqueInput | Prisma.TournamentRewardWhereUniqueInput[]
  disconnect?: Prisma.TournamentRewardWhereUniqueInput | Prisma.TournamentRewardWhereUniqueInput[]
  delete?: Prisma.TournamentRewardWhereUniqueInput | Prisma.TournamentRewardWhereUniqueInput[]
  connect?: Prisma.TournamentRewardWhereUniqueInput | Prisma.TournamentRewardWhereUniqueInput[]
  update?: Prisma.TournamentRewardUpdateWithWhereUniqueWithoutWinnerInput | Prisma.TournamentRewardUpdateWithWhereUniqueWithoutWinnerInput[]
  updateMany?: Prisma.TournamentRewardUpdateManyWithWhereWithoutWinnerInput | Prisma.TournamentRewardUpdateManyWithWhereWithoutWinnerInput[]
  deleteMany?: Prisma.TournamentRewardScalarWhereInput | Prisma.TournamentRewardScalarWhereInput[]
}

export type TournamentRewardCreateWithoutTournamentInput = {
  id?: string
  rank: number
  description: string
  isClaimed?: boolean
  winner?: Prisma.UserProfileCreateNestedOneWithoutTournamentRewardInput
}

export type TournamentRewardUncheckedCreateWithoutTournamentInput = {
  id?: string
  rank: number
  description: string
  isClaimed?: boolean
  winnerId?: string | null
}

export type TournamentRewardCreateOrConnectWithoutTournamentInput = {
  where: Prisma.TournamentRewardWhereUniqueInput
  create: Prisma.XOR<Prisma.TournamentRewardCreateWithoutTournamentInput, Prisma.TournamentRewardUncheckedCreateWithoutTournamentInput>
}

export type TournamentRewardCreateManyTournamentInputEnvelope = {
  data: Prisma.TournamentRewardCreateManyTournamentInput | Prisma.TournamentRewardCreateManyTournamentInput[]
  skipDuplicates?: boolean
}

export type TournamentRewardUpsertWithWhereUniqueWithoutTournamentInput = {
  where: Prisma.TournamentRewardWhereUniqueInput
  update: Prisma.XOR<Prisma.TournamentRewardUpdateWithoutTournamentInput, Prisma.TournamentRewardUncheckedUpdateWithoutTournamentInput>
  create: Prisma.XOR<Prisma.TournamentRewardCreateWithoutTournamentInput, Prisma.TournamentRewardUncheckedCreateWithoutTournamentInput>
}

export type TournamentRewardUpdateWithWhereUniqueWithoutTournamentInput = {
  where: Prisma.TournamentRewardWhereUniqueInput
  data: Prisma.XOR<Prisma.TournamentRewardUpdateWithoutTournamentInput, Prisma.TournamentRewardUncheckedUpdateWithoutTournamentInput>
}

export type TournamentRewardUpdateManyWithWhereWithoutTournamentInput = {
  where: Prisma.TournamentRewardScalarWhereInput
  data: Prisma.XOR<Prisma.TournamentRewardUpdateManyMutationInput, Prisma.TournamentRewardUncheckedUpdateManyWithoutTournamentInput>
}

export type TournamentRewardScalarWhereInput = {
  AND?: Prisma.TournamentRewardScalarWhereInput | Prisma.TournamentRewardScalarWhereInput[]
  OR?: Prisma.TournamentRewardScalarWhereInput[]
  NOT?: Prisma.TournamentRewardScalarWhereInput | Prisma.TournamentRewardScalarWhereInput[]
  id?: Prisma.StringFilter<"TournamentReward"> | string
  tournamentId?: Prisma.StringFilter<"TournamentReward"> | string
  rank?: Prisma.IntFilter<"TournamentReward"> | number
  description?: Prisma.StringFilter<"TournamentReward"> | string
  isClaimed?: Prisma.BoolFilter<"TournamentReward"> | boolean
  winnerId?: Prisma.StringNullableFilter<"TournamentReward"> | string | null
}

export type TournamentRewardCreateWithoutWinnerInput = {
  id?: string
  rank: number
  description: string
  isClaimed?: boolean
  tournament: Prisma.TournamentCreateNestedOneWithoutRewardsInput
}

export type TournamentRewardUncheckedCreateWithoutWinnerInput = {
  id?: string
  tournamentId: string
  rank: number
  description: string
  isClaimed?: boolean
}

export type TournamentRewardCreateOrConnectWithoutWinnerInput = {
  where: Prisma.TournamentRewardWhereUniqueInput
  create: Prisma.XOR<Prisma.TournamentRewardCreateWithoutWinnerInput, Prisma.TournamentRewardUncheckedCreateWithoutWinnerInput>
}

export type TournamentRewardCreateManyWinnerInputEnvelope = {
  data: Prisma.TournamentRewardCreateManyWinnerInput | Prisma.TournamentRewardCreateManyWinnerInput[]
  skipDuplicates?: boolean
}

export type TournamentRewardUpsertWithWhereUniqueWithoutWinnerInput = {
  where: Prisma.TournamentRewardWhereUniqueInput
  update: Prisma.XOR<Prisma.TournamentRewardUpdateWithoutWinnerInput, Prisma.TournamentRewardUncheckedUpdateWithoutWinnerInput>
  create: Prisma.XOR<Prisma.TournamentRewardCreateWithoutWinnerInput, Prisma.TournamentRewardUncheckedCreateWithoutWinnerInput>
}

export type TournamentRewardUpdateWithWhereUniqueWithoutWinnerInput = {
  where: Prisma.TournamentRewardWhereUniqueInput
  data: Prisma.XOR<Prisma.TournamentRewardUpdateWithoutWinnerInput, Prisma.TournamentRewardUncheckedUpdateWithoutWinnerInput>
}

export type TournamentRewardUpdateManyWithWhereWithoutWinnerInput = {
  where: Prisma.TournamentRewardScalarWhereInput
  data: Prisma.XOR<Prisma.TournamentRewardUpdateManyMutationInput, Prisma.TournamentRewardUncheckedUpdateManyWithoutWinnerInput>
}

export type TournamentRewardCreateManyTournamentInput = {
  id?: string
  rank: number
  description: string
  isClaimed?: boolean
  winnerId?: string | null
}

export type TournamentRewardUpdateWithoutTournamentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  rank?: Prisma.IntFieldUpdateOperationsInput | number
  description?: Prisma.StringFieldUpdateOperationsInput | string
  isClaimed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  winner?: Prisma.UserProfileUpdateOneWithoutTournamentRewardNestedInput
}

export type TournamentRewardUncheckedUpdateWithoutTournamentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  rank?: Prisma.IntFieldUpdateOperationsInput | number
  description?: Prisma.StringFieldUpdateOperationsInput | string
  isClaimed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  winnerId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type TournamentRewardUncheckedUpdateManyWithoutTournamentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  rank?: Prisma.IntFieldUpdateOperationsInput | number
  description?: Prisma.StringFieldUpdateOperationsInput | string
  isClaimed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  winnerId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type TournamentRewardCreateManyWinnerInput = {
  id?: string
  tournamentId: string
  rank: number
  description: string
  isClaimed?: boolean
}

export type TournamentRewardUpdateWithoutWinnerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  rank?: Prisma.IntFieldUpdateOperationsInput | number
  description?: Prisma.StringFieldUpdateOperationsInput | string
  isClaimed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  tournament?: Prisma.TournamentUpdateOneRequiredWithoutRewardsNestedInput
}

export type TournamentRewardUncheckedUpdateWithoutWinnerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  tournamentId?: Prisma.StringFieldUpdateOperationsInput | string
  rank?: Prisma.IntFieldUpdateOperationsInput | number
  description?: Prisma.StringFieldUpdateOperationsInput | string
  isClaimed?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type TournamentRewardUncheckedUpdateManyWithoutWinnerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  tournamentId?: Prisma.StringFieldUpdateOperationsInput | string
  rank?: Prisma.IntFieldUpdateOperationsInput | number
  description?: Prisma.StringFieldUpdateOperationsInput | string
  isClaimed?: Prisma.BoolFieldUpdateOperationsInput | boolean
}



export type TournamentRewardSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  tournamentId?: boolean
  rank?: boolean
  description?: boolean
  isClaimed?: boolean
  winnerId?: boolean
  tournament?: boolean | Prisma.TournamentDefaultArgs<ExtArgs>
  winner?: boolean | Prisma.TournamentReward$winnerArgs<ExtArgs>
}, ExtArgs["result"]["tournamentReward"]>

export type TournamentRewardSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  tournamentId?: boolean
  rank?: boolean
  description?: boolean
  isClaimed?: boolean
  winnerId?: boolean
  tournament?: boolean | Prisma.TournamentDefaultArgs<ExtArgs>
  winner?: boolean | Prisma.TournamentReward$winnerArgs<ExtArgs>
}, ExtArgs["result"]["tournamentReward"]>

export type TournamentRewardSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  tournamentId?: boolean
  rank?: boolean
  description?: boolean
  isClaimed?: boolean
  winnerId?: boolean
  tournament?: boolean | Prisma.TournamentDefaultArgs<ExtArgs>
  winner?: boolean | Prisma.TournamentReward$winnerArgs<ExtArgs>
}, ExtArgs["result"]["tournamentReward"]>

export type TournamentRewardSelectScalar = {
  id?: boolean
  tournamentId?: boolean
  rank?: boolean
  description?: boolean
  isClaimed?: boolean
  winnerId?: boolean
}

export type TournamentRewardOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "tournamentId" | "rank" | "description" | "isClaimed" | "winnerId", ExtArgs["result"]["tournamentReward"]>
export type TournamentRewardInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  tournament?: boolean | Prisma.TournamentDefaultArgs<ExtArgs>
  winner?: boolean | Prisma.TournamentReward$winnerArgs<ExtArgs>
}
export type TournamentRewardIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  tournament?: boolean | Prisma.TournamentDefaultArgs<ExtArgs>
  winner?: boolean | Prisma.TournamentReward$winnerArgs<ExtArgs>
}
export type TournamentRewardIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  tournament?: boolean | Prisma.TournamentDefaultArgs<ExtArgs>
  winner?: boolean | Prisma.TournamentReward$winnerArgs<ExtArgs>
}

export type $TournamentRewardPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "TournamentReward"
  objects: {
    tournament: Prisma.$TournamentPayload<ExtArgs>
    winner: Prisma.$UserProfilePayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    tournamentId: string
    rank: number
    description: string
    isClaimed: boolean
    winnerId: string | null
  }, ExtArgs["result"]["tournamentReward"]>
  composites: {}
}

export type TournamentRewardGetPayload<S extends boolean | null | undefined | TournamentRewardDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TournamentRewardPayload, S>

export type TournamentRewardCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TournamentRewardFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TournamentRewardCountAggregateInputType | true
  }

export interface TournamentRewardDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TournamentReward'], meta: { name: 'TournamentReward' } }
  /**
   * Find zero or one TournamentReward that matches the filter.
   * @param {TournamentRewardFindUniqueArgs} args - Arguments to find a TournamentReward
   * @example
   * // Get one TournamentReward
   * const tournamentReward = await prisma.tournamentReward.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TournamentRewardFindUniqueArgs>(args: Prisma.SelectSubset<T, TournamentRewardFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TournamentRewardClient<runtime.Types.Result.GetResult<Prisma.$TournamentRewardPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one TournamentReward that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TournamentRewardFindUniqueOrThrowArgs} args - Arguments to find a TournamentReward
   * @example
   * // Get one TournamentReward
   * const tournamentReward = await prisma.tournamentReward.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TournamentRewardFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TournamentRewardFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TournamentRewardClient<runtime.Types.Result.GetResult<Prisma.$TournamentRewardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TournamentReward that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TournamentRewardFindFirstArgs} args - Arguments to find a TournamentReward
   * @example
   * // Get one TournamentReward
   * const tournamentReward = await prisma.tournamentReward.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TournamentRewardFindFirstArgs>(args?: Prisma.SelectSubset<T, TournamentRewardFindFirstArgs<ExtArgs>>): Prisma.Prisma__TournamentRewardClient<runtime.Types.Result.GetResult<Prisma.$TournamentRewardPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TournamentReward that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TournamentRewardFindFirstOrThrowArgs} args - Arguments to find a TournamentReward
   * @example
   * // Get one TournamentReward
   * const tournamentReward = await prisma.tournamentReward.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TournamentRewardFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TournamentRewardFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TournamentRewardClient<runtime.Types.Result.GetResult<Prisma.$TournamentRewardPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more TournamentRewards that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TournamentRewardFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TournamentRewards
   * const tournamentRewards = await prisma.tournamentReward.findMany()
   * 
   * // Get first 10 TournamentRewards
   * const tournamentRewards = await prisma.tournamentReward.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const tournamentRewardWithIdOnly = await prisma.tournamentReward.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TournamentRewardFindManyArgs>(args?: Prisma.SelectSubset<T, TournamentRewardFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TournamentRewardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a TournamentReward.
   * @param {TournamentRewardCreateArgs} args - Arguments to create a TournamentReward.
   * @example
   * // Create one TournamentReward
   * const TournamentReward = await prisma.tournamentReward.create({
   *   data: {
   *     // ... data to create a TournamentReward
   *   }
   * })
   * 
   */
  create<T extends TournamentRewardCreateArgs>(args: Prisma.SelectSubset<T, TournamentRewardCreateArgs<ExtArgs>>): Prisma.Prisma__TournamentRewardClient<runtime.Types.Result.GetResult<Prisma.$TournamentRewardPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many TournamentRewards.
   * @param {TournamentRewardCreateManyArgs} args - Arguments to create many TournamentRewards.
   * @example
   * // Create many TournamentRewards
   * const tournamentReward = await prisma.tournamentReward.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TournamentRewardCreateManyArgs>(args?: Prisma.SelectSubset<T, TournamentRewardCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many TournamentRewards and returns the data saved in the database.
   * @param {TournamentRewardCreateManyAndReturnArgs} args - Arguments to create many TournamentRewards.
   * @example
   * // Create many TournamentRewards
   * const tournamentReward = await prisma.tournamentReward.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many TournamentRewards and only return the `id`
   * const tournamentRewardWithIdOnly = await prisma.tournamentReward.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TournamentRewardCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TournamentRewardCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TournamentRewardPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a TournamentReward.
   * @param {TournamentRewardDeleteArgs} args - Arguments to delete one TournamentReward.
   * @example
   * // Delete one TournamentReward
   * const TournamentReward = await prisma.tournamentReward.delete({
   *   where: {
   *     // ... filter to delete one TournamentReward
   *   }
   * })
   * 
   */
  delete<T extends TournamentRewardDeleteArgs>(args: Prisma.SelectSubset<T, TournamentRewardDeleteArgs<ExtArgs>>): Prisma.Prisma__TournamentRewardClient<runtime.Types.Result.GetResult<Prisma.$TournamentRewardPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one TournamentReward.
   * @param {TournamentRewardUpdateArgs} args - Arguments to update one TournamentReward.
   * @example
   * // Update one TournamentReward
   * const tournamentReward = await prisma.tournamentReward.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TournamentRewardUpdateArgs>(args: Prisma.SelectSubset<T, TournamentRewardUpdateArgs<ExtArgs>>): Prisma.Prisma__TournamentRewardClient<runtime.Types.Result.GetResult<Prisma.$TournamentRewardPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more TournamentRewards.
   * @param {TournamentRewardDeleteManyArgs} args - Arguments to filter TournamentRewards to delete.
   * @example
   * // Delete a few TournamentRewards
   * const { count } = await prisma.tournamentReward.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TournamentRewardDeleteManyArgs>(args?: Prisma.SelectSubset<T, TournamentRewardDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TournamentRewards.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TournamentRewardUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TournamentRewards
   * const tournamentReward = await prisma.tournamentReward.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TournamentRewardUpdateManyArgs>(args: Prisma.SelectSubset<T, TournamentRewardUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TournamentRewards and returns the data updated in the database.
   * @param {TournamentRewardUpdateManyAndReturnArgs} args - Arguments to update many TournamentRewards.
   * @example
   * // Update many TournamentRewards
   * const tournamentReward = await prisma.tournamentReward.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more TournamentRewards and only return the `id`
   * const tournamentRewardWithIdOnly = await prisma.tournamentReward.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TournamentRewardUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TournamentRewardUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TournamentRewardPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one TournamentReward.
   * @param {TournamentRewardUpsertArgs} args - Arguments to update or create a TournamentReward.
   * @example
   * // Update or create a TournamentReward
   * const tournamentReward = await prisma.tournamentReward.upsert({
   *   create: {
   *     // ... data to create a TournamentReward
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TournamentReward we want to update
   *   }
   * })
   */
  upsert<T extends TournamentRewardUpsertArgs>(args: Prisma.SelectSubset<T, TournamentRewardUpsertArgs<ExtArgs>>): Prisma.Prisma__TournamentRewardClient<runtime.Types.Result.GetResult<Prisma.$TournamentRewardPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of TournamentRewards.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TournamentRewardCountArgs} args - Arguments to filter TournamentRewards to count.
   * @example
   * // Count the number of TournamentRewards
   * const count = await prisma.tournamentReward.count({
   *   where: {
   *     // ... the filter for the TournamentRewards we want to count
   *   }
   * })
  **/
  count<T extends TournamentRewardCountArgs>(
    args?: Prisma.Subset<T, TournamentRewardCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TournamentRewardCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a TournamentReward.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TournamentRewardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TournamentRewardAggregateArgs>(args: Prisma.Subset<T, TournamentRewardAggregateArgs>): Prisma.PrismaPromise<GetTournamentRewardAggregateType<T>>

  /**
   * Group by TournamentReward.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TournamentRewardGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TournamentRewardGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TournamentRewardGroupByArgs['orderBy'] }
      : { orderBy?: TournamentRewardGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TournamentRewardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTournamentRewardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the TournamentReward model
 */
readonly fields: TournamentRewardFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TournamentReward.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TournamentRewardClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  tournament<T extends Prisma.TournamentDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TournamentDefaultArgs<ExtArgs>>): Prisma.Prisma__TournamentClient<runtime.Types.Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  winner<T extends Prisma.TournamentReward$winnerArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TournamentReward$winnerArgs<ExtArgs>>): Prisma.Prisma__UserProfileClient<runtime.Types.Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the TournamentReward model
 */
export interface TournamentRewardFieldRefs {
  readonly id: Prisma.FieldRef<"TournamentReward", 'String'>
  readonly tournamentId: Prisma.FieldRef<"TournamentReward", 'String'>
  readonly rank: Prisma.FieldRef<"TournamentReward", 'Int'>
  readonly description: Prisma.FieldRef<"TournamentReward", 'String'>
  readonly isClaimed: Prisma.FieldRef<"TournamentReward", 'Boolean'>
  readonly winnerId: Prisma.FieldRef<"TournamentReward", 'String'>
}
    

// Custom InputTypes
/**
 * TournamentReward findUnique
 */
export type TournamentRewardFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentReward
   */
  select?: Prisma.TournamentRewardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TournamentReward
   */
  omit?: Prisma.TournamentRewardOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentRewardInclude<ExtArgs> | null
  /**
   * Filter, which TournamentReward to fetch.
   */
  where: Prisma.TournamentRewardWhereUniqueInput
}

/**
 * TournamentReward findUniqueOrThrow
 */
export type TournamentRewardFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentReward
   */
  select?: Prisma.TournamentRewardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TournamentReward
   */
  omit?: Prisma.TournamentRewardOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentRewardInclude<ExtArgs> | null
  /**
   * Filter, which TournamentReward to fetch.
   */
  where: Prisma.TournamentRewardWhereUniqueInput
}

/**
 * TournamentReward findFirst
 */
export type TournamentRewardFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentReward
   */
  select?: Prisma.TournamentRewardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TournamentReward
   */
  omit?: Prisma.TournamentRewardOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentRewardInclude<ExtArgs> | null
  /**
   * Filter, which TournamentReward to fetch.
   */
  where?: Prisma.TournamentRewardWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TournamentRewards to fetch.
   */
  orderBy?: Prisma.TournamentRewardOrderByWithRelationInput | Prisma.TournamentRewardOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TournamentRewards.
   */
  cursor?: Prisma.TournamentRewardWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TournamentRewards from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TournamentRewards.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TournamentRewards.
   */
  distinct?: Prisma.TournamentRewardScalarFieldEnum | Prisma.TournamentRewardScalarFieldEnum[]
}

/**
 * TournamentReward findFirstOrThrow
 */
export type TournamentRewardFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentReward
   */
  select?: Prisma.TournamentRewardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TournamentReward
   */
  omit?: Prisma.TournamentRewardOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentRewardInclude<ExtArgs> | null
  /**
   * Filter, which TournamentReward to fetch.
   */
  where?: Prisma.TournamentRewardWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TournamentRewards to fetch.
   */
  orderBy?: Prisma.TournamentRewardOrderByWithRelationInput | Prisma.TournamentRewardOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TournamentRewards.
   */
  cursor?: Prisma.TournamentRewardWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TournamentRewards from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TournamentRewards.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TournamentRewards.
   */
  distinct?: Prisma.TournamentRewardScalarFieldEnum | Prisma.TournamentRewardScalarFieldEnum[]
}

/**
 * TournamentReward findMany
 */
export type TournamentRewardFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentReward
   */
  select?: Prisma.TournamentRewardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TournamentReward
   */
  omit?: Prisma.TournamentRewardOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentRewardInclude<ExtArgs> | null
  /**
   * Filter, which TournamentRewards to fetch.
   */
  where?: Prisma.TournamentRewardWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TournamentRewards to fetch.
   */
  orderBy?: Prisma.TournamentRewardOrderByWithRelationInput | Prisma.TournamentRewardOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing TournamentRewards.
   */
  cursor?: Prisma.TournamentRewardWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TournamentRewards from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TournamentRewards.
   */
  skip?: number
  distinct?: Prisma.TournamentRewardScalarFieldEnum | Prisma.TournamentRewardScalarFieldEnum[]
}

/**
 * TournamentReward create
 */
export type TournamentRewardCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentReward
   */
  select?: Prisma.TournamentRewardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TournamentReward
   */
  omit?: Prisma.TournamentRewardOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentRewardInclude<ExtArgs> | null
  /**
   * The data needed to create a TournamentReward.
   */
  data: Prisma.XOR<Prisma.TournamentRewardCreateInput, Prisma.TournamentRewardUncheckedCreateInput>
}

/**
 * TournamentReward createMany
 */
export type TournamentRewardCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many TournamentRewards.
   */
  data: Prisma.TournamentRewardCreateManyInput | Prisma.TournamentRewardCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * TournamentReward createManyAndReturn
 */
export type TournamentRewardCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentReward
   */
  select?: Prisma.TournamentRewardSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TournamentReward
   */
  omit?: Prisma.TournamentRewardOmit<ExtArgs> | null
  /**
   * The data used to create many TournamentRewards.
   */
  data: Prisma.TournamentRewardCreateManyInput | Prisma.TournamentRewardCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentRewardIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * TournamentReward update
 */
export type TournamentRewardUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentReward
   */
  select?: Prisma.TournamentRewardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TournamentReward
   */
  omit?: Prisma.TournamentRewardOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentRewardInclude<ExtArgs> | null
  /**
   * The data needed to update a TournamentReward.
   */
  data: Prisma.XOR<Prisma.TournamentRewardUpdateInput, Prisma.TournamentRewardUncheckedUpdateInput>
  /**
   * Choose, which TournamentReward to update.
   */
  where: Prisma.TournamentRewardWhereUniqueInput
}

/**
 * TournamentReward updateMany
 */
export type TournamentRewardUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update TournamentRewards.
   */
  data: Prisma.XOR<Prisma.TournamentRewardUpdateManyMutationInput, Prisma.TournamentRewardUncheckedUpdateManyInput>
  /**
   * Filter which TournamentRewards to update
   */
  where?: Prisma.TournamentRewardWhereInput
  /**
   * Limit how many TournamentRewards to update.
   */
  limit?: number
}

/**
 * TournamentReward updateManyAndReturn
 */
export type TournamentRewardUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentReward
   */
  select?: Prisma.TournamentRewardSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TournamentReward
   */
  omit?: Prisma.TournamentRewardOmit<ExtArgs> | null
  /**
   * The data used to update TournamentRewards.
   */
  data: Prisma.XOR<Prisma.TournamentRewardUpdateManyMutationInput, Prisma.TournamentRewardUncheckedUpdateManyInput>
  /**
   * Filter which TournamentRewards to update
   */
  where?: Prisma.TournamentRewardWhereInput
  /**
   * Limit how many TournamentRewards to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentRewardIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * TournamentReward upsert
 */
export type TournamentRewardUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentReward
   */
  select?: Prisma.TournamentRewardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TournamentReward
   */
  omit?: Prisma.TournamentRewardOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentRewardInclude<ExtArgs> | null
  /**
   * The filter to search for the TournamentReward to update in case it exists.
   */
  where: Prisma.TournamentRewardWhereUniqueInput
  /**
   * In case the TournamentReward found by the `where` argument doesn't exist, create a new TournamentReward with this data.
   */
  create: Prisma.XOR<Prisma.TournamentRewardCreateInput, Prisma.TournamentRewardUncheckedCreateInput>
  /**
   * In case the TournamentReward was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TournamentRewardUpdateInput, Prisma.TournamentRewardUncheckedUpdateInput>
}

/**
 * TournamentReward delete
 */
export type TournamentRewardDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentReward
   */
  select?: Prisma.TournamentRewardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TournamentReward
   */
  omit?: Prisma.TournamentRewardOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentRewardInclude<ExtArgs> | null
  /**
   * Filter which TournamentReward to delete.
   */
  where: Prisma.TournamentRewardWhereUniqueInput
}

/**
 * TournamentReward deleteMany
 */
export type TournamentRewardDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TournamentRewards to delete
   */
  where?: Prisma.TournamentRewardWhereInput
  /**
   * Limit how many TournamentRewards to delete.
   */
  limit?: number
}

/**
 * TournamentReward.winner
 */
export type TournamentReward$winnerArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserProfile
   */
  select?: Prisma.UserProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserProfile
   */
  omit?: Prisma.UserProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserProfileInclude<ExtArgs> | null
  where?: Prisma.UserProfileWhereInput
}

/**
 * TournamentReward without action
 */
export type TournamentRewardDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentReward
   */
  select?: Prisma.TournamentRewardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TournamentReward
   */
  omit?: Prisma.TournamentRewardOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentRewardInclude<ExtArgs> | null
}
