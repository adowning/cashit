
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Wallet` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Wallet
 * 
 */
export type WalletModel = runtime.Types.Result.DefaultSelection<Prisma.$WalletPayload>

export type AggregateWallet = {
  _count: WalletCountAggregateOutputType | null
  _avg: WalletAvgAggregateOutputType | null
  _sum: WalletSumAggregateOutputType | null
  _min: WalletMinAggregateOutputType | null
  _max: WalletMaxAggregateOutputType | null
}

export type WalletAvgAggregateOutputType = {
  balance: number | null
  bonusBalance: number | null
  lockedBalance: number | null
}

export type WalletSumAggregateOutputType = {
  balance: number | null
  bonusBalance: number | null
  lockedBalance: number | null
}

export type WalletMinAggregateOutputType = {
  id: string | null
  balance: number | null
  isActive: boolean | null
  address: string | null
  createdAt: Date | null
  updatedAt: Date | null
  userId: string | null
  operatorId: string | null
  paymentMethod: $Enums.PaymentMethod | null
  bonusBalance: number | null
  lockedBalance: number | null
  cashtag: string | null
}

export type WalletMaxAggregateOutputType = {
  id: string | null
  balance: number | null
  isActive: boolean | null
  address: string | null
  createdAt: Date | null
  updatedAt: Date | null
  userId: string | null
  operatorId: string | null
  paymentMethod: $Enums.PaymentMethod | null
  bonusBalance: number | null
  lockedBalance: number | null
  cashtag: string | null
}

export type WalletCountAggregateOutputType = {
  id: number
  balance: number
  isActive: number
  address: number
  createdAt: number
  updatedAt: number
  userId: number
  operatorId: number
  paymentMethod: number
  bonusBalance: number
  lockedBalance: number
  cashtag: number
  _all: number
}


export type WalletAvgAggregateInputType = {
  balance?: true
  bonusBalance?: true
  lockedBalance?: true
}

export type WalletSumAggregateInputType = {
  balance?: true
  bonusBalance?: true
  lockedBalance?: true
}

export type WalletMinAggregateInputType = {
  id?: true
  balance?: true
  isActive?: true
  address?: true
  createdAt?: true
  updatedAt?: true
  userId?: true
  operatorId?: true
  paymentMethod?: true
  bonusBalance?: true
  lockedBalance?: true
  cashtag?: true
}

export type WalletMaxAggregateInputType = {
  id?: true
  balance?: true
  isActive?: true
  address?: true
  createdAt?: true
  updatedAt?: true
  userId?: true
  operatorId?: true
  paymentMethod?: true
  bonusBalance?: true
  lockedBalance?: true
  cashtag?: true
}

export type WalletCountAggregateInputType = {
  id?: true
  balance?: true
  isActive?: true
  address?: true
  createdAt?: true
  updatedAt?: true
  userId?: true
  operatorId?: true
  paymentMethod?: true
  bonusBalance?: true
  lockedBalance?: true
  cashtag?: true
  _all?: true
}

export type WalletAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Wallet to aggregate.
   */
  where?: Prisma.WalletWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Wallets to fetch.
   */
  orderBy?: Prisma.WalletOrderByWithRelationInput | Prisma.WalletOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.WalletWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Wallets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Wallets.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Wallets
  **/
  _count?: true | WalletCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: WalletAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: WalletSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: WalletMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: WalletMaxAggregateInputType
}

export type GetWalletAggregateType<T extends WalletAggregateArgs> = {
      [P in keyof T & keyof AggregateWallet]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateWallet[P]>
    : Prisma.GetScalarType<T[P], AggregateWallet[P]>
}




export type WalletGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.WalletWhereInput
  orderBy?: Prisma.WalletOrderByWithAggregationInput | Prisma.WalletOrderByWithAggregationInput[]
  by: Prisma.WalletScalarFieldEnum[] | Prisma.WalletScalarFieldEnum
  having?: Prisma.WalletScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: WalletCountAggregateInputType | true
  _avg?: WalletAvgAggregateInputType
  _sum?: WalletSumAggregateInputType
  _min?: WalletMinAggregateInputType
  _max?: WalletMaxAggregateInputType
}

export type WalletGroupByOutputType = {
  id: string
  balance: number
  isActive: boolean
  address: string | null
  createdAt: Date
  updatedAt: Date
  userId: string
  operatorId: string
  paymentMethod: $Enums.PaymentMethod
  bonusBalance: number
  lockedBalance: number
  cashtag: string | null
  _count: WalletCountAggregateOutputType | null
  _avg: WalletAvgAggregateOutputType | null
  _sum: WalletSumAggregateOutputType | null
  _min: WalletMinAggregateOutputType | null
  _max: WalletMaxAggregateOutputType | null
}

type GetWalletGroupByPayload<T extends WalletGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<WalletGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof WalletGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], WalletGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], WalletGroupByOutputType[P]>
      }
    >
  > 



export type WalletWhereInput = {
  AND?: Prisma.WalletWhereInput | Prisma.WalletWhereInput[]
  OR?: Prisma.WalletWhereInput[]
  NOT?: Prisma.WalletWhereInput | Prisma.WalletWhereInput[]
  id?: Prisma.StringFilter<"Wallet"> | string
  balance?: Prisma.FloatFilter<"Wallet"> | number
  isActive?: Prisma.BoolFilter<"Wallet"> | boolean
  address?: Prisma.StringNullableFilter<"Wallet"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Wallet"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Wallet"> | Date | string
  userId?: Prisma.StringFilter<"Wallet"> | string
  operatorId?: Prisma.StringFilter<"Wallet"> | string
  paymentMethod?: Prisma.EnumPaymentMethodFilter<"Wallet"> | $Enums.PaymentMethod
  bonusBalance?: Prisma.IntFilter<"Wallet"> | number
  lockedBalance?: Prisma.IntFilter<"Wallet"> | number
  cashtag?: Prisma.StringNullableFilter<"Wallet"> | string | null
  transactions?: Prisma.TransactionListRelationFilter
  operator?: Prisma.XOR<Prisma.OperatorScalarRelationFilter, Prisma.OperatorWhereInput>
  user?: Prisma.XOR<Prisma.UserProfileScalarRelationFilter, Prisma.UserProfileWhereInput>
}

export type WalletOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  balance?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  address?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  operatorId?: Prisma.SortOrder
  paymentMethod?: Prisma.SortOrder
  bonusBalance?: Prisma.SortOrder
  lockedBalance?: Prisma.SortOrder
  cashtag?: Prisma.SortOrderInput | Prisma.SortOrder
  transactions?: Prisma.TransactionOrderByRelationAggregateInput
  operator?: Prisma.OperatorOrderByWithRelationInput
  user?: Prisma.UserProfileOrderByWithRelationInput
}

export type WalletWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  address?: string
  cashtag?: string
  userOperator?: Prisma.WalletUserOperatorCompoundUniqueInput
  AND?: Prisma.WalletWhereInput | Prisma.WalletWhereInput[]
  OR?: Prisma.WalletWhereInput[]
  NOT?: Prisma.WalletWhereInput | Prisma.WalletWhereInput[]
  balance?: Prisma.FloatFilter<"Wallet"> | number
  isActive?: Prisma.BoolFilter<"Wallet"> | boolean
  createdAt?: Prisma.DateTimeFilter<"Wallet"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Wallet"> | Date | string
  userId?: Prisma.StringFilter<"Wallet"> | string
  operatorId?: Prisma.StringFilter<"Wallet"> | string
  paymentMethod?: Prisma.EnumPaymentMethodFilter<"Wallet"> | $Enums.PaymentMethod
  bonusBalance?: Prisma.IntFilter<"Wallet"> | number
  lockedBalance?: Prisma.IntFilter<"Wallet"> | number
  transactions?: Prisma.TransactionListRelationFilter
  operator?: Prisma.XOR<Prisma.OperatorScalarRelationFilter, Prisma.OperatorWhereInput>
  user?: Prisma.XOR<Prisma.UserProfileScalarRelationFilter, Prisma.UserProfileWhereInput>
}, "id" | "address" | "cashtag" | "userOperator">

export type WalletOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  balance?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  address?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  operatorId?: Prisma.SortOrder
  paymentMethod?: Prisma.SortOrder
  bonusBalance?: Prisma.SortOrder
  lockedBalance?: Prisma.SortOrder
  cashtag?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.WalletCountOrderByAggregateInput
  _avg?: Prisma.WalletAvgOrderByAggregateInput
  _max?: Prisma.WalletMaxOrderByAggregateInput
  _min?: Prisma.WalletMinOrderByAggregateInput
  _sum?: Prisma.WalletSumOrderByAggregateInput
}

export type WalletScalarWhereWithAggregatesInput = {
  AND?: Prisma.WalletScalarWhereWithAggregatesInput | Prisma.WalletScalarWhereWithAggregatesInput[]
  OR?: Prisma.WalletScalarWhereWithAggregatesInput[]
  NOT?: Prisma.WalletScalarWhereWithAggregatesInput | Prisma.WalletScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Wallet"> | string
  balance?: Prisma.FloatWithAggregatesFilter<"Wallet"> | number
  isActive?: Prisma.BoolWithAggregatesFilter<"Wallet"> | boolean
  address?: Prisma.StringNullableWithAggregatesFilter<"Wallet"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Wallet"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Wallet"> | Date | string
  userId?: Prisma.StringWithAggregatesFilter<"Wallet"> | string
  operatorId?: Prisma.StringWithAggregatesFilter<"Wallet"> | string
  paymentMethod?: Prisma.EnumPaymentMethodWithAggregatesFilter<"Wallet"> | $Enums.PaymentMethod
  bonusBalance?: Prisma.IntWithAggregatesFilter<"Wallet"> | number
  lockedBalance?: Prisma.IntWithAggregatesFilter<"Wallet"> | number
  cashtag?: Prisma.StringNullableWithAggregatesFilter<"Wallet"> | string | null
}

export type WalletCreateInput = {
  id?: string
  balance?: number
  isActive?: boolean
  address?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  paymentMethod: $Enums.PaymentMethod
  bonusBalance?: number
  lockedBalance?: number
  cashtag?: string | null
  transactions?: Prisma.TransactionCreateNestedManyWithoutWalletInput
  operator: Prisma.OperatorCreateNestedOneWithoutWalletsInput
  user: Prisma.UserProfileCreateNestedOneWithoutWalletsInput
}

export type WalletUncheckedCreateInput = {
  id?: string
  balance?: number
  isActive?: boolean
  address?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  userId: string
  operatorId: string
  paymentMethod: $Enums.PaymentMethod
  bonusBalance?: number
  lockedBalance?: number
  cashtag?: string | null
  transactions?: Prisma.TransactionUncheckedCreateNestedManyWithoutWalletInput
}

export type WalletUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  balance?: Prisma.FloatFieldUpdateOperationsInput | number
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  paymentMethod?: Prisma.EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
  bonusBalance?: Prisma.IntFieldUpdateOperationsInput | number
  lockedBalance?: Prisma.IntFieldUpdateOperationsInput | number
  cashtag?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  transactions?: Prisma.TransactionUpdateManyWithoutWalletNestedInput
  operator?: Prisma.OperatorUpdateOneRequiredWithoutWalletsNestedInput
  user?: Prisma.UserProfileUpdateOneRequiredWithoutWalletsNestedInput
}

export type WalletUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  balance?: Prisma.FloatFieldUpdateOperationsInput | number
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  operatorId?: Prisma.StringFieldUpdateOperationsInput | string
  paymentMethod?: Prisma.EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
  bonusBalance?: Prisma.IntFieldUpdateOperationsInput | number
  lockedBalance?: Prisma.IntFieldUpdateOperationsInput | number
  cashtag?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  transactions?: Prisma.TransactionUncheckedUpdateManyWithoutWalletNestedInput
}

export type WalletCreateManyInput = {
  id?: string
  balance?: number
  isActive?: boolean
  address?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  userId: string
  operatorId: string
  paymentMethod: $Enums.PaymentMethod
  bonusBalance?: number
  lockedBalance?: number
  cashtag?: string | null
}

export type WalletUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  balance?: Prisma.FloatFieldUpdateOperationsInput | number
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  paymentMethod?: Prisma.EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
  bonusBalance?: Prisma.IntFieldUpdateOperationsInput | number
  lockedBalance?: Prisma.IntFieldUpdateOperationsInput | number
  cashtag?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type WalletUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  balance?: Prisma.FloatFieldUpdateOperationsInput | number
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  operatorId?: Prisma.StringFieldUpdateOperationsInput | string
  paymentMethod?: Prisma.EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
  bonusBalance?: Prisma.IntFieldUpdateOperationsInput | number
  lockedBalance?: Prisma.IntFieldUpdateOperationsInput | number
  cashtag?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type WalletListRelationFilter = {
  every?: Prisma.WalletWhereInput
  some?: Prisma.WalletWhereInput
  none?: Prisma.WalletWhereInput
}

export type WalletOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type WalletNullableScalarRelationFilter = {
  is?: Prisma.WalletWhereInput | null
  isNot?: Prisma.WalletWhereInput | null
}

export type WalletUserOperatorCompoundUniqueInput = {
  userId: string
  operatorId: string
}

export type WalletCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  balance?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  address?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  operatorId?: Prisma.SortOrder
  paymentMethod?: Prisma.SortOrder
  bonusBalance?: Prisma.SortOrder
  lockedBalance?: Prisma.SortOrder
  cashtag?: Prisma.SortOrder
}

export type WalletAvgOrderByAggregateInput = {
  balance?: Prisma.SortOrder
  bonusBalance?: Prisma.SortOrder
  lockedBalance?: Prisma.SortOrder
}

export type WalletMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  balance?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  address?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  operatorId?: Prisma.SortOrder
  paymentMethod?: Prisma.SortOrder
  bonusBalance?: Prisma.SortOrder
  lockedBalance?: Prisma.SortOrder
  cashtag?: Prisma.SortOrder
}

export type WalletMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  balance?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  address?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  operatorId?: Prisma.SortOrder
  paymentMethod?: Prisma.SortOrder
  bonusBalance?: Prisma.SortOrder
  lockedBalance?: Prisma.SortOrder
  cashtag?: Prisma.SortOrder
}

export type WalletSumOrderByAggregateInput = {
  balance?: Prisma.SortOrder
  bonusBalance?: Prisma.SortOrder
  lockedBalance?: Prisma.SortOrder
}

export type WalletCreateNestedManyWithoutOperatorInput = {
  create?: Prisma.XOR<Prisma.WalletCreateWithoutOperatorInput, Prisma.WalletUncheckedCreateWithoutOperatorInput> | Prisma.WalletCreateWithoutOperatorInput[] | Prisma.WalletUncheckedCreateWithoutOperatorInput[]
  connectOrCreate?: Prisma.WalletCreateOrConnectWithoutOperatorInput | Prisma.WalletCreateOrConnectWithoutOperatorInput[]
  createMany?: Prisma.WalletCreateManyOperatorInputEnvelope
  connect?: Prisma.WalletWhereUniqueInput | Prisma.WalletWhereUniqueInput[]
}

export type WalletUncheckedCreateNestedManyWithoutOperatorInput = {
  create?: Prisma.XOR<Prisma.WalletCreateWithoutOperatorInput, Prisma.WalletUncheckedCreateWithoutOperatorInput> | Prisma.WalletCreateWithoutOperatorInput[] | Prisma.WalletUncheckedCreateWithoutOperatorInput[]
  connectOrCreate?: Prisma.WalletCreateOrConnectWithoutOperatorInput | Prisma.WalletCreateOrConnectWithoutOperatorInput[]
  createMany?: Prisma.WalletCreateManyOperatorInputEnvelope
  connect?: Prisma.WalletWhereUniqueInput | Prisma.WalletWhereUniqueInput[]
}

export type WalletUpdateManyWithoutOperatorNestedInput = {
  create?: Prisma.XOR<Prisma.WalletCreateWithoutOperatorInput, Prisma.WalletUncheckedCreateWithoutOperatorInput> | Prisma.WalletCreateWithoutOperatorInput[] | Prisma.WalletUncheckedCreateWithoutOperatorInput[]
  connectOrCreate?: Prisma.WalletCreateOrConnectWithoutOperatorInput | Prisma.WalletCreateOrConnectWithoutOperatorInput[]
  upsert?: Prisma.WalletUpsertWithWhereUniqueWithoutOperatorInput | Prisma.WalletUpsertWithWhereUniqueWithoutOperatorInput[]
  createMany?: Prisma.WalletCreateManyOperatorInputEnvelope
  set?: Prisma.WalletWhereUniqueInput | Prisma.WalletWhereUniqueInput[]
  disconnect?: Prisma.WalletWhereUniqueInput | Prisma.WalletWhereUniqueInput[]
  delete?: Prisma.WalletWhereUniqueInput | Prisma.WalletWhereUniqueInput[]
  connect?: Prisma.WalletWhereUniqueInput | Prisma.WalletWhereUniqueInput[]
  update?: Prisma.WalletUpdateWithWhereUniqueWithoutOperatorInput | Prisma.WalletUpdateWithWhereUniqueWithoutOperatorInput[]
  updateMany?: Prisma.WalletUpdateManyWithWhereWithoutOperatorInput | Prisma.WalletUpdateManyWithWhereWithoutOperatorInput[]
  deleteMany?: Prisma.WalletScalarWhereInput | Prisma.WalletScalarWhereInput[]
}

export type WalletUncheckedUpdateManyWithoutOperatorNestedInput = {
  create?: Prisma.XOR<Prisma.WalletCreateWithoutOperatorInput, Prisma.WalletUncheckedCreateWithoutOperatorInput> | Prisma.WalletCreateWithoutOperatorInput[] | Prisma.WalletUncheckedCreateWithoutOperatorInput[]
  connectOrCreate?: Prisma.WalletCreateOrConnectWithoutOperatorInput | Prisma.WalletCreateOrConnectWithoutOperatorInput[]
  upsert?: Prisma.WalletUpsertWithWhereUniqueWithoutOperatorInput | Prisma.WalletUpsertWithWhereUniqueWithoutOperatorInput[]
  createMany?: Prisma.WalletCreateManyOperatorInputEnvelope
  set?: Prisma.WalletWhereUniqueInput | Prisma.WalletWhereUniqueInput[]
  disconnect?: Prisma.WalletWhereUniqueInput | Prisma.WalletWhereUniqueInput[]
  delete?: Prisma.WalletWhereUniqueInput | Prisma.WalletWhereUniqueInput[]
  connect?: Prisma.WalletWhereUniqueInput | Prisma.WalletWhereUniqueInput[]
  update?: Prisma.WalletUpdateWithWhereUniqueWithoutOperatorInput | Prisma.WalletUpdateWithWhereUniqueWithoutOperatorInput[]
  updateMany?: Prisma.WalletUpdateManyWithWhereWithoutOperatorInput | Prisma.WalletUpdateManyWithWhereWithoutOperatorInput[]
  deleteMany?: Prisma.WalletScalarWhereInput | Prisma.WalletScalarWhereInput[]
}

export type WalletCreateNestedOneWithoutTransactionsInput = {
  create?: Prisma.XOR<Prisma.WalletCreateWithoutTransactionsInput, Prisma.WalletUncheckedCreateWithoutTransactionsInput>
  connectOrCreate?: Prisma.WalletCreateOrConnectWithoutTransactionsInput
  connect?: Prisma.WalletWhereUniqueInput
}

export type WalletUpdateOneWithoutTransactionsNestedInput = {
  create?: Prisma.XOR<Prisma.WalletCreateWithoutTransactionsInput, Prisma.WalletUncheckedCreateWithoutTransactionsInput>
  connectOrCreate?: Prisma.WalletCreateOrConnectWithoutTransactionsInput
  upsert?: Prisma.WalletUpsertWithoutTransactionsInput
  disconnect?: Prisma.WalletWhereInput | boolean
  delete?: Prisma.WalletWhereInput | boolean
  connect?: Prisma.WalletWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.WalletUpdateToOneWithWhereWithoutTransactionsInput, Prisma.WalletUpdateWithoutTransactionsInput>, Prisma.WalletUncheckedUpdateWithoutTransactionsInput>
}

export type EnumPaymentMethodFieldUpdateOperationsInput = {
  set?: $Enums.PaymentMethod
}

export type WalletCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.WalletCreateWithoutUserInput, Prisma.WalletUncheckedCreateWithoutUserInput> | Prisma.WalletCreateWithoutUserInput[] | Prisma.WalletUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.WalletCreateOrConnectWithoutUserInput | Prisma.WalletCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.WalletCreateManyUserInputEnvelope
  connect?: Prisma.WalletWhereUniqueInput | Prisma.WalletWhereUniqueInput[]
}

export type WalletUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.WalletCreateWithoutUserInput, Prisma.WalletUncheckedCreateWithoutUserInput> | Prisma.WalletCreateWithoutUserInput[] | Prisma.WalletUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.WalletCreateOrConnectWithoutUserInput | Prisma.WalletCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.WalletCreateManyUserInputEnvelope
  connect?: Prisma.WalletWhereUniqueInput | Prisma.WalletWhereUniqueInput[]
}

export type WalletUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.WalletCreateWithoutUserInput, Prisma.WalletUncheckedCreateWithoutUserInput> | Prisma.WalletCreateWithoutUserInput[] | Prisma.WalletUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.WalletCreateOrConnectWithoutUserInput | Prisma.WalletCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.WalletUpsertWithWhereUniqueWithoutUserInput | Prisma.WalletUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.WalletCreateManyUserInputEnvelope
  set?: Prisma.WalletWhereUniqueInput | Prisma.WalletWhereUniqueInput[]
  disconnect?: Prisma.WalletWhereUniqueInput | Prisma.WalletWhereUniqueInput[]
  delete?: Prisma.WalletWhereUniqueInput | Prisma.WalletWhereUniqueInput[]
  connect?: Prisma.WalletWhereUniqueInput | Prisma.WalletWhereUniqueInput[]
  update?: Prisma.WalletUpdateWithWhereUniqueWithoutUserInput | Prisma.WalletUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.WalletUpdateManyWithWhereWithoutUserInput | Prisma.WalletUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.WalletScalarWhereInput | Prisma.WalletScalarWhereInput[]
}

export type WalletUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.WalletCreateWithoutUserInput, Prisma.WalletUncheckedCreateWithoutUserInput> | Prisma.WalletCreateWithoutUserInput[] | Prisma.WalletUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.WalletCreateOrConnectWithoutUserInput | Prisma.WalletCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.WalletUpsertWithWhereUniqueWithoutUserInput | Prisma.WalletUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.WalletCreateManyUserInputEnvelope
  set?: Prisma.WalletWhereUniqueInput | Prisma.WalletWhereUniqueInput[]
  disconnect?: Prisma.WalletWhereUniqueInput | Prisma.WalletWhereUniqueInput[]
  delete?: Prisma.WalletWhereUniqueInput | Prisma.WalletWhereUniqueInput[]
  connect?: Prisma.WalletWhereUniqueInput | Prisma.WalletWhereUniqueInput[]
  update?: Prisma.WalletUpdateWithWhereUniqueWithoutUserInput | Prisma.WalletUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.WalletUpdateManyWithWhereWithoutUserInput | Prisma.WalletUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.WalletScalarWhereInput | Prisma.WalletScalarWhereInput[]
}

export type WalletCreateWithoutOperatorInput = {
  id?: string
  balance?: number
  isActive?: boolean
  address?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  paymentMethod: $Enums.PaymentMethod
  bonusBalance?: number
  lockedBalance?: number
  cashtag?: string | null
  transactions?: Prisma.TransactionCreateNestedManyWithoutWalletInput
  user: Prisma.UserProfileCreateNestedOneWithoutWalletsInput
}

export type WalletUncheckedCreateWithoutOperatorInput = {
  id?: string
  balance?: number
  isActive?: boolean
  address?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  userId: string
  paymentMethod: $Enums.PaymentMethod
  bonusBalance?: number
  lockedBalance?: number
  cashtag?: string | null
  transactions?: Prisma.TransactionUncheckedCreateNestedManyWithoutWalletInput
}

export type WalletCreateOrConnectWithoutOperatorInput = {
  where: Prisma.WalletWhereUniqueInput
  create: Prisma.XOR<Prisma.WalletCreateWithoutOperatorInput, Prisma.WalletUncheckedCreateWithoutOperatorInput>
}

export type WalletCreateManyOperatorInputEnvelope = {
  data: Prisma.WalletCreateManyOperatorInput | Prisma.WalletCreateManyOperatorInput[]
  skipDuplicates?: boolean
}

export type WalletUpsertWithWhereUniqueWithoutOperatorInput = {
  where: Prisma.WalletWhereUniqueInput
  update: Prisma.XOR<Prisma.WalletUpdateWithoutOperatorInput, Prisma.WalletUncheckedUpdateWithoutOperatorInput>
  create: Prisma.XOR<Prisma.WalletCreateWithoutOperatorInput, Prisma.WalletUncheckedCreateWithoutOperatorInput>
}

export type WalletUpdateWithWhereUniqueWithoutOperatorInput = {
  where: Prisma.WalletWhereUniqueInput
  data: Prisma.XOR<Prisma.WalletUpdateWithoutOperatorInput, Prisma.WalletUncheckedUpdateWithoutOperatorInput>
}

export type WalletUpdateManyWithWhereWithoutOperatorInput = {
  where: Prisma.WalletScalarWhereInput
  data: Prisma.XOR<Prisma.WalletUpdateManyMutationInput, Prisma.WalletUncheckedUpdateManyWithoutOperatorInput>
}

export type WalletScalarWhereInput = {
  AND?: Prisma.WalletScalarWhereInput | Prisma.WalletScalarWhereInput[]
  OR?: Prisma.WalletScalarWhereInput[]
  NOT?: Prisma.WalletScalarWhereInput | Prisma.WalletScalarWhereInput[]
  id?: Prisma.StringFilter<"Wallet"> | string
  balance?: Prisma.FloatFilter<"Wallet"> | number
  isActive?: Prisma.BoolFilter<"Wallet"> | boolean
  address?: Prisma.StringNullableFilter<"Wallet"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Wallet"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Wallet"> | Date | string
  userId?: Prisma.StringFilter<"Wallet"> | string
  operatorId?: Prisma.StringFilter<"Wallet"> | string
  paymentMethod?: Prisma.EnumPaymentMethodFilter<"Wallet"> | $Enums.PaymentMethod
  bonusBalance?: Prisma.IntFilter<"Wallet"> | number
  lockedBalance?: Prisma.IntFilter<"Wallet"> | number
  cashtag?: Prisma.StringNullableFilter<"Wallet"> | string | null
}

export type WalletCreateWithoutTransactionsInput = {
  id?: string
  balance?: number
  isActive?: boolean
  address?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  paymentMethod: $Enums.PaymentMethod
  bonusBalance?: number
  lockedBalance?: number
  cashtag?: string | null
  operator: Prisma.OperatorCreateNestedOneWithoutWalletsInput
  user: Prisma.UserProfileCreateNestedOneWithoutWalletsInput
}

export type WalletUncheckedCreateWithoutTransactionsInput = {
  id?: string
  balance?: number
  isActive?: boolean
  address?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  userId: string
  operatorId: string
  paymentMethod: $Enums.PaymentMethod
  bonusBalance?: number
  lockedBalance?: number
  cashtag?: string | null
}

export type WalletCreateOrConnectWithoutTransactionsInput = {
  where: Prisma.WalletWhereUniqueInput
  create: Prisma.XOR<Prisma.WalletCreateWithoutTransactionsInput, Prisma.WalletUncheckedCreateWithoutTransactionsInput>
}

export type WalletUpsertWithoutTransactionsInput = {
  update: Prisma.XOR<Prisma.WalletUpdateWithoutTransactionsInput, Prisma.WalletUncheckedUpdateWithoutTransactionsInput>
  create: Prisma.XOR<Prisma.WalletCreateWithoutTransactionsInput, Prisma.WalletUncheckedCreateWithoutTransactionsInput>
  where?: Prisma.WalletWhereInput
}

export type WalletUpdateToOneWithWhereWithoutTransactionsInput = {
  where?: Prisma.WalletWhereInput
  data: Prisma.XOR<Prisma.WalletUpdateWithoutTransactionsInput, Prisma.WalletUncheckedUpdateWithoutTransactionsInput>
}

export type WalletUpdateWithoutTransactionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  balance?: Prisma.FloatFieldUpdateOperationsInput | number
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  paymentMethod?: Prisma.EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
  bonusBalance?: Prisma.IntFieldUpdateOperationsInput | number
  lockedBalance?: Prisma.IntFieldUpdateOperationsInput | number
  cashtag?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  operator?: Prisma.OperatorUpdateOneRequiredWithoutWalletsNestedInput
  user?: Prisma.UserProfileUpdateOneRequiredWithoutWalletsNestedInput
}

export type WalletUncheckedUpdateWithoutTransactionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  balance?: Prisma.FloatFieldUpdateOperationsInput | number
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  operatorId?: Prisma.StringFieldUpdateOperationsInput | string
  paymentMethod?: Prisma.EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
  bonusBalance?: Prisma.IntFieldUpdateOperationsInput | number
  lockedBalance?: Prisma.IntFieldUpdateOperationsInput | number
  cashtag?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type WalletCreateWithoutUserInput = {
  id?: string
  balance?: number
  isActive?: boolean
  address?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  paymentMethod: $Enums.PaymentMethod
  bonusBalance?: number
  lockedBalance?: number
  cashtag?: string | null
  transactions?: Prisma.TransactionCreateNestedManyWithoutWalletInput
  operator: Prisma.OperatorCreateNestedOneWithoutWalletsInput
}

export type WalletUncheckedCreateWithoutUserInput = {
  id?: string
  balance?: number
  isActive?: boolean
  address?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  operatorId: string
  paymentMethod: $Enums.PaymentMethod
  bonusBalance?: number
  lockedBalance?: number
  cashtag?: string | null
  transactions?: Prisma.TransactionUncheckedCreateNestedManyWithoutWalletInput
}

export type WalletCreateOrConnectWithoutUserInput = {
  where: Prisma.WalletWhereUniqueInput
  create: Prisma.XOR<Prisma.WalletCreateWithoutUserInput, Prisma.WalletUncheckedCreateWithoutUserInput>
}

export type WalletCreateManyUserInputEnvelope = {
  data: Prisma.WalletCreateManyUserInput | Prisma.WalletCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type WalletUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.WalletWhereUniqueInput
  update: Prisma.XOR<Prisma.WalletUpdateWithoutUserInput, Prisma.WalletUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.WalletCreateWithoutUserInput, Prisma.WalletUncheckedCreateWithoutUserInput>
}

export type WalletUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.WalletWhereUniqueInput
  data: Prisma.XOR<Prisma.WalletUpdateWithoutUserInput, Prisma.WalletUncheckedUpdateWithoutUserInput>
}

export type WalletUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.WalletScalarWhereInput
  data: Prisma.XOR<Prisma.WalletUpdateManyMutationInput, Prisma.WalletUncheckedUpdateManyWithoutUserInput>
}

export type WalletCreateManyOperatorInput = {
  id?: string
  balance?: number
  isActive?: boolean
  address?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  userId: string
  paymentMethod: $Enums.PaymentMethod
  bonusBalance?: number
  lockedBalance?: number
  cashtag?: string | null
}

export type WalletUpdateWithoutOperatorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  balance?: Prisma.FloatFieldUpdateOperationsInput | number
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  paymentMethod?: Prisma.EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
  bonusBalance?: Prisma.IntFieldUpdateOperationsInput | number
  lockedBalance?: Prisma.IntFieldUpdateOperationsInput | number
  cashtag?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  transactions?: Prisma.TransactionUpdateManyWithoutWalletNestedInput
  user?: Prisma.UserProfileUpdateOneRequiredWithoutWalletsNestedInput
}

export type WalletUncheckedUpdateWithoutOperatorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  balance?: Prisma.FloatFieldUpdateOperationsInput | number
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  paymentMethod?: Prisma.EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
  bonusBalance?: Prisma.IntFieldUpdateOperationsInput | number
  lockedBalance?: Prisma.IntFieldUpdateOperationsInput | number
  cashtag?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  transactions?: Prisma.TransactionUncheckedUpdateManyWithoutWalletNestedInput
}

export type WalletUncheckedUpdateManyWithoutOperatorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  balance?: Prisma.FloatFieldUpdateOperationsInput | number
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  paymentMethod?: Prisma.EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
  bonusBalance?: Prisma.IntFieldUpdateOperationsInput | number
  lockedBalance?: Prisma.IntFieldUpdateOperationsInput | number
  cashtag?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type WalletCreateManyUserInput = {
  id?: string
  balance?: number
  isActive?: boolean
  address?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  operatorId: string
  paymentMethod: $Enums.PaymentMethod
  bonusBalance?: number
  lockedBalance?: number
  cashtag?: string | null
}

export type WalletUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  balance?: Prisma.FloatFieldUpdateOperationsInput | number
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  paymentMethod?: Prisma.EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
  bonusBalance?: Prisma.IntFieldUpdateOperationsInput | number
  lockedBalance?: Prisma.IntFieldUpdateOperationsInput | number
  cashtag?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  transactions?: Prisma.TransactionUpdateManyWithoutWalletNestedInput
  operator?: Prisma.OperatorUpdateOneRequiredWithoutWalletsNestedInput
}

export type WalletUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  balance?: Prisma.FloatFieldUpdateOperationsInput | number
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  operatorId?: Prisma.StringFieldUpdateOperationsInput | string
  paymentMethod?: Prisma.EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
  bonusBalance?: Prisma.IntFieldUpdateOperationsInput | number
  lockedBalance?: Prisma.IntFieldUpdateOperationsInput | number
  cashtag?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  transactions?: Prisma.TransactionUncheckedUpdateManyWithoutWalletNestedInput
}

export type WalletUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  balance?: Prisma.FloatFieldUpdateOperationsInput | number
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  operatorId?: Prisma.StringFieldUpdateOperationsInput | string
  paymentMethod?: Prisma.EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
  bonusBalance?: Prisma.IntFieldUpdateOperationsInput | number
  lockedBalance?: Prisma.IntFieldUpdateOperationsInput | number
  cashtag?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}


/**
 * Count Type WalletCountOutputType
 */

export type WalletCountOutputType = {
  transactions: number
}

export type WalletCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  transactions?: boolean | WalletCountOutputTypeCountTransactionsArgs
}

/**
 * WalletCountOutputType without action
 */
export type WalletCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WalletCountOutputType
   */
  select?: Prisma.WalletCountOutputTypeSelect<ExtArgs> | null
}

/**
 * WalletCountOutputType without action
 */
export type WalletCountOutputTypeCountTransactionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TransactionWhereInput
}


export type WalletSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  balance?: boolean
  isActive?: boolean
  address?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userId?: boolean
  operatorId?: boolean
  paymentMethod?: boolean
  bonusBalance?: boolean
  lockedBalance?: boolean
  cashtag?: boolean
  transactions?: boolean | Prisma.Wallet$transactionsArgs<ExtArgs>
  operator?: boolean | Prisma.OperatorDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserProfileDefaultArgs<ExtArgs>
  _count?: boolean | Prisma.WalletCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["wallet"]>

export type WalletSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  balance?: boolean
  isActive?: boolean
  address?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userId?: boolean
  operatorId?: boolean
  paymentMethod?: boolean
  bonusBalance?: boolean
  lockedBalance?: boolean
  cashtag?: boolean
  operator?: boolean | Prisma.OperatorDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserProfileDefaultArgs<ExtArgs>
}, ExtArgs["result"]["wallet"]>

export type WalletSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  balance?: boolean
  isActive?: boolean
  address?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userId?: boolean
  operatorId?: boolean
  paymentMethod?: boolean
  bonusBalance?: boolean
  lockedBalance?: boolean
  cashtag?: boolean
  operator?: boolean | Prisma.OperatorDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserProfileDefaultArgs<ExtArgs>
}, ExtArgs["result"]["wallet"]>

export type WalletSelectScalar = {
  id?: boolean
  balance?: boolean
  isActive?: boolean
  address?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userId?: boolean
  operatorId?: boolean
  paymentMethod?: boolean
  bonusBalance?: boolean
  lockedBalance?: boolean
  cashtag?: boolean
}

export type WalletOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "balance" | "isActive" | "address" | "createdAt" | "updatedAt" | "userId" | "operatorId" | "paymentMethod" | "bonusBalance" | "lockedBalance" | "cashtag", ExtArgs["result"]["wallet"]>
export type WalletInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  transactions?: boolean | Prisma.Wallet$transactionsArgs<ExtArgs>
  operator?: boolean | Prisma.OperatorDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserProfileDefaultArgs<ExtArgs>
  _count?: boolean | Prisma.WalletCountOutputTypeDefaultArgs<ExtArgs>
}
export type WalletIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  operator?: boolean | Prisma.OperatorDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserProfileDefaultArgs<ExtArgs>
}
export type WalletIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  operator?: boolean | Prisma.OperatorDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserProfileDefaultArgs<ExtArgs>
}

export type $WalletPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Wallet"
  objects: {
    transactions: Prisma.$TransactionPayload<ExtArgs>[]
    operator: Prisma.$OperatorPayload<ExtArgs>
    user: Prisma.$UserProfilePayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    balance: number
    isActive: boolean
    address: string | null
    createdAt: Date
    updatedAt: Date
    userId: string
    operatorId: string
    paymentMethod: $Enums.PaymentMethod
    bonusBalance: number
    lockedBalance: number
    cashtag: string | null
  }, ExtArgs["result"]["wallet"]>
  composites: {}
}

export type WalletGetPayload<S extends boolean | null | undefined | WalletDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$WalletPayload, S>

export type WalletCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<WalletFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: WalletCountAggregateInputType | true
  }

export interface WalletDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Wallet'], meta: { name: 'Wallet' } }
  /**
   * Find zero or one Wallet that matches the filter.
   * @param {WalletFindUniqueArgs} args - Arguments to find a Wallet
   * @example
   * // Get one Wallet
   * const wallet = await prisma.wallet.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends WalletFindUniqueArgs>(args: Prisma.SelectSubset<T, WalletFindUniqueArgs<ExtArgs>>): Prisma.Prisma__WalletClient<runtime.Types.Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Wallet that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {WalletFindUniqueOrThrowArgs} args - Arguments to find a Wallet
   * @example
   * // Get one Wallet
   * const wallet = await prisma.wallet.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends WalletFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, WalletFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__WalletClient<runtime.Types.Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Wallet that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WalletFindFirstArgs} args - Arguments to find a Wallet
   * @example
   * // Get one Wallet
   * const wallet = await prisma.wallet.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends WalletFindFirstArgs>(args?: Prisma.SelectSubset<T, WalletFindFirstArgs<ExtArgs>>): Prisma.Prisma__WalletClient<runtime.Types.Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Wallet that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WalletFindFirstOrThrowArgs} args - Arguments to find a Wallet
   * @example
   * // Get one Wallet
   * const wallet = await prisma.wallet.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends WalletFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, WalletFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__WalletClient<runtime.Types.Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Wallets that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WalletFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Wallets
   * const wallets = await prisma.wallet.findMany()
   * 
   * // Get first 10 Wallets
   * const wallets = await prisma.wallet.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const walletWithIdOnly = await prisma.wallet.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends WalletFindManyArgs>(args?: Prisma.SelectSubset<T, WalletFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Wallet.
   * @param {WalletCreateArgs} args - Arguments to create a Wallet.
   * @example
   * // Create one Wallet
   * const Wallet = await prisma.wallet.create({
   *   data: {
   *     // ... data to create a Wallet
   *   }
   * })
   * 
   */
  create<T extends WalletCreateArgs>(args: Prisma.SelectSubset<T, WalletCreateArgs<ExtArgs>>): Prisma.Prisma__WalletClient<runtime.Types.Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Wallets.
   * @param {WalletCreateManyArgs} args - Arguments to create many Wallets.
   * @example
   * // Create many Wallets
   * const wallet = await prisma.wallet.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends WalletCreateManyArgs>(args?: Prisma.SelectSubset<T, WalletCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Wallets and returns the data saved in the database.
   * @param {WalletCreateManyAndReturnArgs} args - Arguments to create many Wallets.
   * @example
   * // Create many Wallets
   * const wallet = await prisma.wallet.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Wallets and only return the `id`
   * const walletWithIdOnly = await prisma.wallet.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends WalletCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, WalletCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Wallet.
   * @param {WalletDeleteArgs} args - Arguments to delete one Wallet.
   * @example
   * // Delete one Wallet
   * const Wallet = await prisma.wallet.delete({
   *   where: {
   *     // ... filter to delete one Wallet
   *   }
   * })
   * 
   */
  delete<T extends WalletDeleteArgs>(args: Prisma.SelectSubset<T, WalletDeleteArgs<ExtArgs>>): Prisma.Prisma__WalletClient<runtime.Types.Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Wallet.
   * @param {WalletUpdateArgs} args - Arguments to update one Wallet.
   * @example
   * // Update one Wallet
   * const wallet = await prisma.wallet.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends WalletUpdateArgs>(args: Prisma.SelectSubset<T, WalletUpdateArgs<ExtArgs>>): Prisma.Prisma__WalletClient<runtime.Types.Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Wallets.
   * @param {WalletDeleteManyArgs} args - Arguments to filter Wallets to delete.
   * @example
   * // Delete a few Wallets
   * const { count } = await prisma.wallet.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends WalletDeleteManyArgs>(args?: Prisma.SelectSubset<T, WalletDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Wallets.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WalletUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Wallets
   * const wallet = await prisma.wallet.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends WalletUpdateManyArgs>(args: Prisma.SelectSubset<T, WalletUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Wallets and returns the data updated in the database.
   * @param {WalletUpdateManyAndReturnArgs} args - Arguments to update many Wallets.
   * @example
   * // Update many Wallets
   * const wallet = await prisma.wallet.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Wallets and only return the `id`
   * const walletWithIdOnly = await prisma.wallet.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends WalletUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, WalletUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Wallet.
   * @param {WalletUpsertArgs} args - Arguments to update or create a Wallet.
   * @example
   * // Update or create a Wallet
   * const wallet = await prisma.wallet.upsert({
   *   create: {
   *     // ... data to create a Wallet
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Wallet we want to update
   *   }
   * })
   */
  upsert<T extends WalletUpsertArgs>(args: Prisma.SelectSubset<T, WalletUpsertArgs<ExtArgs>>): Prisma.Prisma__WalletClient<runtime.Types.Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Wallets.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WalletCountArgs} args - Arguments to filter Wallets to count.
   * @example
   * // Count the number of Wallets
   * const count = await prisma.wallet.count({
   *   where: {
   *     // ... the filter for the Wallets we want to count
   *   }
   * })
  **/
  count<T extends WalletCountArgs>(
    args?: Prisma.Subset<T, WalletCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], WalletCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Wallet.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WalletAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends WalletAggregateArgs>(args: Prisma.Subset<T, WalletAggregateArgs>): Prisma.PrismaPromise<GetWalletAggregateType<T>>

  /**
   * Group by Wallet.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WalletGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends WalletGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: WalletGroupByArgs['orderBy'] }
      : { orderBy?: WalletGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, WalletGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWalletGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Wallet model
 */
readonly fields: WalletFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Wallet.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__WalletClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  transactions<T extends Prisma.Wallet$transactionsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Wallet$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  operator<T extends Prisma.OperatorDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.OperatorDefaultArgs<ExtArgs>>): Prisma.Prisma__OperatorClient<runtime.Types.Result.GetResult<Prisma.$OperatorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  user<T extends Prisma.UserProfileDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserProfileDefaultArgs<ExtArgs>>): Prisma.Prisma__UserProfileClient<runtime.Types.Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Wallet model
 */
export interface WalletFieldRefs {
  readonly id: Prisma.FieldRef<"Wallet", 'String'>
  readonly balance: Prisma.FieldRef<"Wallet", 'Float'>
  readonly isActive: Prisma.FieldRef<"Wallet", 'Boolean'>
  readonly address: Prisma.FieldRef<"Wallet", 'String'>
  readonly createdAt: Prisma.FieldRef<"Wallet", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Wallet", 'DateTime'>
  readonly userId: Prisma.FieldRef<"Wallet", 'String'>
  readonly operatorId: Prisma.FieldRef<"Wallet", 'String'>
  readonly paymentMethod: Prisma.FieldRef<"Wallet", 'PaymentMethod'>
  readonly bonusBalance: Prisma.FieldRef<"Wallet", 'Int'>
  readonly lockedBalance: Prisma.FieldRef<"Wallet", 'Int'>
  readonly cashtag: Prisma.FieldRef<"Wallet", 'String'>
}
    

// Custom InputTypes
/**
 * Wallet findUnique
 */
export type WalletFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Wallet
   */
  select?: Prisma.WalletSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Wallet
   */
  omit?: Prisma.WalletOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WalletInclude<ExtArgs> | null
  /**
   * Filter, which Wallet to fetch.
   */
  where: Prisma.WalletWhereUniqueInput
}

/**
 * Wallet findUniqueOrThrow
 */
export type WalletFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Wallet
   */
  select?: Prisma.WalletSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Wallet
   */
  omit?: Prisma.WalletOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WalletInclude<ExtArgs> | null
  /**
   * Filter, which Wallet to fetch.
   */
  where: Prisma.WalletWhereUniqueInput
}

/**
 * Wallet findFirst
 */
export type WalletFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Wallet
   */
  select?: Prisma.WalletSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Wallet
   */
  omit?: Prisma.WalletOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WalletInclude<ExtArgs> | null
  /**
   * Filter, which Wallet to fetch.
   */
  where?: Prisma.WalletWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Wallets to fetch.
   */
  orderBy?: Prisma.WalletOrderByWithRelationInput | Prisma.WalletOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Wallets.
   */
  cursor?: Prisma.WalletWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Wallets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Wallets.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Wallets.
   */
  distinct?: Prisma.WalletScalarFieldEnum | Prisma.WalletScalarFieldEnum[]
}

/**
 * Wallet findFirstOrThrow
 */
export type WalletFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Wallet
   */
  select?: Prisma.WalletSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Wallet
   */
  omit?: Prisma.WalletOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WalletInclude<ExtArgs> | null
  /**
   * Filter, which Wallet to fetch.
   */
  where?: Prisma.WalletWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Wallets to fetch.
   */
  orderBy?: Prisma.WalletOrderByWithRelationInput | Prisma.WalletOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Wallets.
   */
  cursor?: Prisma.WalletWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Wallets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Wallets.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Wallets.
   */
  distinct?: Prisma.WalletScalarFieldEnum | Prisma.WalletScalarFieldEnum[]
}

/**
 * Wallet findMany
 */
export type WalletFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Wallet
   */
  select?: Prisma.WalletSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Wallet
   */
  omit?: Prisma.WalletOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WalletInclude<ExtArgs> | null
  /**
   * Filter, which Wallets to fetch.
   */
  where?: Prisma.WalletWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Wallets to fetch.
   */
  orderBy?: Prisma.WalletOrderByWithRelationInput | Prisma.WalletOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Wallets.
   */
  cursor?: Prisma.WalletWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Wallets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Wallets.
   */
  skip?: number
  distinct?: Prisma.WalletScalarFieldEnum | Prisma.WalletScalarFieldEnum[]
}

/**
 * Wallet create
 */
export type WalletCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Wallet
   */
  select?: Prisma.WalletSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Wallet
   */
  omit?: Prisma.WalletOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WalletInclude<ExtArgs> | null
  /**
   * The data needed to create a Wallet.
   */
  data: Prisma.XOR<Prisma.WalletCreateInput, Prisma.WalletUncheckedCreateInput>
}

/**
 * Wallet createMany
 */
export type WalletCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Wallets.
   */
  data: Prisma.WalletCreateManyInput | Prisma.WalletCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Wallet createManyAndReturn
 */
export type WalletCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Wallet
   */
  select?: Prisma.WalletSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Wallet
   */
  omit?: Prisma.WalletOmit<ExtArgs> | null
  /**
   * The data used to create many Wallets.
   */
  data: Prisma.WalletCreateManyInput | Prisma.WalletCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WalletIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Wallet update
 */
export type WalletUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Wallet
   */
  select?: Prisma.WalletSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Wallet
   */
  omit?: Prisma.WalletOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WalletInclude<ExtArgs> | null
  /**
   * The data needed to update a Wallet.
   */
  data: Prisma.XOR<Prisma.WalletUpdateInput, Prisma.WalletUncheckedUpdateInput>
  /**
   * Choose, which Wallet to update.
   */
  where: Prisma.WalletWhereUniqueInput
}

/**
 * Wallet updateMany
 */
export type WalletUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Wallets.
   */
  data: Prisma.XOR<Prisma.WalletUpdateManyMutationInput, Prisma.WalletUncheckedUpdateManyInput>
  /**
   * Filter which Wallets to update
   */
  where?: Prisma.WalletWhereInput
  /**
   * Limit how many Wallets to update.
   */
  limit?: number
}

/**
 * Wallet updateManyAndReturn
 */
export type WalletUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Wallet
   */
  select?: Prisma.WalletSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Wallet
   */
  omit?: Prisma.WalletOmit<ExtArgs> | null
  /**
   * The data used to update Wallets.
   */
  data: Prisma.XOR<Prisma.WalletUpdateManyMutationInput, Prisma.WalletUncheckedUpdateManyInput>
  /**
   * Filter which Wallets to update
   */
  where?: Prisma.WalletWhereInput
  /**
   * Limit how many Wallets to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WalletIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Wallet upsert
 */
export type WalletUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Wallet
   */
  select?: Prisma.WalletSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Wallet
   */
  omit?: Prisma.WalletOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WalletInclude<ExtArgs> | null
  /**
   * The filter to search for the Wallet to update in case it exists.
   */
  where: Prisma.WalletWhereUniqueInput
  /**
   * In case the Wallet found by the `where` argument doesn't exist, create a new Wallet with this data.
   */
  create: Prisma.XOR<Prisma.WalletCreateInput, Prisma.WalletUncheckedCreateInput>
  /**
   * In case the Wallet was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.WalletUpdateInput, Prisma.WalletUncheckedUpdateInput>
}

/**
 * Wallet delete
 */
export type WalletDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Wallet
   */
  select?: Prisma.WalletSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Wallet
   */
  omit?: Prisma.WalletOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WalletInclude<ExtArgs> | null
  /**
   * Filter which Wallet to delete.
   */
  where: Prisma.WalletWhereUniqueInput
}

/**
 * Wallet deleteMany
 */
export type WalletDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Wallets to delete
   */
  where?: Prisma.WalletWhereInput
  /**
   * Limit how many Wallets to delete.
   */
  limit?: number
}

/**
 * Wallet.transactions
 */
export type Wallet$transactionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Transaction
   */
  select?: Prisma.TransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Transaction
   */
  omit?: Prisma.TransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionInclude<ExtArgs> | null
  where?: Prisma.TransactionWhereInput
  orderBy?: Prisma.TransactionOrderByWithRelationInput | Prisma.TransactionOrderByWithRelationInput[]
  cursor?: Prisma.TransactionWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TransactionScalarFieldEnum | Prisma.TransactionScalarFieldEnum[]
}

/**
 * Wallet without action
 */
export type WalletDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Wallet
   */
  select?: Prisma.WalletSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Wallet
   */
  omit?: Prisma.WalletOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WalletInclude<ExtArgs> | null
}
