
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `GameSpin` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model GameSpin
 * 
 */
export type GameSpinModel = runtime.Types.Result.DefaultSelection<Prisma.$GameSpinPayload>

export type AggregateGameSpin = {
  _count: GameSpinCountAggregateOutputType | null
  _avg: GameSpinAvgAggregateOutputType | null
  _sum: GameSpinSumAggregateOutputType | null
  _min: GameSpinMinAggregateOutputType | null
  _max: GameSpinMaxAggregateOutputType | null
}

export type GameSpinAvgAggregateOutputType = {
  grossWinAmount: number | null
  spinNumber: number | null
  wagerAmount: number | null
}

export type GameSpinSumAggregateOutputType = {
  grossWinAmount: number | null
  spinNumber: number | null
  wagerAmount: number | null
}

export type GameSpinMinAggregateOutputType = {
  id: string | null
  createdAt: Date | null
  grossWinAmount: number | null
  currencyId: string | null
  spinNumber: number | null
  gameSessionId: string | null
  wagerAmount: number | null
  sessionId: string | null
  timeStamp: Date | null
}

export type GameSpinMaxAggregateOutputType = {
  id: string | null
  createdAt: Date | null
  grossWinAmount: number | null
  currencyId: string | null
  spinNumber: number | null
  gameSessionId: string | null
  wagerAmount: number | null
  sessionId: string | null
  timeStamp: Date | null
}

export type GameSpinCountAggregateOutputType = {
  id: number
  spinData: number
  createdAt: number
  grossWinAmount: number
  currencyId: number
  spinNumber: number
  gameSessionId: number
  wagerAmount: number
  sessionId: number
  timeStamp: number
  _all: number
}


export type GameSpinAvgAggregateInputType = {
  grossWinAmount?: true
  spinNumber?: true
  wagerAmount?: true
}

export type GameSpinSumAggregateInputType = {
  grossWinAmount?: true
  spinNumber?: true
  wagerAmount?: true
}

export type GameSpinMinAggregateInputType = {
  id?: true
  createdAt?: true
  grossWinAmount?: true
  currencyId?: true
  spinNumber?: true
  gameSessionId?: true
  wagerAmount?: true
  sessionId?: true
  timeStamp?: true
}

export type GameSpinMaxAggregateInputType = {
  id?: true
  createdAt?: true
  grossWinAmount?: true
  currencyId?: true
  spinNumber?: true
  gameSessionId?: true
  wagerAmount?: true
  sessionId?: true
  timeStamp?: true
}

export type GameSpinCountAggregateInputType = {
  id?: true
  spinData?: true
  createdAt?: true
  grossWinAmount?: true
  currencyId?: true
  spinNumber?: true
  gameSessionId?: true
  wagerAmount?: true
  sessionId?: true
  timeStamp?: true
  _all?: true
}

export type GameSpinAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which GameSpin to aggregate.
   */
  where?: Prisma.GameSpinWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of GameSpins to fetch.
   */
  orderBy?: Prisma.GameSpinOrderByWithRelationInput | Prisma.GameSpinOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.GameSpinWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` GameSpins from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` GameSpins.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned GameSpins
  **/
  _count?: true | GameSpinCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: GameSpinAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: GameSpinSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: GameSpinMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: GameSpinMaxAggregateInputType
}

export type GetGameSpinAggregateType<T extends GameSpinAggregateArgs> = {
      [P in keyof T & keyof AggregateGameSpin]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateGameSpin[P]>
    : Prisma.GetScalarType<T[P], AggregateGameSpin[P]>
}




export type GameSpinGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.GameSpinWhereInput
  orderBy?: Prisma.GameSpinOrderByWithAggregationInput | Prisma.GameSpinOrderByWithAggregationInput[]
  by: Prisma.GameSpinScalarFieldEnum[] | Prisma.GameSpinScalarFieldEnum
  having?: Prisma.GameSpinScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: GameSpinCountAggregateInputType | true
  _avg?: GameSpinAvgAggregateInputType
  _sum?: GameSpinSumAggregateInputType
  _min?: GameSpinMinAggregateInputType
  _max?: GameSpinMaxAggregateInputType
}

export type GameSpinGroupByOutputType = {
  id: string
  spinData: runtime.JsonValue | null
  createdAt: Date
  grossWinAmount: number
  currencyId: string | null
  spinNumber: number
  gameSessionId: string
  wagerAmount: number
  sessionId: string
  timeStamp: Date
  _count: GameSpinCountAggregateOutputType | null
  _avg: GameSpinAvgAggregateOutputType | null
  _sum: GameSpinSumAggregateOutputType | null
  _min: GameSpinMinAggregateOutputType | null
  _max: GameSpinMaxAggregateOutputType | null
}

type GetGameSpinGroupByPayload<T extends GameSpinGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<GameSpinGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof GameSpinGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], GameSpinGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], GameSpinGroupByOutputType[P]>
      }
    >
  > 



export type GameSpinWhereInput = {
  AND?: Prisma.GameSpinWhereInput | Prisma.GameSpinWhereInput[]
  OR?: Prisma.GameSpinWhereInput[]
  NOT?: Prisma.GameSpinWhereInput | Prisma.GameSpinWhereInput[]
  id?: Prisma.StringFilter<"GameSpin"> | string
  spinData?: Prisma.JsonNullableFilter<"GameSpin">
  createdAt?: Prisma.DateTimeFilter<"GameSpin"> | Date | string
  grossWinAmount?: Prisma.IntFilter<"GameSpin"> | number
  currencyId?: Prisma.StringNullableFilter<"GameSpin"> | string | null
  spinNumber?: Prisma.IntFilter<"GameSpin"> | number
  gameSessionId?: Prisma.StringFilter<"GameSpin"> | string
  wagerAmount?: Prisma.IntFilter<"GameSpin"> | number
  sessionId?: Prisma.StringFilter<"GameSpin"> | string
  timeStamp?: Prisma.DateTimeFilter<"GameSpin"> | Date | string
  gameSession?: Prisma.XOR<Prisma.GameSessionScalarRelationFilter, Prisma.GameSessionWhereInput>
  jackpotContributions?: Prisma.JackpotContributionListRelationFilter
  jackpotWin?: Prisma.XOR<Prisma.JackpotWinNullableScalarRelationFilter, Prisma.JackpotWinWhereInput> | null
}

export type GameSpinOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  spinData?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  grossWinAmount?: Prisma.SortOrder
  currencyId?: Prisma.SortOrderInput | Prisma.SortOrder
  spinNumber?: Prisma.SortOrder
  gameSessionId?: Prisma.SortOrder
  wagerAmount?: Prisma.SortOrder
  sessionId?: Prisma.SortOrder
  timeStamp?: Prisma.SortOrder
  gameSession?: Prisma.GameSessionOrderByWithRelationInput
  jackpotContributions?: Prisma.JackpotContributionOrderByRelationAggregateInput
  jackpotWin?: Prisma.JackpotWinOrderByWithRelationInput
}

export type GameSpinWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.GameSpinWhereInput | Prisma.GameSpinWhereInput[]
  OR?: Prisma.GameSpinWhereInput[]
  NOT?: Prisma.GameSpinWhereInput | Prisma.GameSpinWhereInput[]
  spinData?: Prisma.JsonNullableFilter<"GameSpin">
  createdAt?: Prisma.DateTimeFilter<"GameSpin"> | Date | string
  grossWinAmount?: Prisma.IntFilter<"GameSpin"> | number
  currencyId?: Prisma.StringNullableFilter<"GameSpin"> | string | null
  spinNumber?: Prisma.IntFilter<"GameSpin"> | number
  gameSessionId?: Prisma.StringFilter<"GameSpin"> | string
  wagerAmount?: Prisma.IntFilter<"GameSpin"> | number
  sessionId?: Prisma.StringFilter<"GameSpin"> | string
  timeStamp?: Prisma.DateTimeFilter<"GameSpin"> | Date | string
  gameSession?: Prisma.XOR<Prisma.GameSessionScalarRelationFilter, Prisma.GameSessionWhereInput>
  jackpotContributions?: Prisma.JackpotContributionListRelationFilter
  jackpotWin?: Prisma.XOR<Prisma.JackpotWinNullableScalarRelationFilter, Prisma.JackpotWinWhereInput> | null
}, "id">

export type GameSpinOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  spinData?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  grossWinAmount?: Prisma.SortOrder
  currencyId?: Prisma.SortOrderInput | Prisma.SortOrder
  spinNumber?: Prisma.SortOrder
  gameSessionId?: Prisma.SortOrder
  wagerAmount?: Prisma.SortOrder
  sessionId?: Prisma.SortOrder
  timeStamp?: Prisma.SortOrder
  _count?: Prisma.GameSpinCountOrderByAggregateInput
  _avg?: Prisma.GameSpinAvgOrderByAggregateInput
  _max?: Prisma.GameSpinMaxOrderByAggregateInput
  _min?: Prisma.GameSpinMinOrderByAggregateInput
  _sum?: Prisma.GameSpinSumOrderByAggregateInput
}

export type GameSpinScalarWhereWithAggregatesInput = {
  AND?: Prisma.GameSpinScalarWhereWithAggregatesInput | Prisma.GameSpinScalarWhereWithAggregatesInput[]
  OR?: Prisma.GameSpinScalarWhereWithAggregatesInput[]
  NOT?: Prisma.GameSpinScalarWhereWithAggregatesInput | Prisma.GameSpinScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"GameSpin"> | string
  spinData?: Prisma.JsonNullableWithAggregatesFilter<"GameSpin">
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"GameSpin"> | Date | string
  grossWinAmount?: Prisma.IntWithAggregatesFilter<"GameSpin"> | number
  currencyId?: Prisma.StringNullableWithAggregatesFilter<"GameSpin"> | string | null
  spinNumber?: Prisma.IntWithAggregatesFilter<"GameSpin"> | number
  gameSessionId?: Prisma.StringWithAggregatesFilter<"GameSpin"> | string
  wagerAmount?: Prisma.IntWithAggregatesFilter<"GameSpin"> | number
  sessionId?: Prisma.StringWithAggregatesFilter<"GameSpin"> | string
  timeStamp?: Prisma.DateTimeWithAggregatesFilter<"GameSpin"> | Date | string
}

export type GameSpinCreateInput = {
  id?: string
  spinData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  grossWinAmount?: number
  currencyId?: string | null
  spinNumber?: number
  wagerAmount?: number
  sessionId: string
  timeStamp: Date | string
  gameSession: Prisma.GameSessionCreateNestedOneWithoutSpinsInput
  jackpotContributions?: Prisma.JackpotContributionCreateNestedManyWithoutGameSpinInput
  jackpotWin?: Prisma.JackpotWinCreateNestedOneWithoutGameSpinInput
}

export type GameSpinUncheckedCreateInput = {
  id?: string
  spinData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  grossWinAmount?: number
  currencyId?: string | null
  spinNumber?: number
  gameSessionId: string
  wagerAmount?: number
  sessionId: string
  timeStamp: Date | string
  jackpotContributions?: Prisma.JackpotContributionUncheckedCreateNestedManyWithoutGameSpinInput
  jackpotWin?: Prisma.JackpotWinUncheckedCreateNestedOneWithoutGameSpinInput
}

export type GameSpinUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spinData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  grossWinAmount?: Prisma.IntFieldUpdateOperationsInput | number
  currencyId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  spinNumber?: Prisma.IntFieldUpdateOperationsInput | number
  wagerAmount?: Prisma.IntFieldUpdateOperationsInput | number
  sessionId?: Prisma.StringFieldUpdateOperationsInput | string
  timeStamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  gameSession?: Prisma.GameSessionUpdateOneRequiredWithoutSpinsNestedInput
  jackpotContributions?: Prisma.JackpotContributionUpdateManyWithoutGameSpinNestedInput
  jackpotWin?: Prisma.JackpotWinUpdateOneWithoutGameSpinNestedInput
}

export type GameSpinUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spinData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  grossWinAmount?: Prisma.IntFieldUpdateOperationsInput | number
  currencyId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  spinNumber?: Prisma.IntFieldUpdateOperationsInput | number
  gameSessionId?: Prisma.StringFieldUpdateOperationsInput | string
  wagerAmount?: Prisma.IntFieldUpdateOperationsInput | number
  sessionId?: Prisma.StringFieldUpdateOperationsInput | string
  timeStamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  jackpotContributions?: Prisma.JackpotContributionUncheckedUpdateManyWithoutGameSpinNestedInput
  jackpotWin?: Prisma.JackpotWinUncheckedUpdateOneWithoutGameSpinNestedInput
}

export type GameSpinCreateManyInput = {
  id?: string
  spinData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  grossWinAmount?: number
  currencyId?: string | null
  spinNumber?: number
  gameSessionId: string
  wagerAmount?: number
  sessionId: string
  timeStamp: Date | string
}

export type GameSpinUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spinData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  grossWinAmount?: Prisma.IntFieldUpdateOperationsInput | number
  currencyId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  spinNumber?: Prisma.IntFieldUpdateOperationsInput | number
  wagerAmount?: Prisma.IntFieldUpdateOperationsInput | number
  sessionId?: Prisma.StringFieldUpdateOperationsInput | string
  timeStamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type GameSpinUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spinData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  grossWinAmount?: Prisma.IntFieldUpdateOperationsInput | number
  currencyId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  spinNumber?: Prisma.IntFieldUpdateOperationsInput | number
  gameSessionId?: Prisma.StringFieldUpdateOperationsInput | string
  wagerAmount?: Prisma.IntFieldUpdateOperationsInput | number
  sessionId?: Prisma.StringFieldUpdateOperationsInput | string
  timeStamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type GameSpinListRelationFilter = {
  every?: Prisma.GameSpinWhereInput
  some?: Prisma.GameSpinWhereInput
  none?: Prisma.GameSpinWhereInput
}

export type GameSpinOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type GameSpinCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  spinData?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  grossWinAmount?: Prisma.SortOrder
  currencyId?: Prisma.SortOrder
  spinNumber?: Prisma.SortOrder
  gameSessionId?: Prisma.SortOrder
  wagerAmount?: Prisma.SortOrder
  sessionId?: Prisma.SortOrder
  timeStamp?: Prisma.SortOrder
}

export type GameSpinAvgOrderByAggregateInput = {
  grossWinAmount?: Prisma.SortOrder
  spinNumber?: Prisma.SortOrder
  wagerAmount?: Prisma.SortOrder
}

export type GameSpinMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  grossWinAmount?: Prisma.SortOrder
  currencyId?: Prisma.SortOrder
  spinNumber?: Prisma.SortOrder
  gameSessionId?: Prisma.SortOrder
  wagerAmount?: Prisma.SortOrder
  sessionId?: Prisma.SortOrder
  timeStamp?: Prisma.SortOrder
}

export type GameSpinMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  grossWinAmount?: Prisma.SortOrder
  currencyId?: Prisma.SortOrder
  spinNumber?: Prisma.SortOrder
  gameSessionId?: Prisma.SortOrder
  wagerAmount?: Prisma.SortOrder
  sessionId?: Prisma.SortOrder
  timeStamp?: Prisma.SortOrder
}

export type GameSpinSumOrderByAggregateInput = {
  grossWinAmount?: Prisma.SortOrder
  spinNumber?: Prisma.SortOrder
  wagerAmount?: Prisma.SortOrder
}

export type GameSpinScalarRelationFilter = {
  is?: Prisma.GameSpinWhereInput
  isNot?: Prisma.GameSpinWhereInput
}

export type GameSpinCreateNestedManyWithoutGameSessionInput = {
  create?: Prisma.XOR<Prisma.GameSpinCreateWithoutGameSessionInput, Prisma.GameSpinUncheckedCreateWithoutGameSessionInput> | Prisma.GameSpinCreateWithoutGameSessionInput[] | Prisma.GameSpinUncheckedCreateWithoutGameSessionInput[]
  connectOrCreate?: Prisma.GameSpinCreateOrConnectWithoutGameSessionInput | Prisma.GameSpinCreateOrConnectWithoutGameSessionInput[]
  createMany?: Prisma.GameSpinCreateManyGameSessionInputEnvelope
  connect?: Prisma.GameSpinWhereUniqueInput | Prisma.GameSpinWhereUniqueInput[]
}

export type GameSpinUncheckedCreateNestedManyWithoutGameSessionInput = {
  create?: Prisma.XOR<Prisma.GameSpinCreateWithoutGameSessionInput, Prisma.GameSpinUncheckedCreateWithoutGameSessionInput> | Prisma.GameSpinCreateWithoutGameSessionInput[] | Prisma.GameSpinUncheckedCreateWithoutGameSessionInput[]
  connectOrCreate?: Prisma.GameSpinCreateOrConnectWithoutGameSessionInput | Prisma.GameSpinCreateOrConnectWithoutGameSessionInput[]
  createMany?: Prisma.GameSpinCreateManyGameSessionInputEnvelope
  connect?: Prisma.GameSpinWhereUniqueInput | Prisma.GameSpinWhereUniqueInput[]
}

export type GameSpinUpdateManyWithoutGameSessionNestedInput = {
  create?: Prisma.XOR<Prisma.GameSpinCreateWithoutGameSessionInput, Prisma.GameSpinUncheckedCreateWithoutGameSessionInput> | Prisma.GameSpinCreateWithoutGameSessionInput[] | Prisma.GameSpinUncheckedCreateWithoutGameSessionInput[]
  connectOrCreate?: Prisma.GameSpinCreateOrConnectWithoutGameSessionInput | Prisma.GameSpinCreateOrConnectWithoutGameSessionInput[]
  upsert?: Prisma.GameSpinUpsertWithWhereUniqueWithoutGameSessionInput | Prisma.GameSpinUpsertWithWhereUniqueWithoutGameSessionInput[]
  createMany?: Prisma.GameSpinCreateManyGameSessionInputEnvelope
  set?: Prisma.GameSpinWhereUniqueInput | Prisma.GameSpinWhereUniqueInput[]
  disconnect?: Prisma.GameSpinWhereUniqueInput | Prisma.GameSpinWhereUniqueInput[]
  delete?: Prisma.GameSpinWhereUniqueInput | Prisma.GameSpinWhereUniqueInput[]
  connect?: Prisma.GameSpinWhereUniqueInput | Prisma.GameSpinWhereUniqueInput[]
  update?: Prisma.GameSpinUpdateWithWhereUniqueWithoutGameSessionInput | Prisma.GameSpinUpdateWithWhereUniqueWithoutGameSessionInput[]
  updateMany?: Prisma.GameSpinUpdateManyWithWhereWithoutGameSessionInput | Prisma.GameSpinUpdateManyWithWhereWithoutGameSessionInput[]
  deleteMany?: Prisma.GameSpinScalarWhereInput | Prisma.GameSpinScalarWhereInput[]
}

export type GameSpinUncheckedUpdateManyWithoutGameSessionNestedInput = {
  create?: Prisma.XOR<Prisma.GameSpinCreateWithoutGameSessionInput, Prisma.GameSpinUncheckedCreateWithoutGameSessionInput> | Prisma.GameSpinCreateWithoutGameSessionInput[] | Prisma.GameSpinUncheckedCreateWithoutGameSessionInput[]
  connectOrCreate?: Prisma.GameSpinCreateOrConnectWithoutGameSessionInput | Prisma.GameSpinCreateOrConnectWithoutGameSessionInput[]
  upsert?: Prisma.GameSpinUpsertWithWhereUniqueWithoutGameSessionInput | Prisma.GameSpinUpsertWithWhereUniqueWithoutGameSessionInput[]
  createMany?: Prisma.GameSpinCreateManyGameSessionInputEnvelope
  set?: Prisma.GameSpinWhereUniqueInput | Prisma.GameSpinWhereUniqueInput[]
  disconnect?: Prisma.GameSpinWhereUniqueInput | Prisma.GameSpinWhereUniqueInput[]
  delete?: Prisma.GameSpinWhereUniqueInput | Prisma.GameSpinWhereUniqueInput[]
  connect?: Prisma.GameSpinWhereUniqueInput | Prisma.GameSpinWhereUniqueInput[]
  update?: Prisma.GameSpinUpdateWithWhereUniqueWithoutGameSessionInput | Prisma.GameSpinUpdateWithWhereUniqueWithoutGameSessionInput[]
  updateMany?: Prisma.GameSpinUpdateManyWithWhereWithoutGameSessionInput | Prisma.GameSpinUpdateManyWithWhereWithoutGameSessionInput[]
  deleteMany?: Prisma.GameSpinScalarWhereInput | Prisma.GameSpinScalarWhereInput[]
}

export type GameSpinCreateNestedOneWithoutJackpotContributionsInput = {
  create?: Prisma.XOR<Prisma.GameSpinCreateWithoutJackpotContributionsInput, Prisma.GameSpinUncheckedCreateWithoutJackpotContributionsInput>
  connectOrCreate?: Prisma.GameSpinCreateOrConnectWithoutJackpotContributionsInput
  connect?: Prisma.GameSpinWhereUniqueInput
}

export type GameSpinUpdateOneRequiredWithoutJackpotContributionsNestedInput = {
  create?: Prisma.XOR<Prisma.GameSpinCreateWithoutJackpotContributionsInput, Prisma.GameSpinUncheckedCreateWithoutJackpotContributionsInput>
  connectOrCreate?: Prisma.GameSpinCreateOrConnectWithoutJackpotContributionsInput
  upsert?: Prisma.GameSpinUpsertWithoutJackpotContributionsInput
  connect?: Prisma.GameSpinWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.GameSpinUpdateToOneWithWhereWithoutJackpotContributionsInput, Prisma.GameSpinUpdateWithoutJackpotContributionsInput>, Prisma.GameSpinUncheckedUpdateWithoutJackpotContributionsInput>
}

export type GameSpinCreateNestedOneWithoutJackpotWinInput = {
  create?: Prisma.XOR<Prisma.GameSpinCreateWithoutJackpotWinInput, Prisma.GameSpinUncheckedCreateWithoutJackpotWinInput>
  connectOrCreate?: Prisma.GameSpinCreateOrConnectWithoutJackpotWinInput
  connect?: Prisma.GameSpinWhereUniqueInput
}

export type GameSpinUpdateOneRequiredWithoutJackpotWinNestedInput = {
  create?: Prisma.XOR<Prisma.GameSpinCreateWithoutJackpotWinInput, Prisma.GameSpinUncheckedCreateWithoutJackpotWinInput>
  connectOrCreate?: Prisma.GameSpinCreateOrConnectWithoutJackpotWinInput
  upsert?: Prisma.GameSpinUpsertWithoutJackpotWinInput
  connect?: Prisma.GameSpinWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.GameSpinUpdateToOneWithWhereWithoutJackpotWinInput, Prisma.GameSpinUpdateWithoutJackpotWinInput>, Prisma.GameSpinUncheckedUpdateWithoutJackpotWinInput>
}

export type GameSpinCreateWithoutGameSessionInput = {
  id?: string
  spinData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  grossWinAmount?: number
  currencyId?: string | null
  spinNumber?: number
  wagerAmount?: number
  sessionId: string
  timeStamp: Date | string
  jackpotContributions?: Prisma.JackpotContributionCreateNestedManyWithoutGameSpinInput
  jackpotWin?: Prisma.JackpotWinCreateNestedOneWithoutGameSpinInput
}

export type GameSpinUncheckedCreateWithoutGameSessionInput = {
  id?: string
  spinData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  grossWinAmount?: number
  currencyId?: string | null
  spinNumber?: number
  wagerAmount?: number
  sessionId: string
  timeStamp: Date | string
  jackpotContributions?: Prisma.JackpotContributionUncheckedCreateNestedManyWithoutGameSpinInput
  jackpotWin?: Prisma.JackpotWinUncheckedCreateNestedOneWithoutGameSpinInput
}

export type GameSpinCreateOrConnectWithoutGameSessionInput = {
  where: Prisma.GameSpinWhereUniqueInput
  create: Prisma.XOR<Prisma.GameSpinCreateWithoutGameSessionInput, Prisma.GameSpinUncheckedCreateWithoutGameSessionInput>
}

export type GameSpinCreateManyGameSessionInputEnvelope = {
  data: Prisma.GameSpinCreateManyGameSessionInput | Prisma.GameSpinCreateManyGameSessionInput[]
  skipDuplicates?: boolean
}

export type GameSpinUpsertWithWhereUniqueWithoutGameSessionInput = {
  where: Prisma.GameSpinWhereUniqueInput
  update: Prisma.XOR<Prisma.GameSpinUpdateWithoutGameSessionInput, Prisma.GameSpinUncheckedUpdateWithoutGameSessionInput>
  create: Prisma.XOR<Prisma.GameSpinCreateWithoutGameSessionInput, Prisma.GameSpinUncheckedCreateWithoutGameSessionInput>
}

export type GameSpinUpdateWithWhereUniqueWithoutGameSessionInput = {
  where: Prisma.GameSpinWhereUniqueInput
  data: Prisma.XOR<Prisma.GameSpinUpdateWithoutGameSessionInput, Prisma.GameSpinUncheckedUpdateWithoutGameSessionInput>
}

export type GameSpinUpdateManyWithWhereWithoutGameSessionInput = {
  where: Prisma.GameSpinScalarWhereInput
  data: Prisma.XOR<Prisma.GameSpinUpdateManyMutationInput, Prisma.GameSpinUncheckedUpdateManyWithoutGameSessionInput>
}

export type GameSpinScalarWhereInput = {
  AND?: Prisma.GameSpinScalarWhereInput | Prisma.GameSpinScalarWhereInput[]
  OR?: Prisma.GameSpinScalarWhereInput[]
  NOT?: Prisma.GameSpinScalarWhereInput | Prisma.GameSpinScalarWhereInput[]
  id?: Prisma.StringFilter<"GameSpin"> | string
  spinData?: Prisma.JsonNullableFilter<"GameSpin">
  createdAt?: Prisma.DateTimeFilter<"GameSpin"> | Date | string
  grossWinAmount?: Prisma.IntFilter<"GameSpin"> | number
  currencyId?: Prisma.StringNullableFilter<"GameSpin"> | string | null
  spinNumber?: Prisma.IntFilter<"GameSpin"> | number
  gameSessionId?: Prisma.StringFilter<"GameSpin"> | string
  wagerAmount?: Prisma.IntFilter<"GameSpin"> | number
  sessionId?: Prisma.StringFilter<"GameSpin"> | string
  timeStamp?: Prisma.DateTimeFilter<"GameSpin"> | Date | string
}

export type GameSpinCreateWithoutJackpotContributionsInput = {
  id?: string
  spinData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  grossWinAmount?: number
  currencyId?: string | null
  spinNumber?: number
  wagerAmount?: number
  sessionId: string
  timeStamp: Date | string
  gameSession: Prisma.GameSessionCreateNestedOneWithoutSpinsInput
  jackpotWin?: Prisma.JackpotWinCreateNestedOneWithoutGameSpinInput
}

export type GameSpinUncheckedCreateWithoutJackpotContributionsInput = {
  id?: string
  spinData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  grossWinAmount?: number
  currencyId?: string | null
  spinNumber?: number
  gameSessionId: string
  wagerAmount?: number
  sessionId: string
  timeStamp: Date | string
  jackpotWin?: Prisma.JackpotWinUncheckedCreateNestedOneWithoutGameSpinInput
}

export type GameSpinCreateOrConnectWithoutJackpotContributionsInput = {
  where: Prisma.GameSpinWhereUniqueInput
  create: Prisma.XOR<Prisma.GameSpinCreateWithoutJackpotContributionsInput, Prisma.GameSpinUncheckedCreateWithoutJackpotContributionsInput>
}

export type GameSpinUpsertWithoutJackpotContributionsInput = {
  update: Prisma.XOR<Prisma.GameSpinUpdateWithoutJackpotContributionsInput, Prisma.GameSpinUncheckedUpdateWithoutJackpotContributionsInput>
  create: Prisma.XOR<Prisma.GameSpinCreateWithoutJackpotContributionsInput, Prisma.GameSpinUncheckedCreateWithoutJackpotContributionsInput>
  where?: Prisma.GameSpinWhereInput
}

export type GameSpinUpdateToOneWithWhereWithoutJackpotContributionsInput = {
  where?: Prisma.GameSpinWhereInput
  data: Prisma.XOR<Prisma.GameSpinUpdateWithoutJackpotContributionsInput, Prisma.GameSpinUncheckedUpdateWithoutJackpotContributionsInput>
}

export type GameSpinUpdateWithoutJackpotContributionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spinData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  grossWinAmount?: Prisma.IntFieldUpdateOperationsInput | number
  currencyId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  spinNumber?: Prisma.IntFieldUpdateOperationsInput | number
  wagerAmount?: Prisma.IntFieldUpdateOperationsInput | number
  sessionId?: Prisma.StringFieldUpdateOperationsInput | string
  timeStamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  gameSession?: Prisma.GameSessionUpdateOneRequiredWithoutSpinsNestedInput
  jackpotWin?: Prisma.JackpotWinUpdateOneWithoutGameSpinNestedInput
}

export type GameSpinUncheckedUpdateWithoutJackpotContributionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spinData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  grossWinAmount?: Prisma.IntFieldUpdateOperationsInput | number
  currencyId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  spinNumber?: Prisma.IntFieldUpdateOperationsInput | number
  gameSessionId?: Prisma.StringFieldUpdateOperationsInput | string
  wagerAmount?: Prisma.IntFieldUpdateOperationsInput | number
  sessionId?: Prisma.StringFieldUpdateOperationsInput | string
  timeStamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  jackpotWin?: Prisma.JackpotWinUncheckedUpdateOneWithoutGameSpinNestedInput
}

export type GameSpinCreateWithoutJackpotWinInput = {
  id?: string
  spinData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  grossWinAmount?: number
  currencyId?: string | null
  spinNumber?: number
  wagerAmount?: number
  sessionId: string
  timeStamp: Date | string
  gameSession: Prisma.GameSessionCreateNestedOneWithoutSpinsInput
  jackpotContributions?: Prisma.JackpotContributionCreateNestedManyWithoutGameSpinInput
}

export type GameSpinUncheckedCreateWithoutJackpotWinInput = {
  id?: string
  spinData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  grossWinAmount?: number
  currencyId?: string | null
  spinNumber?: number
  gameSessionId: string
  wagerAmount?: number
  sessionId: string
  timeStamp: Date | string
  jackpotContributions?: Prisma.JackpotContributionUncheckedCreateNestedManyWithoutGameSpinInput
}

export type GameSpinCreateOrConnectWithoutJackpotWinInput = {
  where: Prisma.GameSpinWhereUniqueInput
  create: Prisma.XOR<Prisma.GameSpinCreateWithoutJackpotWinInput, Prisma.GameSpinUncheckedCreateWithoutJackpotWinInput>
}

export type GameSpinUpsertWithoutJackpotWinInput = {
  update: Prisma.XOR<Prisma.GameSpinUpdateWithoutJackpotWinInput, Prisma.GameSpinUncheckedUpdateWithoutJackpotWinInput>
  create: Prisma.XOR<Prisma.GameSpinCreateWithoutJackpotWinInput, Prisma.GameSpinUncheckedCreateWithoutJackpotWinInput>
  where?: Prisma.GameSpinWhereInput
}

export type GameSpinUpdateToOneWithWhereWithoutJackpotWinInput = {
  where?: Prisma.GameSpinWhereInput
  data: Prisma.XOR<Prisma.GameSpinUpdateWithoutJackpotWinInput, Prisma.GameSpinUncheckedUpdateWithoutJackpotWinInput>
}

export type GameSpinUpdateWithoutJackpotWinInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spinData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  grossWinAmount?: Prisma.IntFieldUpdateOperationsInput | number
  currencyId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  spinNumber?: Prisma.IntFieldUpdateOperationsInput | number
  wagerAmount?: Prisma.IntFieldUpdateOperationsInput | number
  sessionId?: Prisma.StringFieldUpdateOperationsInput | string
  timeStamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  gameSession?: Prisma.GameSessionUpdateOneRequiredWithoutSpinsNestedInput
  jackpotContributions?: Prisma.JackpotContributionUpdateManyWithoutGameSpinNestedInput
}

export type GameSpinUncheckedUpdateWithoutJackpotWinInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spinData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  grossWinAmount?: Prisma.IntFieldUpdateOperationsInput | number
  currencyId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  spinNumber?: Prisma.IntFieldUpdateOperationsInput | number
  gameSessionId?: Prisma.StringFieldUpdateOperationsInput | string
  wagerAmount?: Prisma.IntFieldUpdateOperationsInput | number
  sessionId?: Prisma.StringFieldUpdateOperationsInput | string
  timeStamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  jackpotContributions?: Prisma.JackpotContributionUncheckedUpdateManyWithoutGameSpinNestedInput
}

export type GameSpinCreateManyGameSessionInput = {
  id?: string
  spinData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  grossWinAmount?: number
  currencyId?: string | null
  spinNumber?: number
  wagerAmount?: number
  sessionId: string
  timeStamp: Date | string
}

export type GameSpinUpdateWithoutGameSessionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spinData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  grossWinAmount?: Prisma.IntFieldUpdateOperationsInput | number
  currencyId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  spinNumber?: Prisma.IntFieldUpdateOperationsInput | number
  wagerAmount?: Prisma.IntFieldUpdateOperationsInput | number
  sessionId?: Prisma.StringFieldUpdateOperationsInput | string
  timeStamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  jackpotContributions?: Prisma.JackpotContributionUpdateManyWithoutGameSpinNestedInput
  jackpotWin?: Prisma.JackpotWinUpdateOneWithoutGameSpinNestedInput
}

export type GameSpinUncheckedUpdateWithoutGameSessionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spinData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  grossWinAmount?: Prisma.IntFieldUpdateOperationsInput | number
  currencyId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  spinNumber?: Prisma.IntFieldUpdateOperationsInput | number
  wagerAmount?: Prisma.IntFieldUpdateOperationsInput | number
  sessionId?: Prisma.StringFieldUpdateOperationsInput | string
  timeStamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  jackpotContributions?: Prisma.JackpotContributionUncheckedUpdateManyWithoutGameSpinNestedInput
  jackpotWin?: Prisma.JackpotWinUncheckedUpdateOneWithoutGameSpinNestedInput
}

export type GameSpinUncheckedUpdateManyWithoutGameSessionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  spinData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  grossWinAmount?: Prisma.IntFieldUpdateOperationsInput | number
  currencyId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  spinNumber?: Prisma.IntFieldUpdateOperationsInput | number
  wagerAmount?: Prisma.IntFieldUpdateOperationsInput | number
  sessionId?: Prisma.StringFieldUpdateOperationsInput | string
  timeStamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type GameSpinCountOutputType
 */

export type GameSpinCountOutputType = {
  jackpotContributions: number
}

export type GameSpinCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  jackpotContributions?: boolean | GameSpinCountOutputTypeCountJackpotContributionsArgs
}

/**
 * GameSpinCountOutputType without action
 */
export type GameSpinCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSpinCountOutputType
   */
  select?: Prisma.GameSpinCountOutputTypeSelect<ExtArgs> | null
}

/**
 * GameSpinCountOutputType without action
 */
export type GameSpinCountOutputTypeCountJackpotContributionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.JackpotContributionWhereInput
}


export type GameSpinSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  spinData?: boolean
  createdAt?: boolean
  grossWinAmount?: boolean
  currencyId?: boolean
  spinNumber?: boolean
  gameSessionId?: boolean
  wagerAmount?: boolean
  sessionId?: boolean
  timeStamp?: boolean
  gameSession?: boolean | Prisma.GameSessionDefaultArgs<ExtArgs>
  jackpotContributions?: boolean | Prisma.GameSpin$jackpotContributionsArgs<ExtArgs>
  jackpotWin?: boolean | Prisma.GameSpin$jackpotWinArgs<ExtArgs>
  _count?: boolean | Prisma.GameSpinCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["gameSpin"]>

export type GameSpinSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  spinData?: boolean
  createdAt?: boolean
  grossWinAmount?: boolean
  currencyId?: boolean
  spinNumber?: boolean
  gameSessionId?: boolean
  wagerAmount?: boolean
  sessionId?: boolean
  timeStamp?: boolean
  gameSession?: boolean | Prisma.GameSessionDefaultArgs<ExtArgs>
}, ExtArgs["result"]["gameSpin"]>

export type GameSpinSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  spinData?: boolean
  createdAt?: boolean
  grossWinAmount?: boolean
  currencyId?: boolean
  spinNumber?: boolean
  gameSessionId?: boolean
  wagerAmount?: boolean
  sessionId?: boolean
  timeStamp?: boolean
  gameSession?: boolean | Prisma.GameSessionDefaultArgs<ExtArgs>
}, ExtArgs["result"]["gameSpin"]>

export type GameSpinSelectScalar = {
  id?: boolean
  spinData?: boolean
  createdAt?: boolean
  grossWinAmount?: boolean
  currencyId?: boolean
  spinNumber?: boolean
  gameSessionId?: boolean
  wagerAmount?: boolean
  sessionId?: boolean
  timeStamp?: boolean
}

export type GameSpinOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "spinData" | "createdAt" | "grossWinAmount" | "currencyId" | "spinNumber" | "gameSessionId" | "wagerAmount" | "sessionId" | "timeStamp", ExtArgs["result"]["gameSpin"]>
export type GameSpinInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  gameSession?: boolean | Prisma.GameSessionDefaultArgs<ExtArgs>
  jackpotContributions?: boolean | Prisma.GameSpin$jackpotContributionsArgs<ExtArgs>
  jackpotWin?: boolean | Prisma.GameSpin$jackpotWinArgs<ExtArgs>
  _count?: boolean | Prisma.GameSpinCountOutputTypeDefaultArgs<ExtArgs>
}
export type GameSpinIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  gameSession?: boolean | Prisma.GameSessionDefaultArgs<ExtArgs>
}
export type GameSpinIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  gameSession?: boolean | Prisma.GameSessionDefaultArgs<ExtArgs>
}

export type $GameSpinPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "GameSpin"
  objects: {
    gameSession: Prisma.$GameSessionPayload<ExtArgs>
    jackpotContributions: Prisma.$JackpotContributionPayload<ExtArgs>[]
    jackpotWin: Prisma.$JackpotWinPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    spinData: runtime.JsonValue | null
    createdAt: Date
    grossWinAmount: number
    currencyId: string | null
    spinNumber: number
    gameSessionId: string
    wagerAmount: number
    sessionId: string
    timeStamp: Date
  }, ExtArgs["result"]["gameSpin"]>
  composites: {}
}

export type GameSpinGetPayload<S extends boolean | null | undefined | GameSpinDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$GameSpinPayload, S>

export type GameSpinCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<GameSpinFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: GameSpinCountAggregateInputType | true
  }

export interface GameSpinDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GameSpin'], meta: { name: 'GameSpin' } }
  /**
   * Find zero or one GameSpin that matches the filter.
   * @param {GameSpinFindUniqueArgs} args - Arguments to find a GameSpin
   * @example
   * // Get one GameSpin
   * const gameSpin = await prisma.gameSpin.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends GameSpinFindUniqueArgs>(args: Prisma.SelectSubset<T, GameSpinFindUniqueArgs<ExtArgs>>): Prisma.Prisma__GameSpinClient<runtime.Types.Result.GetResult<Prisma.$GameSpinPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one GameSpin that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {GameSpinFindUniqueOrThrowArgs} args - Arguments to find a GameSpin
   * @example
   * // Get one GameSpin
   * const gameSpin = await prisma.gameSpin.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends GameSpinFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, GameSpinFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__GameSpinClient<runtime.Types.Result.GetResult<Prisma.$GameSpinPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first GameSpin that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameSpinFindFirstArgs} args - Arguments to find a GameSpin
   * @example
   * // Get one GameSpin
   * const gameSpin = await prisma.gameSpin.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends GameSpinFindFirstArgs>(args?: Prisma.SelectSubset<T, GameSpinFindFirstArgs<ExtArgs>>): Prisma.Prisma__GameSpinClient<runtime.Types.Result.GetResult<Prisma.$GameSpinPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first GameSpin that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameSpinFindFirstOrThrowArgs} args - Arguments to find a GameSpin
   * @example
   * // Get one GameSpin
   * const gameSpin = await prisma.gameSpin.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends GameSpinFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, GameSpinFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__GameSpinClient<runtime.Types.Result.GetResult<Prisma.$GameSpinPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more GameSpins that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameSpinFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all GameSpins
   * const gameSpins = await prisma.gameSpin.findMany()
   * 
   * // Get first 10 GameSpins
   * const gameSpins = await prisma.gameSpin.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const gameSpinWithIdOnly = await prisma.gameSpin.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends GameSpinFindManyArgs>(args?: Prisma.SelectSubset<T, GameSpinFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GameSpinPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a GameSpin.
   * @param {GameSpinCreateArgs} args - Arguments to create a GameSpin.
   * @example
   * // Create one GameSpin
   * const GameSpin = await prisma.gameSpin.create({
   *   data: {
   *     // ... data to create a GameSpin
   *   }
   * })
   * 
   */
  create<T extends GameSpinCreateArgs>(args: Prisma.SelectSubset<T, GameSpinCreateArgs<ExtArgs>>): Prisma.Prisma__GameSpinClient<runtime.Types.Result.GetResult<Prisma.$GameSpinPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many GameSpins.
   * @param {GameSpinCreateManyArgs} args - Arguments to create many GameSpins.
   * @example
   * // Create many GameSpins
   * const gameSpin = await prisma.gameSpin.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends GameSpinCreateManyArgs>(args?: Prisma.SelectSubset<T, GameSpinCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many GameSpins and returns the data saved in the database.
   * @param {GameSpinCreateManyAndReturnArgs} args - Arguments to create many GameSpins.
   * @example
   * // Create many GameSpins
   * const gameSpin = await prisma.gameSpin.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many GameSpins and only return the `id`
   * const gameSpinWithIdOnly = await prisma.gameSpin.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends GameSpinCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, GameSpinCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GameSpinPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a GameSpin.
   * @param {GameSpinDeleteArgs} args - Arguments to delete one GameSpin.
   * @example
   * // Delete one GameSpin
   * const GameSpin = await prisma.gameSpin.delete({
   *   where: {
   *     // ... filter to delete one GameSpin
   *   }
   * })
   * 
   */
  delete<T extends GameSpinDeleteArgs>(args: Prisma.SelectSubset<T, GameSpinDeleteArgs<ExtArgs>>): Prisma.Prisma__GameSpinClient<runtime.Types.Result.GetResult<Prisma.$GameSpinPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one GameSpin.
   * @param {GameSpinUpdateArgs} args - Arguments to update one GameSpin.
   * @example
   * // Update one GameSpin
   * const gameSpin = await prisma.gameSpin.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends GameSpinUpdateArgs>(args: Prisma.SelectSubset<T, GameSpinUpdateArgs<ExtArgs>>): Prisma.Prisma__GameSpinClient<runtime.Types.Result.GetResult<Prisma.$GameSpinPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more GameSpins.
   * @param {GameSpinDeleteManyArgs} args - Arguments to filter GameSpins to delete.
   * @example
   * // Delete a few GameSpins
   * const { count } = await prisma.gameSpin.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends GameSpinDeleteManyArgs>(args?: Prisma.SelectSubset<T, GameSpinDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more GameSpins.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameSpinUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many GameSpins
   * const gameSpin = await prisma.gameSpin.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends GameSpinUpdateManyArgs>(args: Prisma.SelectSubset<T, GameSpinUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more GameSpins and returns the data updated in the database.
   * @param {GameSpinUpdateManyAndReturnArgs} args - Arguments to update many GameSpins.
   * @example
   * // Update many GameSpins
   * const gameSpin = await prisma.gameSpin.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more GameSpins and only return the `id`
   * const gameSpinWithIdOnly = await prisma.gameSpin.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends GameSpinUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, GameSpinUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GameSpinPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one GameSpin.
   * @param {GameSpinUpsertArgs} args - Arguments to update or create a GameSpin.
   * @example
   * // Update or create a GameSpin
   * const gameSpin = await prisma.gameSpin.upsert({
   *   create: {
   *     // ... data to create a GameSpin
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the GameSpin we want to update
   *   }
   * })
   */
  upsert<T extends GameSpinUpsertArgs>(args: Prisma.SelectSubset<T, GameSpinUpsertArgs<ExtArgs>>): Prisma.Prisma__GameSpinClient<runtime.Types.Result.GetResult<Prisma.$GameSpinPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of GameSpins.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameSpinCountArgs} args - Arguments to filter GameSpins to count.
   * @example
   * // Count the number of GameSpins
   * const count = await prisma.gameSpin.count({
   *   where: {
   *     // ... the filter for the GameSpins we want to count
   *   }
   * })
  **/
  count<T extends GameSpinCountArgs>(
    args?: Prisma.Subset<T, GameSpinCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], GameSpinCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a GameSpin.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameSpinAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends GameSpinAggregateArgs>(args: Prisma.Subset<T, GameSpinAggregateArgs>): Prisma.PrismaPromise<GetGameSpinAggregateType<T>>

  /**
   * Group by GameSpin.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameSpinGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends GameSpinGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: GameSpinGroupByArgs['orderBy'] }
      : { orderBy?: GameSpinGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, GameSpinGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameSpinGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the GameSpin model
 */
readonly fields: GameSpinFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for GameSpin.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__GameSpinClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  gameSession<T extends Prisma.GameSessionDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.GameSessionDefaultArgs<ExtArgs>>): Prisma.Prisma__GameSessionClient<runtime.Types.Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  jackpotContributions<T extends Prisma.GameSpin$jackpotContributionsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.GameSpin$jackpotContributionsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$JackpotContributionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  jackpotWin<T extends Prisma.GameSpin$jackpotWinArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.GameSpin$jackpotWinArgs<ExtArgs>>): Prisma.Prisma__JackpotWinClient<runtime.Types.Result.GetResult<Prisma.$JackpotWinPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the GameSpin model
 */
export interface GameSpinFieldRefs {
  readonly id: Prisma.FieldRef<"GameSpin", 'String'>
  readonly spinData: Prisma.FieldRef<"GameSpin", 'Json'>
  readonly createdAt: Prisma.FieldRef<"GameSpin", 'DateTime'>
  readonly grossWinAmount: Prisma.FieldRef<"GameSpin", 'Int'>
  readonly currencyId: Prisma.FieldRef<"GameSpin", 'String'>
  readonly spinNumber: Prisma.FieldRef<"GameSpin", 'Int'>
  readonly gameSessionId: Prisma.FieldRef<"GameSpin", 'String'>
  readonly wagerAmount: Prisma.FieldRef<"GameSpin", 'Int'>
  readonly sessionId: Prisma.FieldRef<"GameSpin", 'String'>
  readonly timeStamp: Prisma.FieldRef<"GameSpin", 'DateTime'>
}
    

// Custom InputTypes
/**
 * GameSpin findUnique
 */
export type GameSpinFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSpin
   */
  select?: Prisma.GameSpinSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameSpin
   */
  omit?: Prisma.GameSpinOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameSpinInclude<ExtArgs> | null
  /**
   * Filter, which GameSpin to fetch.
   */
  where: Prisma.GameSpinWhereUniqueInput
}

/**
 * GameSpin findUniqueOrThrow
 */
export type GameSpinFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSpin
   */
  select?: Prisma.GameSpinSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameSpin
   */
  omit?: Prisma.GameSpinOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameSpinInclude<ExtArgs> | null
  /**
   * Filter, which GameSpin to fetch.
   */
  where: Prisma.GameSpinWhereUniqueInput
}

/**
 * GameSpin findFirst
 */
export type GameSpinFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSpin
   */
  select?: Prisma.GameSpinSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameSpin
   */
  omit?: Prisma.GameSpinOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameSpinInclude<ExtArgs> | null
  /**
   * Filter, which GameSpin to fetch.
   */
  where?: Prisma.GameSpinWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of GameSpins to fetch.
   */
  orderBy?: Prisma.GameSpinOrderByWithRelationInput | Prisma.GameSpinOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for GameSpins.
   */
  cursor?: Prisma.GameSpinWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` GameSpins from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` GameSpins.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of GameSpins.
   */
  distinct?: Prisma.GameSpinScalarFieldEnum | Prisma.GameSpinScalarFieldEnum[]
}

/**
 * GameSpin findFirstOrThrow
 */
export type GameSpinFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSpin
   */
  select?: Prisma.GameSpinSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameSpin
   */
  omit?: Prisma.GameSpinOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameSpinInclude<ExtArgs> | null
  /**
   * Filter, which GameSpin to fetch.
   */
  where?: Prisma.GameSpinWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of GameSpins to fetch.
   */
  orderBy?: Prisma.GameSpinOrderByWithRelationInput | Prisma.GameSpinOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for GameSpins.
   */
  cursor?: Prisma.GameSpinWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` GameSpins from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` GameSpins.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of GameSpins.
   */
  distinct?: Prisma.GameSpinScalarFieldEnum | Prisma.GameSpinScalarFieldEnum[]
}

/**
 * GameSpin findMany
 */
export type GameSpinFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSpin
   */
  select?: Prisma.GameSpinSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameSpin
   */
  omit?: Prisma.GameSpinOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameSpinInclude<ExtArgs> | null
  /**
   * Filter, which GameSpins to fetch.
   */
  where?: Prisma.GameSpinWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of GameSpins to fetch.
   */
  orderBy?: Prisma.GameSpinOrderByWithRelationInput | Prisma.GameSpinOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing GameSpins.
   */
  cursor?: Prisma.GameSpinWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` GameSpins from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` GameSpins.
   */
  skip?: number
  distinct?: Prisma.GameSpinScalarFieldEnum | Prisma.GameSpinScalarFieldEnum[]
}

/**
 * GameSpin create
 */
export type GameSpinCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSpin
   */
  select?: Prisma.GameSpinSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameSpin
   */
  omit?: Prisma.GameSpinOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameSpinInclude<ExtArgs> | null
  /**
   * The data needed to create a GameSpin.
   */
  data: Prisma.XOR<Prisma.GameSpinCreateInput, Prisma.GameSpinUncheckedCreateInput>
}

/**
 * GameSpin createMany
 */
export type GameSpinCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many GameSpins.
   */
  data: Prisma.GameSpinCreateManyInput | Prisma.GameSpinCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * GameSpin createManyAndReturn
 */
export type GameSpinCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSpin
   */
  select?: Prisma.GameSpinSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the GameSpin
   */
  omit?: Prisma.GameSpinOmit<ExtArgs> | null
  /**
   * The data used to create many GameSpins.
   */
  data: Prisma.GameSpinCreateManyInput | Prisma.GameSpinCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameSpinIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * GameSpin update
 */
export type GameSpinUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSpin
   */
  select?: Prisma.GameSpinSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameSpin
   */
  omit?: Prisma.GameSpinOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameSpinInclude<ExtArgs> | null
  /**
   * The data needed to update a GameSpin.
   */
  data: Prisma.XOR<Prisma.GameSpinUpdateInput, Prisma.GameSpinUncheckedUpdateInput>
  /**
   * Choose, which GameSpin to update.
   */
  where: Prisma.GameSpinWhereUniqueInput
}

/**
 * GameSpin updateMany
 */
export type GameSpinUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update GameSpins.
   */
  data: Prisma.XOR<Prisma.GameSpinUpdateManyMutationInput, Prisma.GameSpinUncheckedUpdateManyInput>
  /**
   * Filter which GameSpins to update
   */
  where?: Prisma.GameSpinWhereInput
  /**
   * Limit how many GameSpins to update.
   */
  limit?: number
}

/**
 * GameSpin updateManyAndReturn
 */
export type GameSpinUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSpin
   */
  select?: Prisma.GameSpinSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the GameSpin
   */
  omit?: Prisma.GameSpinOmit<ExtArgs> | null
  /**
   * The data used to update GameSpins.
   */
  data: Prisma.XOR<Prisma.GameSpinUpdateManyMutationInput, Prisma.GameSpinUncheckedUpdateManyInput>
  /**
   * Filter which GameSpins to update
   */
  where?: Prisma.GameSpinWhereInput
  /**
   * Limit how many GameSpins to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameSpinIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * GameSpin upsert
 */
export type GameSpinUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSpin
   */
  select?: Prisma.GameSpinSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameSpin
   */
  omit?: Prisma.GameSpinOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameSpinInclude<ExtArgs> | null
  /**
   * The filter to search for the GameSpin to update in case it exists.
   */
  where: Prisma.GameSpinWhereUniqueInput
  /**
   * In case the GameSpin found by the `where` argument doesn't exist, create a new GameSpin with this data.
   */
  create: Prisma.XOR<Prisma.GameSpinCreateInput, Prisma.GameSpinUncheckedCreateInput>
  /**
   * In case the GameSpin was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.GameSpinUpdateInput, Prisma.GameSpinUncheckedUpdateInput>
}

/**
 * GameSpin delete
 */
export type GameSpinDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSpin
   */
  select?: Prisma.GameSpinSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameSpin
   */
  omit?: Prisma.GameSpinOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameSpinInclude<ExtArgs> | null
  /**
   * Filter which GameSpin to delete.
   */
  where: Prisma.GameSpinWhereUniqueInput
}

/**
 * GameSpin deleteMany
 */
export type GameSpinDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which GameSpins to delete
   */
  where?: Prisma.GameSpinWhereInput
  /**
   * Limit how many GameSpins to delete.
   */
  limit?: number
}

/**
 * GameSpin.jackpotContributions
 */
export type GameSpin$jackpotContributionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the JackpotContribution
   */
  select?: Prisma.JackpotContributionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the JackpotContribution
   */
  omit?: Prisma.JackpotContributionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.JackpotContributionInclude<ExtArgs> | null
  where?: Prisma.JackpotContributionWhereInput
  orderBy?: Prisma.JackpotContributionOrderByWithRelationInput | Prisma.JackpotContributionOrderByWithRelationInput[]
  cursor?: Prisma.JackpotContributionWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.JackpotContributionScalarFieldEnum | Prisma.JackpotContributionScalarFieldEnum[]
}

/**
 * GameSpin.jackpotWin
 */
export type GameSpin$jackpotWinArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the JackpotWin
   */
  select?: Prisma.JackpotWinSelect<ExtArgs> | null
  /**
   * Omit specific fields from the JackpotWin
   */
  omit?: Prisma.JackpotWinOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.JackpotWinInclude<ExtArgs> | null
  where?: Prisma.JackpotWinWhereInput
}

/**
 * GameSpin without action
 */
export type GameSpinDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSpin
   */
  select?: Prisma.GameSpinSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameSpin
   */
  omit?: Prisma.GameSpinOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameSpinInclude<ExtArgs> | null
}
