
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `JackpotContribution` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model JackpotContribution
 * 
 */
export type JackpotContributionModel = runtime.Types.Result.DefaultSelection<Prisma.$JackpotContributionPayload>

export type AggregateJackpotContribution = {
  _count: JackpotContributionCountAggregateOutputType | null
  _avg: JackpotContributionAvgAggregateOutputType | null
  _sum: JackpotContributionSumAggregateOutputType | null
  _min: JackpotContributionMinAggregateOutputType | null
  _max: JackpotContributionMaxAggregateOutputType | null
}

export type JackpotContributionAvgAggregateOutputType = {
  contributionAmountCoins: number | null
}

export type JackpotContributionSumAggregateOutputType = {
  contributionAmountCoins: number | null
}

export type JackpotContributionMinAggregateOutputType = {
  id: string | null
  jackpotId: string | null
  gameSpinId: string | null
  contributionAmountCoins: number | null
  createdAt: Date | null
}

export type JackpotContributionMaxAggregateOutputType = {
  id: string | null
  jackpotId: string | null
  gameSpinId: string | null
  contributionAmountCoins: number | null
  createdAt: Date | null
}

export type JackpotContributionCountAggregateOutputType = {
  id: number
  jackpotId: number
  gameSpinId: number
  contributionAmountCoins: number
  createdAt: number
  _all: number
}


export type JackpotContributionAvgAggregateInputType = {
  contributionAmountCoins?: true
}

export type JackpotContributionSumAggregateInputType = {
  contributionAmountCoins?: true
}

export type JackpotContributionMinAggregateInputType = {
  id?: true
  jackpotId?: true
  gameSpinId?: true
  contributionAmountCoins?: true
  createdAt?: true
}

export type JackpotContributionMaxAggregateInputType = {
  id?: true
  jackpotId?: true
  gameSpinId?: true
  contributionAmountCoins?: true
  createdAt?: true
}

export type JackpotContributionCountAggregateInputType = {
  id?: true
  jackpotId?: true
  gameSpinId?: true
  contributionAmountCoins?: true
  createdAt?: true
  _all?: true
}

export type JackpotContributionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which JackpotContribution to aggregate.
   */
  where?: Prisma.JackpotContributionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of JackpotContributions to fetch.
   */
  orderBy?: Prisma.JackpotContributionOrderByWithRelationInput | Prisma.JackpotContributionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.JackpotContributionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` JackpotContributions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` JackpotContributions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned JackpotContributions
  **/
  _count?: true | JackpotContributionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: JackpotContributionAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: JackpotContributionSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: JackpotContributionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: JackpotContributionMaxAggregateInputType
}

export type GetJackpotContributionAggregateType<T extends JackpotContributionAggregateArgs> = {
      [P in keyof T & keyof AggregateJackpotContribution]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateJackpotContribution[P]>
    : Prisma.GetScalarType<T[P], AggregateJackpotContribution[P]>
}




export type JackpotContributionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.JackpotContributionWhereInput
  orderBy?: Prisma.JackpotContributionOrderByWithAggregationInput | Prisma.JackpotContributionOrderByWithAggregationInput[]
  by: Prisma.JackpotContributionScalarFieldEnum[] | Prisma.JackpotContributionScalarFieldEnum
  having?: Prisma.JackpotContributionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: JackpotContributionCountAggregateInputType | true
  _avg?: JackpotContributionAvgAggregateInputType
  _sum?: JackpotContributionSumAggregateInputType
  _min?: JackpotContributionMinAggregateInputType
  _max?: JackpotContributionMaxAggregateInputType
}

export type JackpotContributionGroupByOutputType = {
  id: string
  jackpotId: string
  gameSpinId: string
  contributionAmountCoins: number
  createdAt: Date
  _count: JackpotContributionCountAggregateOutputType | null
  _avg: JackpotContributionAvgAggregateOutputType | null
  _sum: JackpotContributionSumAggregateOutputType | null
  _min: JackpotContributionMinAggregateOutputType | null
  _max: JackpotContributionMaxAggregateOutputType | null
}

type GetJackpotContributionGroupByPayload<T extends JackpotContributionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<JackpotContributionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof JackpotContributionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], JackpotContributionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], JackpotContributionGroupByOutputType[P]>
      }
    >
  > 



export type JackpotContributionWhereInput = {
  AND?: Prisma.JackpotContributionWhereInput | Prisma.JackpotContributionWhereInput[]
  OR?: Prisma.JackpotContributionWhereInput[]
  NOT?: Prisma.JackpotContributionWhereInput | Prisma.JackpotContributionWhereInput[]
  id?: Prisma.StringFilter<"JackpotContribution"> | string
  jackpotId?: Prisma.StringFilter<"JackpotContribution"> | string
  gameSpinId?: Prisma.StringFilter<"JackpotContribution"> | string
  contributionAmountCoins?: Prisma.IntFilter<"JackpotContribution"> | number
  createdAt?: Prisma.DateTimeFilter<"JackpotContribution"> | Date | string
  gameSpin?: Prisma.XOR<Prisma.GameSpinScalarRelationFilter, Prisma.GameSpinWhereInput>
  jackpot?: Prisma.XOR<Prisma.JackpotScalarRelationFilter, Prisma.JackpotWhereInput>
}

export type JackpotContributionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  jackpotId?: Prisma.SortOrder
  gameSpinId?: Prisma.SortOrder
  contributionAmountCoins?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  gameSpin?: Prisma.GameSpinOrderByWithRelationInput
  jackpot?: Prisma.JackpotOrderByWithRelationInput
}

export type JackpotContributionWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  jackpotId_gameSpinId?: Prisma.JackpotContributionJackpotIdGameSpinIdCompoundUniqueInput
  AND?: Prisma.JackpotContributionWhereInput | Prisma.JackpotContributionWhereInput[]
  OR?: Prisma.JackpotContributionWhereInput[]
  NOT?: Prisma.JackpotContributionWhereInput | Prisma.JackpotContributionWhereInput[]
  jackpotId?: Prisma.StringFilter<"JackpotContribution"> | string
  gameSpinId?: Prisma.StringFilter<"JackpotContribution"> | string
  contributionAmountCoins?: Prisma.IntFilter<"JackpotContribution"> | number
  createdAt?: Prisma.DateTimeFilter<"JackpotContribution"> | Date | string
  gameSpin?: Prisma.XOR<Prisma.GameSpinScalarRelationFilter, Prisma.GameSpinWhereInput>
  jackpot?: Prisma.XOR<Prisma.JackpotScalarRelationFilter, Prisma.JackpotWhereInput>
}, "id" | "jackpotId_gameSpinId">

export type JackpotContributionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  jackpotId?: Prisma.SortOrder
  gameSpinId?: Prisma.SortOrder
  contributionAmountCoins?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.JackpotContributionCountOrderByAggregateInput
  _avg?: Prisma.JackpotContributionAvgOrderByAggregateInput
  _max?: Prisma.JackpotContributionMaxOrderByAggregateInput
  _min?: Prisma.JackpotContributionMinOrderByAggregateInput
  _sum?: Prisma.JackpotContributionSumOrderByAggregateInput
}

export type JackpotContributionScalarWhereWithAggregatesInput = {
  AND?: Prisma.JackpotContributionScalarWhereWithAggregatesInput | Prisma.JackpotContributionScalarWhereWithAggregatesInput[]
  OR?: Prisma.JackpotContributionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.JackpotContributionScalarWhereWithAggregatesInput | Prisma.JackpotContributionScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"JackpotContribution"> | string
  jackpotId?: Prisma.StringWithAggregatesFilter<"JackpotContribution"> | string
  gameSpinId?: Prisma.StringWithAggregatesFilter<"JackpotContribution"> | string
  contributionAmountCoins?: Prisma.IntWithAggregatesFilter<"JackpotContribution"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"JackpotContribution"> | Date | string
}

export type JackpotContributionCreateInput = {
  id?: string
  contributionAmountCoins: number
  createdAt?: Date | string
  gameSpin: Prisma.GameSpinCreateNestedOneWithoutJackpotContributionsInput
  jackpot: Prisma.JackpotCreateNestedOneWithoutContributionsInput
}

export type JackpotContributionUncheckedCreateInput = {
  id?: string
  jackpotId: string
  gameSpinId: string
  contributionAmountCoins: number
  createdAt?: Date | string
}

export type JackpotContributionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  contributionAmountCoins?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  gameSpin?: Prisma.GameSpinUpdateOneRequiredWithoutJackpotContributionsNestedInput
  jackpot?: Prisma.JackpotUpdateOneRequiredWithoutContributionsNestedInput
}

export type JackpotContributionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  jackpotId?: Prisma.StringFieldUpdateOperationsInput | string
  gameSpinId?: Prisma.StringFieldUpdateOperationsInput | string
  contributionAmountCoins?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type JackpotContributionCreateManyInput = {
  id?: string
  jackpotId: string
  gameSpinId: string
  contributionAmountCoins: number
  createdAt?: Date | string
}

export type JackpotContributionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  contributionAmountCoins?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type JackpotContributionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  jackpotId?: Prisma.StringFieldUpdateOperationsInput | string
  gameSpinId?: Prisma.StringFieldUpdateOperationsInput | string
  contributionAmountCoins?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type JackpotContributionListRelationFilter = {
  every?: Prisma.JackpotContributionWhereInput
  some?: Prisma.JackpotContributionWhereInput
  none?: Prisma.JackpotContributionWhereInput
}

export type JackpotContributionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type JackpotContributionJackpotIdGameSpinIdCompoundUniqueInput = {
  jackpotId: string
  gameSpinId: string
}

export type JackpotContributionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  jackpotId?: Prisma.SortOrder
  gameSpinId?: Prisma.SortOrder
  contributionAmountCoins?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type JackpotContributionAvgOrderByAggregateInput = {
  contributionAmountCoins?: Prisma.SortOrder
}

export type JackpotContributionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  jackpotId?: Prisma.SortOrder
  gameSpinId?: Prisma.SortOrder
  contributionAmountCoins?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type JackpotContributionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  jackpotId?: Prisma.SortOrder
  gameSpinId?: Prisma.SortOrder
  contributionAmountCoins?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type JackpotContributionSumOrderByAggregateInput = {
  contributionAmountCoins?: Prisma.SortOrder
}

export type JackpotContributionCreateNestedManyWithoutGameSpinInput = {
  create?: Prisma.XOR<Prisma.JackpotContributionCreateWithoutGameSpinInput, Prisma.JackpotContributionUncheckedCreateWithoutGameSpinInput> | Prisma.JackpotContributionCreateWithoutGameSpinInput[] | Prisma.JackpotContributionUncheckedCreateWithoutGameSpinInput[]
  connectOrCreate?: Prisma.JackpotContributionCreateOrConnectWithoutGameSpinInput | Prisma.JackpotContributionCreateOrConnectWithoutGameSpinInput[]
  createMany?: Prisma.JackpotContributionCreateManyGameSpinInputEnvelope
  connect?: Prisma.JackpotContributionWhereUniqueInput | Prisma.JackpotContributionWhereUniqueInput[]
}

export type JackpotContributionUncheckedCreateNestedManyWithoutGameSpinInput = {
  create?: Prisma.XOR<Prisma.JackpotContributionCreateWithoutGameSpinInput, Prisma.JackpotContributionUncheckedCreateWithoutGameSpinInput> | Prisma.JackpotContributionCreateWithoutGameSpinInput[] | Prisma.JackpotContributionUncheckedCreateWithoutGameSpinInput[]
  connectOrCreate?: Prisma.JackpotContributionCreateOrConnectWithoutGameSpinInput | Prisma.JackpotContributionCreateOrConnectWithoutGameSpinInput[]
  createMany?: Prisma.JackpotContributionCreateManyGameSpinInputEnvelope
  connect?: Prisma.JackpotContributionWhereUniqueInput | Prisma.JackpotContributionWhereUniqueInput[]
}

export type JackpotContributionUpdateManyWithoutGameSpinNestedInput = {
  create?: Prisma.XOR<Prisma.JackpotContributionCreateWithoutGameSpinInput, Prisma.JackpotContributionUncheckedCreateWithoutGameSpinInput> | Prisma.JackpotContributionCreateWithoutGameSpinInput[] | Prisma.JackpotContributionUncheckedCreateWithoutGameSpinInput[]
  connectOrCreate?: Prisma.JackpotContributionCreateOrConnectWithoutGameSpinInput | Prisma.JackpotContributionCreateOrConnectWithoutGameSpinInput[]
  upsert?: Prisma.JackpotContributionUpsertWithWhereUniqueWithoutGameSpinInput | Prisma.JackpotContributionUpsertWithWhereUniqueWithoutGameSpinInput[]
  createMany?: Prisma.JackpotContributionCreateManyGameSpinInputEnvelope
  set?: Prisma.JackpotContributionWhereUniqueInput | Prisma.JackpotContributionWhereUniqueInput[]
  disconnect?: Prisma.JackpotContributionWhereUniqueInput | Prisma.JackpotContributionWhereUniqueInput[]
  delete?: Prisma.JackpotContributionWhereUniqueInput | Prisma.JackpotContributionWhereUniqueInput[]
  connect?: Prisma.JackpotContributionWhereUniqueInput | Prisma.JackpotContributionWhereUniqueInput[]
  update?: Prisma.JackpotContributionUpdateWithWhereUniqueWithoutGameSpinInput | Prisma.JackpotContributionUpdateWithWhereUniqueWithoutGameSpinInput[]
  updateMany?: Prisma.JackpotContributionUpdateManyWithWhereWithoutGameSpinInput | Prisma.JackpotContributionUpdateManyWithWhereWithoutGameSpinInput[]
  deleteMany?: Prisma.JackpotContributionScalarWhereInput | Prisma.JackpotContributionScalarWhereInput[]
}

export type JackpotContributionUncheckedUpdateManyWithoutGameSpinNestedInput = {
  create?: Prisma.XOR<Prisma.JackpotContributionCreateWithoutGameSpinInput, Prisma.JackpotContributionUncheckedCreateWithoutGameSpinInput> | Prisma.JackpotContributionCreateWithoutGameSpinInput[] | Prisma.JackpotContributionUncheckedCreateWithoutGameSpinInput[]
  connectOrCreate?: Prisma.JackpotContributionCreateOrConnectWithoutGameSpinInput | Prisma.JackpotContributionCreateOrConnectWithoutGameSpinInput[]
  upsert?: Prisma.JackpotContributionUpsertWithWhereUniqueWithoutGameSpinInput | Prisma.JackpotContributionUpsertWithWhereUniqueWithoutGameSpinInput[]
  createMany?: Prisma.JackpotContributionCreateManyGameSpinInputEnvelope
  set?: Prisma.JackpotContributionWhereUniqueInput | Prisma.JackpotContributionWhereUniqueInput[]
  disconnect?: Prisma.JackpotContributionWhereUniqueInput | Prisma.JackpotContributionWhereUniqueInput[]
  delete?: Prisma.JackpotContributionWhereUniqueInput | Prisma.JackpotContributionWhereUniqueInput[]
  connect?: Prisma.JackpotContributionWhereUniqueInput | Prisma.JackpotContributionWhereUniqueInput[]
  update?: Prisma.JackpotContributionUpdateWithWhereUniqueWithoutGameSpinInput | Prisma.JackpotContributionUpdateWithWhereUniqueWithoutGameSpinInput[]
  updateMany?: Prisma.JackpotContributionUpdateManyWithWhereWithoutGameSpinInput | Prisma.JackpotContributionUpdateManyWithWhereWithoutGameSpinInput[]
  deleteMany?: Prisma.JackpotContributionScalarWhereInput | Prisma.JackpotContributionScalarWhereInput[]
}

export type JackpotContributionCreateNestedManyWithoutJackpotInput = {
  create?: Prisma.XOR<Prisma.JackpotContributionCreateWithoutJackpotInput, Prisma.JackpotContributionUncheckedCreateWithoutJackpotInput> | Prisma.JackpotContributionCreateWithoutJackpotInput[] | Prisma.JackpotContributionUncheckedCreateWithoutJackpotInput[]
  connectOrCreate?: Prisma.JackpotContributionCreateOrConnectWithoutJackpotInput | Prisma.JackpotContributionCreateOrConnectWithoutJackpotInput[]
  createMany?: Prisma.JackpotContributionCreateManyJackpotInputEnvelope
  connect?: Prisma.JackpotContributionWhereUniqueInput | Prisma.JackpotContributionWhereUniqueInput[]
}

export type JackpotContributionUncheckedCreateNestedManyWithoutJackpotInput = {
  create?: Prisma.XOR<Prisma.JackpotContributionCreateWithoutJackpotInput, Prisma.JackpotContributionUncheckedCreateWithoutJackpotInput> | Prisma.JackpotContributionCreateWithoutJackpotInput[] | Prisma.JackpotContributionUncheckedCreateWithoutJackpotInput[]
  connectOrCreate?: Prisma.JackpotContributionCreateOrConnectWithoutJackpotInput | Prisma.JackpotContributionCreateOrConnectWithoutJackpotInput[]
  createMany?: Prisma.JackpotContributionCreateManyJackpotInputEnvelope
  connect?: Prisma.JackpotContributionWhereUniqueInput | Prisma.JackpotContributionWhereUniqueInput[]
}

export type JackpotContributionUpdateManyWithoutJackpotNestedInput = {
  create?: Prisma.XOR<Prisma.JackpotContributionCreateWithoutJackpotInput, Prisma.JackpotContributionUncheckedCreateWithoutJackpotInput> | Prisma.JackpotContributionCreateWithoutJackpotInput[] | Prisma.JackpotContributionUncheckedCreateWithoutJackpotInput[]
  connectOrCreate?: Prisma.JackpotContributionCreateOrConnectWithoutJackpotInput | Prisma.JackpotContributionCreateOrConnectWithoutJackpotInput[]
  upsert?: Prisma.JackpotContributionUpsertWithWhereUniqueWithoutJackpotInput | Prisma.JackpotContributionUpsertWithWhereUniqueWithoutJackpotInput[]
  createMany?: Prisma.JackpotContributionCreateManyJackpotInputEnvelope
  set?: Prisma.JackpotContributionWhereUniqueInput | Prisma.JackpotContributionWhereUniqueInput[]
  disconnect?: Prisma.JackpotContributionWhereUniqueInput | Prisma.JackpotContributionWhereUniqueInput[]
  delete?: Prisma.JackpotContributionWhereUniqueInput | Prisma.JackpotContributionWhereUniqueInput[]
  connect?: Prisma.JackpotContributionWhereUniqueInput | Prisma.JackpotContributionWhereUniqueInput[]
  update?: Prisma.JackpotContributionUpdateWithWhereUniqueWithoutJackpotInput | Prisma.JackpotContributionUpdateWithWhereUniqueWithoutJackpotInput[]
  updateMany?: Prisma.JackpotContributionUpdateManyWithWhereWithoutJackpotInput | Prisma.JackpotContributionUpdateManyWithWhereWithoutJackpotInput[]
  deleteMany?: Prisma.JackpotContributionScalarWhereInput | Prisma.JackpotContributionScalarWhereInput[]
}

export type JackpotContributionUncheckedUpdateManyWithoutJackpotNestedInput = {
  create?: Prisma.XOR<Prisma.JackpotContributionCreateWithoutJackpotInput, Prisma.JackpotContributionUncheckedCreateWithoutJackpotInput> | Prisma.JackpotContributionCreateWithoutJackpotInput[] | Prisma.JackpotContributionUncheckedCreateWithoutJackpotInput[]
  connectOrCreate?: Prisma.JackpotContributionCreateOrConnectWithoutJackpotInput | Prisma.JackpotContributionCreateOrConnectWithoutJackpotInput[]
  upsert?: Prisma.JackpotContributionUpsertWithWhereUniqueWithoutJackpotInput | Prisma.JackpotContributionUpsertWithWhereUniqueWithoutJackpotInput[]
  createMany?: Prisma.JackpotContributionCreateManyJackpotInputEnvelope
  set?: Prisma.JackpotContributionWhereUniqueInput | Prisma.JackpotContributionWhereUniqueInput[]
  disconnect?: Prisma.JackpotContributionWhereUniqueInput | Prisma.JackpotContributionWhereUniqueInput[]
  delete?: Prisma.JackpotContributionWhereUniqueInput | Prisma.JackpotContributionWhereUniqueInput[]
  connect?: Prisma.JackpotContributionWhereUniqueInput | Prisma.JackpotContributionWhereUniqueInput[]
  update?: Prisma.JackpotContributionUpdateWithWhereUniqueWithoutJackpotInput | Prisma.JackpotContributionUpdateWithWhereUniqueWithoutJackpotInput[]
  updateMany?: Prisma.JackpotContributionUpdateManyWithWhereWithoutJackpotInput | Prisma.JackpotContributionUpdateManyWithWhereWithoutJackpotInput[]
  deleteMany?: Prisma.JackpotContributionScalarWhereInput | Prisma.JackpotContributionScalarWhereInput[]
}

export type JackpotContributionCreateWithoutGameSpinInput = {
  id?: string
  contributionAmountCoins: number
  createdAt?: Date | string
  jackpot: Prisma.JackpotCreateNestedOneWithoutContributionsInput
}

export type JackpotContributionUncheckedCreateWithoutGameSpinInput = {
  id?: string
  jackpotId: string
  contributionAmountCoins: number
  createdAt?: Date | string
}

export type JackpotContributionCreateOrConnectWithoutGameSpinInput = {
  where: Prisma.JackpotContributionWhereUniqueInput
  create: Prisma.XOR<Prisma.JackpotContributionCreateWithoutGameSpinInput, Prisma.JackpotContributionUncheckedCreateWithoutGameSpinInput>
}

export type JackpotContributionCreateManyGameSpinInputEnvelope = {
  data: Prisma.JackpotContributionCreateManyGameSpinInput | Prisma.JackpotContributionCreateManyGameSpinInput[]
  skipDuplicates?: boolean
}

export type JackpotContributionUpsertWithWhereUniqueWithoutGameSpinInput = {
  where: Prisma.JackpotContributionWhereUniqueInput
  update: Prisma.XOR<Prisma.JackpotContributionUpdateWithoutGameSpinInput, Prisma.JackpotContributionUncheckedUpdateWithoutGameSpinInput>
  create: Prisma.XOR<Prisma.JackpotContributionCreateWithoutGameSpinInput, Prisma.JackpotContributionUncheckedCreateWithoutGameSpinInput>
}

export type JackpotContributionUpdateWithWhereUniqueWithoutGameSpinInput = {
  where: Prisma.JackpotContributionWhereUniqueInput
  data: Prisma.XOR<Prisma.JackpotContributionUpdateWithoutGameSpinInput, Prisma.JackpotContributionUncheckedUpdateWithoutGameSpinInput>
}

export type JackpotContributionUpdateManyWithWhereWithoutGameSpinInput = {
  where: Prisma.JackpotContributionScalarWhereInput
  data: Prisma.XOR<Prisma.JackpotContributionUpdateManyMutationInput, Prisma.JackpotContributionUncheckedUpdateManyWithoutGameSpinInput>
}

export type JackpotContributionScalarWhereInput = {
  AND?: Prisma.JackpotContributionScalarWhereInput | Prisma.JackpotContributionScalarWhereInput[]
  OR?: Prisma.JackpotContributionScalarWhereInput[]
  NOT?: Prisma.JackpotContributionScalarWhereInput | Prisma.JackpotContributionScalarWhereInput[]
  id?: Prisma.StringFilter<"JackpotContribution"> | string
  jackpotId?: Prisma.StringFilter<"JackpotContribution"> | string
  gameSpinId?: Prisma.StringFilter<"JackpotContribution"> | string
  contributionAmountCoins?: Prisma.IntFilter<"JackpotContribution"> | number
  createdAt?: Prisma.DateTimeFilter<"JackpotContribution"> | Date | string
}

export type JackpotContributionCreateWithoutJackpotInput = {
  id?: string
  contributionAmountCoins: number
  createdAt?: Date | string
  gameSpin: Prisma.GameSpinCreateNestedOneWithoutJackpotContributionsInput
}

export type JackpotContributionUncheckedCreateWithoutJackpotInput = {
  id?: string
  gameSpinId: string
  contributionAmountCoins: number
  createdAt?: Date | string
}

export type JackpotContributionCreateOrConnectWithoutJackpotInput = {
  where: Prisma.JackpotContributionWhereUniqueInput
  create: Prisma.XOR<Prisma.JackpotContributionCreateWithoutJackpotInput, Prisma.JackpotContributionUncheckedCreateWithoutJackpotInput>
}

export type JackpotContributionCreateManyJackpotInputEnvelope = {
  data: Prisma.JackpotContributionCreateManyJackpotInput | Prisma.JackpotContributionCreateManyJackpotInput[]
  skipDuplicates?: boolean
}

export type JackpotContributionUpsertWithWhereUniqueWithoutJackpotInput = {
  where: Prisma.JackpotContributionWhereUniqueInput
  update: Prisma.XOR<Prisma.JackpotContributionUpdateWithoutJackpotInput, Prisma.JackpotContributionUncheckedUpdateWithoutJackpotInput>
  create: Prisma.XOR<Prisma.JackpotContributionCreateWithoutJackpotInput, Prisma.JackpotContributionUncheckedCreateWithoutJackpotInput>
}

export type JackpotContributionUpdateWithWhereUniqueWithoutJackpotInput = {
  where: Prisma.JackpotContributionWhereUniqueInput
  data: Prisma.XOR<Prisma.JackpotContributionUpdateWithoutJackpotInput, Prisma.JackpotContributionUncheckedUpdateWithoutJackpotInput>
}

export type JackpotContributionUpdateManyWithWhereWithoutJackpotInput = {
  where: Prisma.JackpotContributionScalarWhereInput
  data: Prisma.XOR<Prisma.JackpotContributionUpdateManyMutationInput, Prisma.JackpotContributionUncheckedUpdateManyWithoutJackpotInput>
}

export type JackpotContributionCreateManyGameSpinInput = {
  id?: string
  jackpotId: string
  contributionAmountCoins: number
  createdAt?: Date | string
}

export type JackpotContributionUpdateWithoutGameSpinInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  contributionAmountCoins?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  jackpot?: Prisma.JackpotUpdateOneRequiredWithoutContributionsNestedInput
}

export type JackpotContributionUncheckedUpdateWithoutGameSpinInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  jackpotId?: Prisma.StringFieldUpdateOperationsInput | string
  contributionAmountCoins?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type JackpotContributionUncheckedUpdateManyWithoutGameSpinInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  jackpotId?: Prisma.StringFieldUpdateOperationsInput | string
  contributionAmountCoins?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type JackpotContributionCreateManyJackpotInput = {
  id?: string
  gameSpinId: string
  contributionAmountCoins: number
  createdAt?: Date | string
}

export type JackpotContributionUpdateWithoutJackpotInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  contributionAmountCoins?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  gameSpin?: Prisma.GameSpinUpdateOneRequiredWithoutJackpotContributionsNestedInput
}

export type JackpotContributionUncheckedUpdateWithoutJackpotInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  gameSpinId?: Prisma.StringFieldUpdateOperationsInput | string
  contributionAmountCoins?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type JackpotContributionUncheckedUpdateManyWithoutJackpotInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  gameSpinId?: Prisma.StringFieldUpdateOperationsInput | string
  contributionAmountCoins?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type JackpotContributionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  jackpotId?: boolean
  gameSpinId?: boolean
  contributionAmountCoins?: boolean
  createdAt?: boolean
  gameSpin?: boolean | Prisma.GameSpinDefaultArgs<ExtArgs>
  jackpot?: boolean | Prisma.JackpotDefaultArgs<ExtArgs>
}, ExtArgs["result"]["jackpotContribution"]>

export type JackpotContributionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  jackpotId?: boolean
  gameSpinId?: boolean
  contributionAmountCoins?: boolean
  createdAt?: boolean
  gameSpin?: boolean | Prisma.GameSpinDefaultArgs<ExtArgs>
  jackpot?: boolean | Prisma.JackpotDefaultArgs<ExtArgs>
}, ExtArgs["result"]["jackpotContribution"]>

export type JackpotContributionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  jackpotId?: boolean
  gameSpinId?: boolean
  contributionAmountCoins?: boolean
  createdAt?: boolean
  gameSpin?: boolean | Prisma.GameSpinDefaultArgs<ExtArgs>
  jackpot?: boolean | Prisma.JackpotDefaultArgs<ExtArgs>
}, ExtArgs["result"]["jackpotContribution"]>

export type JackpotContributionSelectScalar = {
  id?: boolean
  jackpotId?: boolean
  gameSpinId?: boolean
  contributionAmountCoins?: boolean
  createdAt?: boolean
}

export type JackpotContributionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "jackpotId" | "gameSpinId" | "contributionAmountCoins" | "createdAt", ExtArgs["result"]["jackpotContribution"]>
export type JackpotContributionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  gameSpin?: boolean | Prisma.GameSpinDefaultArgs<ExtArgs>
  jackpot?: boolean | Prisma.JackpotDefaultArgs<ExtArgs>
}
export type JackpotContributionIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  gameSpin?: boolean | Prisma.GameSpinDefaultArgs<ExtArgs>
  jackpot?: boolean | Prisma.JackpotDefaultArgs<ExtArgs>
}
export type JackpotContributionIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  gameSpin?: boolean | Prisma.GameSpinDefaultArgs<ExtArgs>
  jackpot?: boolean | Prisma.JackpotDefaultArgs<ExtArgs>
}

export type $JackpotContributionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "JackpotContribution"
  objects: {
    gameSpin: Prisma.$GameSpinPayload<ExtArgs>
    jackpot: Prisma.$JackpotPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    jackpotId: string
    gameSpinId: string
    contributionAmountCoins: number
    createdAt: Date
  }, ExtArgs["result"]["jackpotContribution"]>
  composites: {}
}

export type JackpotContributionGetPayload<S extends boolean | null | undefined | JackpotContributionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$JackpotContributionPayload, S>

export type JackpotContributionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<JackpotContributionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: JackpotContributionCountAggregateInputType | true
  }

export interface JackpotContributionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['JackpotContribution'], meta: { name: 'JackpotContribution' } }
  /**
   * Find zero or one JackpotContribution that matches the filter.
   * @param {JackpotContributionFindUniqueArgs} args - Arguments to find a JackpotContribution
   * @example
   * // Get one JackpotContribution
   * const jackpotContribution = await prisma.jackpotContribution.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends JackpotContributionFindUniqueArgs>(args: Prisma.SelectSubset<T, JackpotContributionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__JackpotContributionClient<runtime.Types.Result.GetResult<Prisma.$JackpotContributionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one JackpotContribution that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {JackpotContributionFindUniqueOrThrowArgs} args - Arguments to find a JackpotContribution
   * @example
   * // Get one JackpotContribution
   * const jackpotContribution = await prisma.jackpotContribution.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends JackpotContributionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, JackpotContributionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__JackpotContributionClient<runtime.Types.Result.GetResult<Prisma.$JackpotContributionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first JackpotContribution that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {JackpotContributionFindFirstArgs} args - Arguments to find a JackpotContribution
   * @example
   * // Get one JackpotContribution
   * const jackpotContribution = await prisma.jackpotContribution.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends JackpotContributionFindFirstArgs>(args?: Prisma.SelectSubset<T, JackpotContributionFindFirstArgs<ExtArgs>>): Prisma.Prisma__JackpotContributionClient<runtime.Types.Result.GetResult<Prisma.$JackpotContributionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first JackpotContribution that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {JackpotContributionFindFirstOrThrowArgs} args - Arguments to find a JackpotContribution
   * @example
   * // Get one JackpotContribution
   * const jackpotContribution = await prisma.jackpotContribution.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends JackpotContributionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, JackpotContributionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__JackpotContributionClient<runtime.Types.Result.GetResult<Prisma.$JackpotContributionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more JackpotContributions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {JackpotContributionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all JackpotContributions
   * const jackpotContributions = await prisma.jackpotContribution.findMany()
   * 
   * // Get first 10 JackpotContributions
   * const jackpotContributions = await prisma.jackpotContribution.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const jackpotContributionWithIdOnly = await prisma.jackpotContribution.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends JackpotContributionFindManyArgs>(args?: Prisma.SelectSubset<T, JackpotContributionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$JackpotContributionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a JackpotContribution.
   * @param {JackpotContributionCreateArgs} args - Arguments to create a JackpotContribution.
   * @example
   * // Create one JackpotContribution
   * const JackpotContribution = await prisma.jackpotContribution.create({
   *   data: {
   *     // ... data to create a JackpotContribution
   *   }
   * })
   * 
   */
  create<T extends JackpotContributionCreateArgs>(args: Prisma.SelectSubset<T, JackpotContributionCreateArgs<ExtArgs>>): Prisma.Prisma__JackpotContributionClient<runtime.Types.Result.GetResult<Prisma.$JackpotContributionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many JackpotContributions.
   * @param {JackpotContributionCreateManyArgs} args - Arguments to create many JackpotContributions.
   * @example
   * // Create many JackpotContributions
   * const jackpotContribution = await prisma.jackpotContribution.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends JackpotContributionCreateManyArgs>(args?: Prisma.SelectSubset<T, JackpotContributionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many JackpotContributions and returns the data saved in the database.
   * @param {JackpotContributionCreateManyAndReturnArgs} args - Arguments to create many JackpotContributions.
   * @example
   * // Create many JackpotContributions
   * const jackpotContribution = await prisma.jackpotContribution.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many JackpotContributions and only return the `id`
   * const jackpotContributionWithIdOnly = await prisma.jackpotContribution.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends JackpotContributionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, JackpotContributionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$JackpotContributionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a JackpotContribution.
   * @param {JackpotContributionDeleteArgs} args - Arguments to delete one JackpotContribution.
   * @example
   * // Delete one JackpotContribution
   * const JackpotContribution = await prisma.jackpotContribution.delete({
   *   where: {
   *     // ... filter to delete one JackpotContribution
   *   }
   * })
   * 
   */
  delete<T extends JackpotContributionDeleteArgs>(args: Prisma.SelectSubset<T, JackpotContributionDeleteArgs<ExtArgs>>): Prisma.Prisma__JackpotContributionClient<runtime.Types.Result.GetResult<Prisma.$JackpotContributionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one JackpotContribution.
   * @param {JackpotContributionUpdateArgs} args - Arguments to update one JackpotContribution.
   * @example
   * // Update one JackpotContribution
   * const jackpotContribution = await prisma.jackpotContribution.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends JackpotContributionUpdateArgs>(args: Prisma.SelectSubset<T, JackpotContributionUpdateArgs<ExtArgs>>): Prisma.Prisma__JackpotContributionClient<runtime.Types.Result.GetResult<Prisma.$JackpotContributionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more JackpotContributions.
   * @param {JackpotContributionDeleteManyArgs} args - Arguments to filter JackpotContributions to delete.
   * @example
   * // Delete a few JackpotContributions
   * const { count } = await prisma.jackpotContribution.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends JackpotContributionDeleteManyArgs>(args?: Prisma.SelectSubset<T, JackpotContributionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more JackpotContributions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {JackpotContributionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many JackpotContributions
   * const jackpotContribution = await prisma.jackpotContribution.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends JackpotContributionUpdateManyArgs>(args: Prisma.SelectSubset<T, JackpotContributionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more JackpotContributions and returns the data updated in the database.
   * @param {JackpotContributionUpdateManyAndReturnArgs} args - Arguments to update many JackpotContributions.
   * @example
   * // Update many JackpotContributions
   * const jackpotContribution = await prisma.jackpotContribution.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more JackpotContributions and only return the `id`
   * const jackpotContributionWithIdOnly = await prisma.jackpotContribution.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends JackpotContributionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, JackpotContributionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$JackpotContributionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one JackpotContribution.
   * @param {JackpotContributionUpsertArgs} args - Arguments to update or create a JackpotContribution.
   * @example
   * // Update or create a JackpotContribution
   * const jackpotContribution = await prisma.jackpotContribution.upsert({
   *   create: {
   *     // ... data to create a JackpotContribution
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the JackpotContribution we want to update
   *   }
   * })
   */
  upsert<T extends JackpotContributionUpsertArgs>(args: Prisma.SelectSubset<T, JackpotContributionUpsertArgs<ExtArgs>>): Prisma.Prisma__JackpotContributionClient<runtime.Types.Result.GetResult<Prisma.$JackpotContributionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of JackpotContributions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {JackpotContributionCountArgs} args - Arguments to filter JackpotContributions to count.
   * @example
   * // Count the number of JackpotContributions
   * const count = await prisma.jackpotContribution.count({
   *   where: {
   *     // ... the filter for the JackpotContributions we want to count
   *   }
   * })
  **/
  count<T extends JackpotContributionCountArgs>(
    args?: Prisma.Subset<T, JackpotContributionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], JackpotContributionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a JackpotContribution.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {JackpotContributionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends JackpotContributionAggregateArgs>(args: Prisma.Subset<T, JackpotContributionAggregateArgs>): Prisma.PrismaPromise<GetJackpotContributionAggregateType<T>>

  /**
   * Group by JackpotContribution.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {JackpotContributionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends JackpotContributionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: JackpotContributionGroupByArgs['orderBy'] }
      : { orderBy?: JackpotContributionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, JackpotContributionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJackpotContributionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the JackpotContribution model
 */
readonly fields: JackpotContributionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for JackpotContribution.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__JackpotContributionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  gameSpin<T extends Prisma.GameSpinDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.GameSpinDefaultArgs<ExtArgs>>): Prisma.Prisma__GameSpinClient<runtime.Types.Result.GetResult<Prisma.$GameSpinPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  jackpot<T extends Prisma.JackpotDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.JackpotDefaultArgs<ExtArgs>>): Prisma.Prisma__JackpotClient<runtime.Types.Result.GetResult<Prisma.$JackpotPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the JackpotContribution model
 */
export interface JackpotContributionFieldRefs {
  readonly id: Prisma.FieldRef<"JackpotContribution", 'String'>
  readonly jackpotId: Prisma.FieldRef<"JackpotContribution", 'String'>
  readonly gameSpinId: Prisma.FieldRef<"JackpotContribution", 'String'>
  readonly contributionAmountCoins: Prisma.FieldRef<"JackpotContribution", 'Int'>
  readonly createdAt: Prisma.FieldRef<"JackpotContribution", 'DateTime'>
}
    

// Custom InputTypes
/**
 * JackpotContribution findUnique
 */
export type JackpotContributionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the JackpotContribution
   */
  select?: Prisma.JackpotContributionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the JackpotContribution
   */
  omit?: Prisma.JackpotContributionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.JackpotContributionInclude<ExtArgs> | null
  /**
   * Filter, which JackpotContribution to fetch.
   */
  where: Prisma.JackpotContributionWhereUniqueInput
}

/**
 * JackpotContribution findUniqueOrThrow
 */
export type JackpotContributionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the JackpotContribution
   */
  select?: Prisma.JackpotContributionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the JackpotContribution
   */
  omit?: Prisma.JackpotContributionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.JackpotContributionInclude<ExtArgs> | null
  /**
   * Filter, which JackpotContribution to fetch.
   */
  where: Prisma.JackpotContributionWhereUniqueInput
}

/**
 * JackpotContribution findFirst
 */
export type JackpotContributionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the JackpotContribution
   */
  select?: Prisma.JackpotContributionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the JackpotContribution
   */
  omit?: Prisma.JackpotContributionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.JackpotContributionInclude<ExtArgs> | null
  /**
   * Filter, which JackpotContribution to fetch.
   */
  where?: Prisma.JackpotContributionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of JackpotContributions to fetch.
   */
  orderBy?: Prisma.JackpotContributionOrderByWithRelationInput | Prisma.JackpotContributionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for JackpotContributions.
   */
  cursor?: Prisma.JackpotContributionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` JackpotContributions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` JackpotContributions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of JackpotContributions.
   */
  distinct?: Prisma.JackpotContributionScalarFieldEnum | Prisma.JackpotContributionScalarFieldEnum[]
}

/**
 * JackpotContribution findFirstOrThrow
 */
export type JackpotContributionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the JackpotContribution
   */
  select?: Prisma.JackpotContributionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the JackpotContribution
   */
  omit?: Prisma.JackpotContributionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.JackpotContributionInclude<ExtArgs> | null
  /**
   * Filter, which JackpotContribution to fetch.
   */
  where?: Prisma.JackpotContributionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of JackpotContributions to fetch.
   */
  orderBy?: Prisma.JackpotContributionOrderByWithRelationInput | Prisma.JackpotContributionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for JackpotContributions.
   */
  cursor?: Prisma.JackpotContributionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` JackpotContributions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` JackpotContributions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of JackpotContributions.
   */
  distinct?: Prisma.JackpotContributionScalarFieldEnum | Prisma.JackpotContributionScalarFieldEnum[]
}

/**
 * JackpotContribution findMany
 */
export type JackpotContributionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the JackpotContribution
   */
  select?: Prisma.JackpotContributionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the JackpotContribution
   */
  omit?: Prisma.JackpotContributionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.JackpotContributionInclude<ExtArgs> | null
  /**
   * Filter, which JackpotContributions to fetch.
   */
  where?: Prisma.JackpotContributionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of JackpotContributions to fetch.
   */
  orderBy?: Prisma.JackpotContributionOrderByWithRelationInput | Prisma.JackpotContributionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing JackpotContributions.
   */
  cursor?: Prisma.JackpotContributionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` JackpotContributions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` JackpotContributions.
   */
  skip?: number
  distinct?: Prisma.JackpotContributionScalarFieldEnum | Prisma.JackpotContributionScalarFieldEnum[]
}

/**
 * JackpotContribution create
 */
export type JackpotContributionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the JackpotContribution
   */
  select?: Prisma.JackpotContributionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the JackpotContribution
   */
  omit?: Prisma.JackpotContributionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.JackpotContributionInclude<ExtArgs> | null
  /**
   * The data needed to create a JackpotContribution.
   */
  data: Prisma.XOR<Prisma.JackpotContributionCreateInput, Prisma.JackpotContributionUncheckedCreateInput>
}

/**
 * JackpotContribution createMany
 */
export type JackpotContributionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many JackpotContributions.
   */
  data: Prisma.JackpotContributionCreateManyInput | Prisma.JackpotContributionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * JackpotContribution createManyAndReturn
 */
export type JackpotContributionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the JackpotContribution
   */
  select?: Prisma.JackpotContributionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the JackpotContribution
   */
  omit?: Prisma.JackpotContributionOmit<ExtArgs> | null
  /**
   * The data used to create many JackpotContributions.
   */
  data: Prisma.JackpotContributionCreateManyInput | Prisma.JackpotContributionCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.JackpotContributionIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * JackpotContribution update
 */
export type JackpotContributionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the JackpotContribution
   */
  select?: Prisma.JackpotContributionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the JackpotContribution
   */
  omit?: Prisma.JackpotContributionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.JackpotContributionInclude<ExtArgs> | null
  /**
   * The data needed to update a JackpotContribution.
   */
  data: Prisma.XOR<Prisma.JackpotContributionUpdateInput, Prisma.JackpotContributionUncheckedUpdateInput>
  /**
   * Choose, which JackpotContribution to update.
   */
  where: Prisma.JackpotContributionWhereUniqueInput
}

/**
 * JackpotContribution updateMany
 */
export type JackpotContributionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update JackpotContributions.
   */
  data: Prisma.XOR<Prisma.JackpotContributionUpdateManyMutationInput, Prisma.JackpotContributionUncheckedUpdateManyInput>
  /**
   * Filter which JackpotContributions to update
   */
  where?: Prisma.JackpotContributionWhereInput
  /**
   * Limit how many JackpotContributions to update.
   */
  limit?: number
}

/**
 * JackpotContribution updateManyAndReturn
 */
export type JackpotContributionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the JackpotContribution
   */
  select?: Prisma.JackpotContributionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the JackpotContribution
   */
  omit?: Prisma.JackpotContributionOmit<ExtArgs> | null
  /**
   * The data used to update JackpotContributions.
   */
  data: Prisma.XOR<Prisma.JackpotContributionUpdateManyMutationInput, Prisma.JackpotContributionUncheckedUpdateManyInput>
  /**
   * Filter which JackpotContributions to update
   */
  where?: Prisma.JackpotContributionWhereInput
  /**
   * Limit how many JackpotContributions to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.JackpotContributionIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * JackpotContribution upsert
 */
export type JackpotContributionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the JackpotContribution
   */
  select?: Prisma.JackpotContributionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the JackpotContribution
   */
  omit?: Prisma.JackpotContributionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.JackpotContributionInclude<ExtArgs> | null
  /**
   * The filter to search for the JackpotContribution to update in case it exists.
   */
  where: Prisma.JackpotContributionWhereUniqueInput
  /**
   * In case the JackpotContribution found by the `where` argument doesn't exist, create a new JackpotContribution with this data.
   */
  create: Prisma.XOR<Prisma.JackpotContributionCreateInput, Prisma.JackpotContributionUncheckedCreateInput>
  /**
   * In case the JackpotContribution was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.JackpotContributionUpdateInput, Prisma.JackpotContributionUncheckedUpdateInput>
}

/**
 * JackpotContribution delete
 */
export type JackpotContributionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the JackpotContribution
   */
  select?: Prisma.JackpotContributionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the JackpotContribution
   */
  omit?: Prisma.JackpotContributionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.JackpotContributionInclude<ExtArgs> | null
  /**
   * Filter which JackpotContribution to delete.
   */
  where: Prisma.JackpotContributionWhereUniqueInput
}

/**
 * JackpotContribution deleteMany
 */
export type JackpotContributionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which JackpotContributions to delete
   */
  where?: Prisma.JackpotContributionWhereInput
  /**
   * Limit how many JackpotContributions to delete.
   */
  limit?: number
}

/**
 * JackpotContribution without action
 */
export type JackpotContributionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the JackpotContribution
   */
  select?: Prisma.JackpotContributionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the JackpotContribution
   */
  omit?: Prisma.JackpotContributionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.JackpotContributionInclude<ExtArgs> | null
}
