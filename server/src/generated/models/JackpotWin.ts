
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `JackpotWin` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model JackpotWin
 * 
 */
export type JackpotWinModel = runtime.Types.Result.DefaultSelection<Prisma.$JackpotWinPayload>

export type AggregateJackpotWin = {
  _count: JackpotWinCountAggregateOutputType | null
  _avg: JackpotWinAvgAggregateOutputType | null
  _sum: JackpotWinSumAggregateOutputType | null
  _min: JackpotWinMinAggregateOutputType | null
  _max: JackpotWinMaxAggregateOutputType | null
}

export type JackpotWinAvgAggregateOutputType = {
  winAmountCoins: number | null
}

export type JackpotWinSumAggregateOutputType = {
  winAmountCoins: number | null
}

export type JackpotWinMinAggregateOutputType = {
  id: string | null
  jackpotId: string | null
  winnerId: string | null
  winAmountCoins: number | null
  gameSpinId: string | null
  transactionId: string | null
  createdAt: Date | null
}

export type JackpotWinMaxAggregateOutputType = {
  id: string | null
  jackpotId: string | null
  winnerId: string | null
  winAmountCoins: number | null
  gameSpinId: string | null
  transactionId: string | null
  createdAt: Date | null
}

export type JackpotWinCountAggregateOutputType = {
  id: number
  jackpotId: number
  winnerId: number
  winAmountCoins: number
  gameSpinId: number
  transactionId: number
  createdAt: number
  _all: number
}


export type JackpotWinAvgAggregateInputType = {
  winAmountCoins?: true
}

export type JackpotWinSumAggregateInputType = {
  winAmountCoins?: true
}

export type JackpotWinMinAggregateInputType = {
  id?: true
  jackpotId?: true
  winnerId?: true
  winAmountCoins?: true
  gameSpinId?: true
  transactionId?: true
  createdAt?: true
}

export type JackpotWinMaxAggregateInputType = {
  id?: true
  jackpotId?: true
  winnerId?: true
  winAmountCoins?: true
  gameSpinId?: true
  transactionId?: true
  createdAt?: true
}

export type JackpotWinCountAggregateInputType = {
  id?: true
  jackpotId?: true
  winnerId?: true
  winAmountCoins?: true
  gameSpinId?: true
  transactionId?: true
  createdAt?: true
  _all?: true
}

export type JackpotWinAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which JackpotWin to aggregate.
   */
  where?: Prisma.JackpotWinWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of JackpotWins to fetch.
   */
  orderBy?: Prisma.JackpotWinOrderByWithRelationInput | Prisma.JackpotWinOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.JackpotWinWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` JackpotWins from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` JackpotWins.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned JackpotWins
  **/
  _count?: true | JackpotWinCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: JackpotWinAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: JackpotWinSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: JackpotWinMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: JackpotWinMaxAggregateInputType
}

export type GetJackpotWinAggregateType<T extends JackpotWinAggregateArgs> = {
      [P in keyof T & keyof AggregateJackpotWin]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateJackpotWin[P]>
    : Prisma.GetScalarType<T[P], AggregateJackpotWin[P]>
}




export type JackpotWinGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.JackpotWinWhereInput
  orderBy?: Prisma.JackpotWinOrderByWithAggregationInput | Prisma.JackpotWinOrderByWithAggregationInput[]
  by: Prisma.JackpotWinScalarFieldEnum[] | Prisma.JackpotWinScalarFieldEnum
  having?: Prisma.JackpotWinScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: JackpotWinCountAggregateInputType | true
  _avg?: JackpotWinAvgAggregateInputType
  _sum?: JackpotWinSumAggregateInputType
  _min?: JackpotWinMinAggregateInputType
  _max?: JackpotWinMaxAggregateInputType
}

export type JackpotWinGroupByOutputType = {
  id: string
  jackpotId: string
  winnerId: string
  winAmountCoins: number
  gameSpinId: string
  transactionId: string | null
  createdAt: Date
  _count: JackpotWinCountAggregateOutputType | null
  _avg: JackpotWinAvgAggregateOutputType | null
  _sum: JackpotWinSumAggregateOutputType | null
  _min: JackpotWinMinAggregateOutputType | null
  _max: JackpotWinMaxAggregateOutputType | null
}

type GetJackpotWinGroupByPayload<T extends JackpotWinGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<JackpotWinGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof JackpotWinGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], JackpotWinGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], JackpotWinGroupByOutputType[P]>
      }
    >
  > 



export type JackpotWinWhereInput = {
  AND?: Prisma.JackpotWinWhereInput | Prisma.JackpotWinWhereInput[]
  OR?: Prisma.JackpotWinWhereInput[]
  NOT?: Prisma.JackpotWinWhereInput | Prisma.JackpotWinWhereInput[]
  id?: Prisma.StringFilter<"JackpotWin"> | string
  jackpotId?: Prisma.StringFilter<"JackpotWin"> | string
  winnerId?: Prisma.StringFilter<"JackpotWin"> | string
  winAmountCoins?: Prisma.IntFilter<"JackpotWin"> | number
  gameSpinId?: Prisma.StringFilter<"JackpotWin"> | string
  transactionId?: Prisma.StringNullableFilter<"JackpotWin"> | string | null
  createdAt?: Prisma.DateTimeFilter<"JackpotWin"> | Date | string
  gameSpin?: Prisma.XOR<Prisma.GameSpinScalarRelationFilter, Prisma.GameSpinWhereInput>
  jackpot?: Prisma.XOR<Prisma.JackpotScalarRelationFilter, Prisma.JackpotWhereInput>
  transaction?: Prisma.XOR<Prisma.TransactionNullableScalarRelationFilter, Prisma.TransactionWhereInput> | null
  winner?: Prisma.XOR<Prisma.UserProfileScalarRelationFilter, Prisma.UserProfileWhereInput>
}

export type JackpotWinOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  jackpotId?: Prisma.SortOrder
  winnerId?: Prisma.SortOrder
  winAmountCoins?: Prisma.SortOrder
  gameSpinId?: Prisma.SortOrder
  transactionId?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  gameSpin?: Prisma.GameSpinOrderByWithRelationInput
  jackpot?: Prisma.JackpotOrderByWithRelationInput
  transaction?: Prisma.TransactionOrderByWithRelationInput
  winner?: Prisma.UserProfileOrderByWithRelationInput
}

export type JackpotWinWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  gameSpinId?: string
  AND?: Prisma.JackpotWinWhereInput | Prisma.JackpotWinWhereInput[]
  OR?: Prisma.JackpotWinWhereInput[]
  NOT?: Prisma.JackpotWinWhereInput | Prisma.JackpotWinWhereInput[]
  jackpotId?: Prisma.StringFilter<"JackpotWin"> | string
  winnerId?: Prisma.StringFilter<"JackpotWin"> | string
  winAmountCoins?: Prisma.IntFilter<"JackpotWin"> | number
  transactionId?: Prisma.StringNullableFilter<"JackpotWin"> | string | null
  createdAt?: Prisma.DateTimeFilter<"JackpotWin"> | Date | string
  gameSpin?: Prisma.XOR<Prisma.GameSpinScalarRelationFilter, Prisma.GameSpinWhereInput>
  jackpot?: Prisma.XOR<Prisma.JackpotScalarRelationFilter, Prisma.JackpotWhereInput>
  transaction?: Prisma.XOR<Prisma.TransactionNullableScalarRelationFilter, Prisma.TransactionWhereInput> | null
  winner?: Prisma.XOR<Prisma.UserProfileScalarRelationFilter, Prisma.UserProfileWhereInput>
}, "id" | "gameSpinId">

export type JackpotWinOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  jackpotId?: Prisma.SortOrder
  winnerId?: Prisma.SortOrder
  winAmountCoins?: Prisma.SortOrder
  gameSpinId?: Prisma.SortOrder
  transactionId?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.JackpotWinCountOrderByAggregateInput
  _avg?: Prisma.JackpotWinAvgOrderByAggregateInput
  _max?: Prisma.JackpotWinMaxOrderByAggregateInput
  _min?: Prisma.JackpotWinMinOrderByAggregateInput
  _sum?: Prisma.JackpotWinSumOrderByAggregateInput
}

export type JackpotWinScalarWhereWithAggregatesInput = {
  AND?: Prisma.JackpotWinScalarWhereWithAggregatesInput | Prisma.JackpotWinScalarWhereWithAggregatesInput[]
  OR?: Prisma.JackpotWinScalarWhereWithAggregatesInput[]
  NOT?: Prisma.JackpotWinScalarWhereWithAggregatesInput | Prisma.JackpotWinScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"JackpotWin"> | string
  jackpotId?: Prisma.StringWithAggregatesFilter<"JackpotWin"> | string
  winnerId?: Prisma.StringWithAggregatesFilter<"JackpotWin"> | string
  winAmountCoins?: Prisma.IntWithAggregatesFilter<"JackpotWin"> | number
  gameSpinId?: Prisma.StringWithAggregatesFilter<"JackpotWin"> | string
  transactionId?: Prisma.StringNullableWithAggregatesFilter<"JackpotWin"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"JackpotWin"> | Date | string
}

export type JackpotWinCreateInput = {
  id?: string
  winAmountCoins: number
  createdAt?: Date | string
  gameSpin: Prisma.GameSpinCreateNestedOneWithoutJackpotWinInput
  jackpot: Prisma.JackpotCreateNestedOneWithoutWinsInput
  transaction?: Prisma.TransactionCreateNestedOneWithoutJackpotWinsInput
  winner: Prisma.UserProfileCreateNestedOneWithoutJackpotWinsInput
}

export type JackpotWinUncheckedCreateInput = {
  id?: string
  jackpotId: string
  winnerId: string
  winAmountCoins: number
  gameSpinId: string
  transactionId?: string | null
  createdAt?: Date | string
}

export type JackpotWinUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  winAmountCoins?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  gameSpin?: Prisma.GameSpinUpdateOneRequiredWithoutJackpotWinNestedInput
  jackpot?: Prisma.JackpotUpdateOneRequiredWithoutWinsNestedInput
  transaction?: Prisma.TransactionUpdateOneWithoutJackpotWinsNestedInput
  winner?: Prisma.UserProfileUpdateOneRequiredWithoutJackpotWinsNestedInput
}

export type JackpotWinUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  jackpotId?: Prisma.StringFieldUpdateOperationsInput | string
  winnerId?: Prisma.StringFieldUpdateOperationsInput | string
  winAmountCoins?: Prisma.IntFieldUpdateOperationsInput | number
  gameSpinId?: Prisma.StringFieldUpdateOperationsInput | string
  transactionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type JackpotWinCreateManyInput = {
  id?: string
  jackpotId: string
  winnerId: string
  winAmountCoins: number
  gameSpinId: string
  transactionId?: string | null
  createdAt?: Date | string
}

export type JackpotWinUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  winAmountCoins?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type JackpotWinUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  jackpotId?: Prisma.StringFieldUpdateOperationsInput | string
  winnerId?: Prisma.StringFieldUpdateOperationsInput | string
  winAmountCoins?: Prisma.IntFieldUpdateOperationsInput | number
  gameSpinId?: Prisma.StringFieldUpdateOperationsInput | string
  transactionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type JackpotWinNullableScalarRelationFilter = {
  is?: Prisma.JackpotWinWhereInput | null
  isNot?: Prisma.JackpotWinWhereInput | null
}

export type JackpotWinListRelationFilter = {
  every?: Prisma.JackpotWinWhereInput
  some?: Prisma.JackpotWinWhereInput
  none?: Prisma.JackpotWinWhereInput
}

export type JackpotWinOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type JackpotWinCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  jackpotId?: Prisma.SortOrder
  winnerId?: Prisma.SortOrder
  winAmountCoins?: Prisma.SortOrder
  gameSpinId?: Prisma.SortOrder
  transactionId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type JackpotWinAvgOrderByAggregateInput = {
  winAmountCoins?: Prisma.SortOrder
}

export type JackpotWinMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  jackpotId?: Prisma.SortOrder
  winnerId?: Prisma.SortOrder
  winAmountCoins?: Prisma.SortOrder
  gameSpinId?: Prisma.SortOrder
  transactionId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type JackpotWinMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  jackpotId?: Prisma.SortOrder
  winnerId?: Prisma.SortOrder
  winAmountCoins?: Prisma.SortOrder
  gameSpinId?: Prisma.SortOrder
  transactionId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type JackpotWinSumOrderByAggregateInput = {
  winAmountCoins?: Prisma.SortOrder
}

export type JackpotWinCreateNestedOneWithoutGameSpinInput = {
  create?: Prisma.XOR<Prisma.JackpotWinCreateWithoutGameSpinInput, Prisma.JackpotWinUncheckedCreateWithoutGameSpinInput>
  connectOrCreate?: Prisma.JackpotWinCreateOrConnectWithoutGameSpinInput
  connect?: Prisma.JackpotWinWhereUniqueInput
}

export type JackpotWinUncheckedCreateNestedOneWithoutGameSpinInput = {
  create?: Prisma.XOR<Prisma.JackpotWinCreateWithoutGameSpinInput, Prisma.JackpotWinUncheckedCreateWithoutGameSpinInput>
  connectOrCreate?: Prisma.JackpotWinCreateOrConnectWithoutGameSpinInput
  connect?: Prisma.JackpotWinWhereUniqueInput
}

export type JackpotWinUpdateOneWithoutGameSpinNestedInput = {
  create?: Prisma.XOR<Prisma.JackpotWinCreateWithoutGameSpinInput, Prisma.JackpotWinUncheckedCreateWithoutGameSpinInput>
  connectOrCreate?: Prisma.JackpotWinCreateOrConnectWithoutGameSpinInput
  upsert?: Prisma.JackpotWinUpsertWithoutGameSpinInput
  disconnect?: Prisma.JackpotWinWhereInput | boolean
  delete?: Prisma.JackpotWinWhereInput | boolean
  connect?: Prisma.JackpotWinWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.JackpotWinUpdateToOneWithWhereWithoutGameSpinInput, Prisma.JackpotWinUpdateWithoutGameSpinInput>, Prisma.JackpotWinUncheckedUpdateWithoutGameSpinInput>
}

export type JackpotWinUncheckedUpdateOneWithoutGameSpinNestedInput = {
  create?: Prisma.XOR<Prisma.JackpotWinCreateWithoutGameSpinInput, Prisma.JackpotWinUncheckedCreateWithoutGameSpinInput>
  connectOrCreate?: Prisma.JackpotWinCreateOrConnectWithoutGameSpinInput
  upsert?: Prisma.JackpotWinUpsertWithoutGameSpinInput
  disconnect?: Prisma.JackpotWinWhereInput | boolean
  delete?: Prisma.JackpotWinWhereInput | boolean
  connect?: Prisma.JackpotWinWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.JackpotWinUpdateToOneWithWhereWithoutGameSpinInput, Prisma.JackpotWinUpdateWithoutGameSpinInput>, Prisma.JackpotWinUncheckedUpdateWithoutGameSpinInput>
}

export type JackpotWinCreateNestedManyWithoutJackpotInput = {
  create?: Prisma.XOR<Prisma.JackpotWinCreateWithoutJackpotInput, Prisma.JackpotWinUncheckedCreateWithoutJackpotInput> | Prisma.JackpotWinCreateWithoutJackpotInput[] | Prisma.JackpotWinUncheckedCreateWithoutJackpotInput[]
  connectOrCreate?: Prisma.JackpotWinCreateOrConnectWithoutJackpotInput | Prisma.JackpotWinCreateOrConnectWithoutJackpotInput[]
  createMany?: Prisma.JackpotWinCreateManyJackpotInputEnvelope
  connect?: Prisma.JackpotWinWhereUniqueInput | Prisma.JackpotWinWhereUniqueInput[]
}

export type JackpotWinUncheckedCreateNestedManyWithoutJackpotInput = {
  create?: Prisma.XOR<Prisma.JackpotWinCreateWithoutJackpotInput, Prisma.JackpotWinUncheckedCreateWithoutJackpotInput> | Prisma.JackpotWinCreateWithoutJackpotInput[] | Prisma.JackpotWinUncheckedCreateWithoutJackpotInput[]
  connectOrCreate?: Prisma.JackpotWinCreateOrConnectWithoutJackpotInput | Prisma.JackpotWinCreateOrConnectWithoutJackpotInput[]
  createMany?: Prisma.JackpotWinCreateManyJackpotInputEnvelope
  connect?: Prisma.JackpotWinWhereUniqueInput | Prisma.JackpotWinWhereUniqueInput[]
}

export type JackpotWinUpdateManyWithoutJackpotNestedInput = {
  create?: Prisma.XOR<Prisma.JackpotWinCreateWithoutJackpotInput, Prisma.JackpotWinUncheckedCreateWithoutJackpotInput> | Prisma.JackpotWinCreateWithoutJackpotInput[] | Prisma.JackpotWinUncheckedCreateWithoutJackpotInput[]
  connectOrCreate?: Prisma.JackpotWinCreateOrConnectWithoutJackpotInput | Prisma.JackpotWinCreateOrConnectWithoutJackpotInput[]
  upsert?: Prisma.JackpotWinUpsertWithWhereUniqueWithoutJackpotInput | Prisma.JackpotWinUpsertWithWhereUniqueWithoutJackpotInput[]
  createMany?: Prisma.JackpotWinCreateManyJackpotInputEnvelope
  set?: Prisma.JackpotWinWhereUniqueInput | Prisma.JackpotWinWhereUniqueInput[]
  disconnect?: Prisma.JackpotWinWhereUniqueInput | Prisma.JackpotWinWhereUniqueInput[]
  delete?: Prisma.JackpotWinWhereUniqueInput | Prisma.JackpotWinWhereUniqueInput[]
  connect?: Prisma.JackpotWinWhereUniqueInput | Prisma.JackpotWinWhereUniqueInput[]
  update?: Prisma.JackpotWinUpdateWithWhereUniqueWithoutJackpotInput | Prisma.JackpotWinUpdateWithWhereUniqueWithoutJackpotInput[]
  updateMany?: Prisma.JackpotWinUpdateManyWithWhereWithoutJackpotInput | Prisma.JackpotWinUpdateManyWithWhereWithoutJackpotInput[]
  deleteMany?: Prisma.JackpotWinScalarWhereInput | Prisma.JackpotWinScalarWhereInput[]
}

export type JackpotWinUncheckedUpdateManyWithoutJackpotNestedInput = {
  create?: Prisma.XOR<Prisma.JackpotWinCreateWithoutJackpotInput, Prisma.JackpotWinUncheckedCreateWithoutJackpotInput> | Prisma.JackpotWinCreateWithoutJackpotInput[] | Prisma.JackpotWinUncheckedCreateWithoutJackpotInput[]
  connectOrCreate?: Prisma.JackpotWinCreateOrConnectWithoutJackpotInput | Prisma.JackpotWinCreateOrConnectWithoutJackpotInput[]
  upsert?: Prisma.JackpotWinUpsertWithWhereUniqueWithoutJackpotInput | Prisma.JackpotWinUpsertWithWhereUniqueWithoutJackpotInput[]
  createMany?: Prisma.JackpotWinCreateManyJackpotInputEnvelope
  set?: Prisma.JackpotWinWhereUniqueInput | Prisma.JackpotWinWhereUniqueInput[]
  disconnect?: Prisma.JackpotWinWhereUniqueInput | Prisma.JackpotWinWhereUniqueInput[]
  delete?: Prisma.JackpotWinWhereUniqueInput | Prisma.JackpotWinWhereUniqueInput[]
  connect?: Prisma.JackpotWinWhereUniqueInput | Prisma.JackpotWinWhereUniqueInput[]
  update?: Prisma.JackpotWinUpdateWithWhereUniqueWithoutJackpotInput | Prisma.JackpotWinUpdateWithWhereUniqueWithoutJackpotInput[]
  updateMany?: Prisma.JackpotWinUpdateManyWithWhereWithoutJackpotInput | Prisma.JackpotWinUpdateManyWithWhereWithoutJackpotInput[]
  deleteMany?: Prisma.JackpotWinScalarWhereInput | Prisma.JackpotWinScalarWhereInput[]
}

export type JackpotWinCreateNestedManyWithoutTransactionInput = {
  create?: Prisma.XOR<Prisma.JackpotWinCreateWithoutTransactionInput, Prisma.JackpotWinUncheckedCreateWithoutTransactionInput> | Prisma.JackpotWinCreateWithoutTransactionInput[] | Prisma.JackpotWinUncheckedCreateWithoutTransactionInput[]
  connectOrCreate?: Prisma.JackpotWinCreateOrConnectWithoutTransactionInput | Prisma.JackpotWinCreateOrConnectWithoutTransactionInput[]
  createMany?: Prisma.JackpotWinCreateManyTransactionInputEnvelope
  connect?: Prisma.JackpotWinWhereUniqueInput | Prisma.JackpotWinWhereUniqueInput[]
}

export type JackpotWinUncheckedCreateNestedManyWithoutTransactionInput = {
  create?: Prisma.XOR<Prisma.JackpotWinCreateWithoutTransactionInput, Prisma.JackpotWinUncheckedCreateWithoutTransactionInput> | Prisma.JackpotWinCreateWithoutTransactionInput[] | Prisma.JackpotWinUncheckedCreateWithoutTransactionInput[]
  connectOrCreate?: Prisma.JackpotWinCreateOrConnectWithoutTransactionInput | Prisma.JackpotWinCreateOrConnectWithoutTransactionInput[]
  createMany?: Prisma.JackpotWinCreateManyTransactionInputEnvelope
  connect?: Prisma.JackpotWinWhereUniqueInput | Prisma.JackpotWinWhereUniqueInput[]
}

export type JackpotWinUpdateManyWithoutTransactionNestedInput = {
  create?: Prisma.XOR<Prisma.JackpotWinCreateWithoutTransactionInput, Prisma.JackpotWinUncheckedCreateWithoutTransactionInput> | Prisma.JackpotWinCreateWithoutTransactionInput[] | Prisma.JackpotWinUncheckedCreateWithoutTransactionInput[]
  connectOrCreate?: Prisma.JackpotWinCreateOrConnectWithoutTransactionInput | Prisma.JackpotWinCreateOrConnectWithoutTransactionInput[]
  upsert?: Prisma.JackpotWinUpsertWithWhereUniqueWithoutTransactionInput | Prisma.JackpotWinUpsertWithWhereUniqueWithoutTransactionInput[]
  createMany?: Prisma.JackpotWinCreateManyTransactionInputEnvelope
  set?: Prisma.JackpotWinWhereUniqueInput | Prisma.JackpotWinWhereUniqueInput[]
  disconnect?: Prisma.JackpotWinWhereUniqueInput | Prisma.JackpotWinWhereUniqueInput[]
  delete?: Prisma.JackpotWinWhereUniqueInput | Prisma.JackpotWinWhereUniqueInput[]
  connect?: Prisma.JackpotWinWhereUniqueInput | Prisma.JackpotWinWhereUniqueInput[]
  update?: Prisma.JackpotWinUpdateWithWhereUniqueWithoutTransactionInput | Prisma.JackpotWinUpdateWithWhereUniqueWithoutTransactionInput[]
  updateMany?: Prisma.JackpotWinUpdateManyWithWhereWithoutTransactionInput | Prisma.JackpotWinUpdateManyWithWhereWithoutTransactionInput[]
  deleteMany?: Prisma.JackpotWinScalarWhereInput | Prisma.JackpotWinScalarWhereInput[]
}

export type JackpotWinUncheckedUpdateManyWithoutTransactionNestedInput = {
  create?: Prisma.XOR<Prisma.JackpotWinCreateWithoutTransactionInput, Prisma.JackpotWinUncheckedCreateWithoutTransactionInput> | Prisma.JackpotWinCreateWithoutTransactionInput[] | Prisma.JackpotWinUncheckedCreateWithoutTransactionInput[]
  connectOrCreate?: Prisma.JackpotWinCreateOrConnectWithoutTransactionInput | Prisma.JackpotWinCreateOrConnectWithoutTransactionInput[]
  upsert?: Prisma.JackpotWinUpsertWithWhereUniqueWithoutTransactionInput | Prisma.JackpotWinUpsertWithWhereUniqueWithoutTransactionInput[]
  createMany?: Prisma.JackpotWinCreateManyTransactionInputEnvelope
  set?: Prisma.JackpotWinWhereUniqueInput | Prisma.JackpotWinWhereUniqueInput[]
  disconnect?: Prisma.JackpotWinWhereUniqueInput | Prisma.JackpotWinWhereUniqueInput[]
  delete?: Prisma.JackpotWinWhereUniqueInput | Prisma.JackpotWinWhereUniqueInput[]
  connect?: Prisma.JackpotWinWhereUniqueInput | Prisma.JackpotWinWhereUniqueInput[]
  update?: Prisma.JackpotWinUpdateWithWhereUniqueWithoutTransactionInput | Prisma.JackpotWinUpdateWithWhereUniqueWithoutTransactionInput[]
  updateMany?: Prisma.JackpotWinUpdateManyWithWhereWithoutTransactionInput | Prisma.JackpotWinUpdateManyWithWhereWithoutTransactionInput[]
  deleteMany?: Prisma.JackpotWinScalarWhereInput | Prisma.JackpotWinScalarWhereInput[]
}

export type JackpotWinCreateNestedManyWithoutWinnerInput = {
  create?: Prisma.XOR<Prisma.JackpotWinCreateWithoutWinnerInput, Prisma.JackpotWinUncheckedCreateWithoutWinnerInput> | Prisma.JackpotWinCreateWithoutWinnerInput[] | Prisma.JackpotWinUncheckedCreateWithoutWinnerInput[]
  connectOrCreate?: Prisma.JackpotWinCreateOrConnectWithoutWinnerInput | Prisma.JackpotWinCreateOrConnectWithoutWinnerInput[]
  createMany?: Prisma.JackpotWinCreateManyWinnerInputEnvelope
  connect?: Prisma.JackpotWinWhereUniqueInput | Prisma.JackpotWinWhereUniqueInput[]
}

export type JackpotWinUncheckedCreateNestedManyWithoutWinnerInput = {
  create?: Prisma.XOR<Prisma.JackpotWinCreateWithoutWinnerInput, Prisma.JackpotWinUncheckedCreateWithoutWinnerInput> | Prisma.JackpotWinCreateWithoutWinnerInput[] | Prisma.JackpotWinUncheckedCreateWithoutWinnerInput[]
  connectOrCreate?: Prisma.JackpotWinCreateOrConnectWithoutWinnerInput | Prisma.JackpotWinCreateOrConnectWithoutWinnerInput[]
  createMany?: Prisma.JackpotWinCreateManyWinnerInputEnvelope
  connect?: Prisma.JackpotWinWhereUniqueInput | Prisma.JackpotWinWhereUniqueInput[]
}

export type JackpotWinUpdateManyWithoutWinnerNestedInput = {
  create?: Prisma.XOR<Prisma.JackpotWinCreateWithoutWinnerInput, Prisma.JackpotWinUncheckedCreateWithoutWinnerInput> | Prisma.JackpotWinCreateWithoutWinnerInput[] | Prisma.JackpotWinUncheckedCreateWithoutWinnerInput[]
  connectOrCreate?: Prisma.JackpotWinCreateOrConnectWithoutWinnerInput | Prisma.JackpotWinCreateOrConnectWithoutWinnerInput[]
  upsert?: Prisma.JackpotWinUpsertWithWhereUniqueWithoutWinnerInput | Prisma.JackpotWinUpsertWithWhereUniqueWithoutWinnerInput[]
  createMany?: Prisma.JackpotWinCreateManyWinnerInputEnvelope
  set?: Prisma.JackpotWinWhereUniqueInput | Prisma.JackpotWinWhereUniqueInput[]
  disconnect?: Prisma.JackpotWinWhereUniqueInput | Prisma.JackpotWinWhereUniqueInput[]
  delete?: Prisma.JackpotWinWhereUniqueInput | Prisma.JackpotWinWhereUniqueInput[]
  connect?: Prisma.JackpotWinWhereUniqueInput | Prisma.JackpotWinWhereUniqueInput[]
  update?: Prisma.JackpotWinUpdateWithWhereUniqueWithoutWinnerInput | Prisma.JackpotWinUpdateWithWhereUniqueWithoutWinnerInput[]
  updateMany?: Prisma.JackpotWinUpdateManyWithWhereWithoutWinnerInput | Prisma.JackpotWinUpdateManyWithWhereWithoutWinnerInput[]
  deleteMany?: Prisma.JackpotWinScalarWhereInput | Prisma.JackpotWinScalarWhereInput[]
}

export type JackpotWinUncheckedUpdateManyWithoutWinnerNestedInput = {
  create?: Prisma.XOR<Prisma.JackpotWinCreateWithoutWinnerInput, Prisma.JackpotWinUncheckedCreateWithoutWinnerInput> | Prisma.JackpotWinCreateWithoutWinnerInput[] | Prisma.JackpotWinUncheckedCreateWithoutWinnerInput[]
  connectOrCreate?: Prisma.JackpotWinCreateOrConnectWithoutWinnerInput | Prisma.JackpotWinCreateOrConnectWithoutWinnerInput[]
  upsert?: Prisma.JackpotWinUpsertWithWhereUniqueWithoutWinnerInput | Prisma.JackpotWinUpsertWithWhereUniqueWithoutWinnerInput[]
  createMany?: Prisma.JackpotWinCreateManyWinnerInputEnvelope
  set?: Prisma.JackpotWinWhereUniqueInput | Prisma.JackpotWinWhereUniqueInput[]
  disconnect?: Prisma.JackpotWinWhereUniqueInput | Prisma.JackpotWinWhereUniqueInput[]
  delete?: Prisma.JackpotWinWhereUniqueInput | Prisma.JackpotWinWhereUniqueInput[]
  connect?: Prisma.JackpotWinWhereUniqueInput | Prisma.JackpotWinWhereUniqueInput[]
  update?: Prisma.JackpotWinUpdateWithWhereUniqueWithoutWinnerInput | Prisma.JackpotWinUpdateWithWhereUniqueWithoutWinnerInput[]
  updateMany?: Prisma.JackpotWinUpdateManyWithWhereWithoutWinnerInput | Prisma.JackpotWinUpdateManyWithWhereWithoutWinnerInput[]
  deleteMany?: Prisma.JackpotWinScalarWhereInput | Prisma.JackpotWinScalarWhereInput[]
}

export type JackpotWinCreateWithoutGameSpinInput = {
  id?: string
  winAmountCoins: number
  createdAt?: Date | string
  jackpot: Prisma.JackpotCreateNestedOneWithoutWinsInput
  transaction?: Prisma.TransactionCreateNestedOneWithoutJackpotWinsInput
  winner: Prisma.UserProfileCreateNestedOneWithoutJackpotWinsInput
}

export type JackpotWinUncheckedCreateWithoutGameSpinInput = {
  id?: string
  jackpotId: string
  winnerId: string
  winAmountCoins: number
  transactionId?: string | null
  createdAt?: Date | string
}

export type JackpotWinCreateOrConnectWithoutGameSpinInput = {
  where: Prisma.JackpotWinWhereUniqueInput
  create: Prisma.XOR<Prisma.JackpotWinCreateWithoutGameSpinInput, Prisma.JackpotWinUncheckedCreateWithoutGameSpinInput>
}

export type JackpotWinUpsertWithoutGameSpinInput = {
  update: Prisma.XOR<Prisma.JackpotWinUpdateWithoutGameSpinInput, Prisma.JackpotWinUncheckedUpdateWithoutGameSpinInput>
  create: Prisma.XOR<Prisma.JackpotWinCreateWithoutGameSpinInput, Prisma.JackpotWinUncheckedCreateWithoutGameSpinInput>
  where?: Prisma.JackpotWinWhereInput
}

export type JackpotWinUpdateToOneWithWhereWithoutGameSpinInput = {
  where?: Prisma.JackpotWinWhereInput
  data: Prisma.XOR<Prisma.JackpotWinUpdateWithoutGameSpinInput, Prisma.JackpotWinUncheckedUpdateWithoutGameSpinInput>
}

export type JackpotWinUpdateWithoutGameSpinInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  winAmountCoins?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  jackpot?: Prisma.JackpotUpdateOneRequiredWithoutWinsNestedInput
  transaction?: Prisma.TransactionUpdateOneWithoutJackpotWinsNestedInput
  winner?: Prisma.UserProfileUpdateOneRequiredWithoutJackpotWinsNestedInput
}

export type JackpotWinUncheckedUpdateWithoutGameSpinInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  jackpotId?: Prisma.StringFieldUpdateOperationsInput | string
  winnerId?: Prisma.StringFieldUpdateOperationsInput | string
  winAmountCoins?: Prisma.IntFieldUpdateOperationsInput | number
  transactionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type JackpotWinCreateWithoutJackpotInput = {
  id?: string
  winAmountCoins: number
  createdAt?: Date | string
  gameSpin: Prisma.GameSpinCreateNestedOneWithoutJackpotWinInput
  transaction?: Prisma.TransactionCreateNestedOneWithoutJackpotWinsInput
  winner: Prisma.UserProfileCreateNestedOneWithoutJackpotWinsInput
}

export type JackpotWinUncheckedCreateWithoutJackpotInput = {
  id?: string
  winnerId: string
  winAmountCoins: number
  gameSpinId: string
  transactionId?: string | null
  createdAt?: Date | string
}

export type JackpotWinCreateOrConnectWithoutJackpotInput = {
  where: Prisma.JackpotWinWhereUniqueInput
  create: Prisma.XOR<Prisma.JackpotWinCreateWithoutJackpotInput, Prisma.JackpotWinUncheckedCreateWithoutJackpotInput>
}

export type JackpotWinCreateManyJackpotInputEnvelope = {
  data: Prisma.JackpotWinCreateManyJackpotInput | Prisma.JackpotWinCreateManyJackpotInput[]
  skipDuplicates?: boolean
}

export type JackpotWinUpsertWithWhereUniqueWithoutJackpotInput = {
  where: Prisma.JackpotWinWhereUniqueInput
  update: Prisma.XOR<Prisma.JackpotWinUpdateWithoutJackpotInput, Prisma.JackpotWinUncheckedUpdateWithoutJackpotInput>
  create: Prisma.XOR<Prisma.JackpotWinCreateWithoutJackpotInput, Prisma.JackpotWinUncheckedCreateWithoutJackpotInput>
}

export type JackpotWinUpdateWithWhereUniqueWithoutJackpotInput = {
  where: Prisma.JackpotWinWhereUniqueInput
  data: Prisma.XOR<Prisma.JackpotWinUpdateWithoutJackpotInput, Prisma.JackpotWinUncheckedUpdateWithoutJackpotInput>
}

export type JackpotWinUpdateManyWithWhereWithoutJackpotInput = {
  where: Prisma.JackpotWinScalarWhereInput
  data: Prisma.XOR<Prisma.JackpotWinUpdateManyMutationInput, Prisma.JackpotWinUncheckedUpdateManyWithoutJackpotInput>
}

export type JackpotWinScalarWhereInput = {
  AND?: Prisma.JackpotWinScalarWhereInput | Prisma.JackpotWinScalarWhereInput[]
  OR?: Prisma.JackpotWinScalarWhereInput[]
  NOT?: Prisma.JackpotWinScalarWhereInput | Prisma.JackpotWinScalarWhereInput[]
  id?: Prisma.StringFilter<"JackpotWin"> | string
  jackpotId?: Prisma.StringFilter<"JackpotWin"> | string
  winnerId?: Prisma.StringFilter<"JackpotWin"> | string
  winAmountCoins?: Prisma.IntFilter<"JackpotWin"> | number
  gameSpinId?: Prisma.StringFilter<"JackpotWin"> | string
  transactionId?: Prisma.StringNullableFilter<"JackpotWin"> | string | null
  createdAt?: Prisma.DateTimeFilter<"JackpotWin"> | Date | string
}

export type JackpotWinCreateWithoutTransactionInput = {
  id?: string
  winAmountCoins: number
  createdAt?: Date | string
  gameSpin: Prisma.GameSpinCreateNestedOneWithoutJackpotWinInput
  jackpot: Prisma.JackpotCreateNestedOneWithoutWinsInput
  winner: Prisma.UserProfileCreateNestedOneWithoutJackpotWinsInput
}

export type JackpotWinUncheckedCreateWithoutTransactionInput = {
  id?: string
  jackpotId: string
  winnerId: string
  winAmountCoins: number
  gameSpinId: string
  createdAt?: Date | string
}

export type JackpotWinCreateOrConnectWithoutTransactionInput = {
  where: Prisma.JackpotWinWhereUniqueInput
  create: Prisma.XOR<Prisma.JackpotWinCreateWithoutTransactionInput, Prisma.JackpotWinUncheckedCreateWithoutTransactionInput>
}

export type JackpotWinCreateManyTransactionInputEnvelope = {
  data: Prisma.JackpotWinCreateManyTransactionInput | Prisma.JackpotWinCreateManyTransactionInput[]
  skipDuplicates?: boolean
}

export type JackpotWinUpsertWithWhereUniqueWithoutTransactionInput = {
  where: Prisma.JackpotWinWhereUniqueInput
  update: Prisma.XOR<Prisma.JackpotWinUpdateWithoutTransactionInput, Prisma.JackpotWinUncheckedUpdateWithoutTransactionInput>
  create: Prisma.XOR<Prisma.JackpotWinCreateWithoutTransactionInput, Prisma.JackpotWinUncheckedCreateWithoutTransactionInput>
}

export type JackpotWinUpdateWithWhereUniqueWithoutTransactionInput = {
  where: Prisma.JackpotWinWhereUniqueInput
  data: Prisma.XOR<Prisma.JackpotWinUpdateWithoutTransactionInput, Prisma.JackpotWinUncheckedUpdateWithoutTransactionInput>
}

export type JackpotWinUpdateManyWithWhereWithoutTransactionInput = {
  where: Prisma.JackpotWinScalarWhereInput
  data: Prisma.XOR<Prisma.JackpotWinUpdateManyMutationInput, Prisma.JackpotWinUncheckedUpdateManyWithoutTransactionInput>
}

export type JackpotWinCreateWithoutWinnerInput = {
  id?: string
  winAmountCoins: number
  createdAt?: Date | string
  gameSpin: Prisma.GameSpinCreateNestedOneWithoutJackpotWinInput
  jackpot: Prisma.JackpotCreateNestedOneWithoutWinsInput
  transaction?: Prisma.TransactionCreateNestedOneWithoutJackpotWinsInput
}

export type JackpotWinUncheckedCreateWithoutWinnerInput = {
  id?: string
  jackpotId: string
  winAmountCoins: number
  gameSpinId: string
  transactionId?: string | null
  createdAt?: Date | string
}

export type JackpotWinCreateOrConnectWithoutWinnerInput = {
  where: Prisma.JackpotWinWhereUniqueInput
  create: Prisma.XOR<Prisma.JackpotWinCreateWithoutWinnerInput, Prisma.JackpotWinUncheckedCreateWithoutWinnerInput>
}

export type JackpotWinCreateManyWinnerInputEnvelope = {
  data: Prisma.JackpotWinCreateManyWinnerInput | Prisma.JackpotWinCreateManyWinnerInput[]
  skipDuplicates?: boolean
}

export type JackpotWinUpsertWithWhereUniqueWithoutWinnerInput = {
  where: Prisma.JackpotWinWhereUniqueInput
  update: Prisma.XOR<Prisma.JackpotWinUpdateWithoutWinnerInput, Prisma.JackpotWinUncheckedUpdateWithoutWinnerInput>
  create: Prisma.XOR<Prisma.JackpotWinCreateWithoutWinnerInput, Prisma.JackpotWinUncheckedCreateWithoutWinnerInput>
}

export type JackpotWinUpdateWithWhereUniqueWithoutWinnerInput = {
  where: Prisma.JackpotWinWhereUniqueInput
  data: Prisma.XOR<Prisma.JackpotWinUpdateWithoutWinnerInput, Prisma.JackpotWinUncheckedUpdateWithoutWinnerInput>
}

export type JackpotWinUpdateManyWithWhereWithoutWinnerInput = {
  where: Prisma.JackpotWinScalarWhereInput
  data: Prisma.XOR<Prisma.JackpotWinUpdateManyMutationInput, Prisma.JackpotWinUncheckedUpdateManyWithoutWinnerInput>
}

export type JackpotWinCreateManyJackpotInput = {
  id?: string
  winnerId: string
  winAmountCoins: number
  gameSpinId: string
  transactionId?: string | null
  createdAt?: Date | string
}

export type JackpotWinUpdateWithoutJackpotInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  winAmountCoins?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  gameSpin?: Prisma.GameSpinUpdateOneRequiredWithoutJackpotWinNestedInput
  transaction?: Prisma.TransactionUpdateOneWithoutJackpotWinsNestedInput
  winner?: Prisma.UserProfileUpdateOneRequiredWithoutJackpotWinsNestedInput
}

export type JackpotWinUncheckedUpdateWithoutJackpotInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  winnerId?: Prisma.StringFieldUpdateOperationsInput | string
  winAmountCoins?: Prisma.IntFieldUpdateOperationsInput | number
  gameSpinId?: Prisma.StringFieldUpdateOperationsInput | string
  transactionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type JackpotWinUncheckedUpdateManyWithoutJackpotInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  winnerId?: Prisma.StringFieldUpdateOperationsInput | string
  winAmountCoins?: Prisma.IntFieldUpdateOperationsInput | number
  gameSpinId?: Prisma.StringFieldUpdateOperationsInput | string
  transactionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type JackpotWinCreateManyTransactionInput = {
  id?: string
  jackpotId: string
  winnerId: string
  winAmountCoins: number
  gameSpinId: string
  createdAt?: Date | string
}

export type JackpotWinUpdateWithoutTransactionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  winAmountCoins?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  gameSpin?: Prisma.GameSpinUpdateOneRequiredWithoutJackpotWinNestedInput
  jackpot?: Prisma.JackpotUpdateOneRequiredWithoutWinsNestedInput
  winner?: Prisma.UserProfileUpdateOneRequiredWithoutJackpotWinsNestedInput
}

export type JackpotWinUncheckedUpdateWithoutTransactionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  jackpotId?: Prisma.StringFieldUpdateOperationsInput | string
  winnerId?: Prisma.StringFieldUpdateOperationsInput | string
  winAmountCoins?: Prisma.IntFieldUpdateOperationsInput | number
  gameSpinId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type JackpotWinUncheckedUpdateManyWithoutTransactionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  jackpotId?: Prisma.StringFieldUpdateOperationsInput | string
  winnerId?: Prisma.StringFieldUpdateOperationsInput | string
  winAmountCoins?: Prisma.IntFieldUpdateOperationsInput | number
  gameSpinId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type JackpotWinCreateManyWinnerInput = {
  id?: string
  jackpotId: string
  winAmountCoins: number
  gameSpinId: string
  transactionId?: string | null
  createdAt?: Date | string
}

export type JackpotWinUpdateWithoutWinnerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  winAmountCoins?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  gameSpin?: Prisma.GameSpinUpdateOneRequiredWithoutJackpotWinNestedInput
  jackpot?: Prisma.JackpotUpdateOneRequiredWithoutWinsNestedInput
  transaction?: Prisma.TransactionUpdateOneWithoutJackpotWinsNestedInput
}

export type JackpotWinUncheckedUpdateWithoutWinnerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  jackpotId?: Prisma.StringFieldUpdateOperationsInput | string
  winAmountCoins?: Prisma.IntFieldUpdateOperationsInput | number
  gameSpinId?: Prisma.StringFieldUpdateOperationsInput | string
  transactionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type JackpotWinUncheckedUpdateManyWithoutWinnerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  jackpotId?: Prisma.StringFieldUpdateOperationsInput | string
  winAmountCoins?: Prisma.IntFieldUpdateOperationsInput | number
  gameSpinId?: Prisma.StringFieldUpdateOperationsInput | string
  transactionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type JackpotWinSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  jackpotId?: boolean
  winnerId?: boolean
  winAmountCoins?: boolean
  gameSpinId?: boolean
  transactionId?: boolean
  createdAt?: boolean
  gameSpin?: boolean | Prisma.GameSpinDefaultArgs<ExtArgs>
  jackpot?: boolean | Prisma.JackpotDefaultArgs<ExtArgs>
  transaction?: boolean | Prisma.JackpotWin$transactionArgs<ExtArgs>
  winner?: boolean | Prisma.UserProfileDefaultArgs<ExtArgs>
}, ExtArgs["result"]["jackpotWin"]>

export type JackpotWinSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  jackpotId?: boolean
  winnerId?: boolean
  winAmountCoins?: boolean
  gameSpinId?: boolean
  transactionId?: boolean
  createdAt?: boolean
  gameSpin?: boolean | Prisma.GameSpinDefaultArgs<ExtArgs>
  jackpot?: boolean | Prisma.JackpotDefaultArgs<ExtArgs>
  transaction?: boolean | Prisma.JackpotWin$transactionArgs<ExtArgs>
  winner?: boolean | Prisma.UserProfileDefaultArgs<ExtArgs>
}, ExtArgs["result"]["jackpotWin"]>

export type JackpotWinSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  jackpotId?: boolean
  winnerId?: boolean
  winAmountCoins?: boolean
  gameSpinId?: boolean
  transactionId?: boolean
  createdAt?: boolean
  gameSpin?: boolean | Prisma.GameSpinDefaultArgs<ExtArgs>
  jackpot?: boolean | Prisma.JackpotDefaultArgs<ExtArgs>
  transaction?: boolean | Prisma.JackpotWin$transactionArgs<ExtArgs>
  winner?: boolean | Prisma.UserProfileDefaultArgs<ExtArgs>
}, ExtArgs["result"]["jackpotWin"]>

export type JackpotWinSelectScalar = {
  id?: boolean
  jackpotId?: boolean
  winnerId?: boolean
  winAmountCoins?: boolean
  gameSpinId?: boolean
  transactionId?: boolean
  createdAt?: boolean
}

export type JackpotWinOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "jackpotId" | "winnerId" | "winAmountCoins" | "gameSpinId" | "transactionId" | "createdAt", ExtArgs["result"]["jackpotWin"]>
export type JackpotWinInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  gameSpin?: boolean | Prisma.GameSpinDefaultArgs<ExtArgs>
  jackpot?: boolean | Prisma.JackpotDefaultArgs<ExtArgs>
  transaction?: boolean | Prisma.JackpotWin$transactionArgs<ExtArgs>
  winner?: boolean | Prisma.UserProfileDefaultArgs<ExtArgs>
}
export type JackpotWinIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  gameSpin?: boolean | Prisma.GameSpinDefaultArgs<ExtArgs>
  jackpot?: boolean | Prisma.JackpotDefaultArgs<ExtArgs>
  transaction?: boolean | Prisma.JackpotWin$transactionArgs<ExtArgs>
  winner?: boolean | Prisma.UserProfileDefaultArgs<ExtArgs>
}
export type JackpotWinIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  gameSpin?: boolean | Prisma.GameSpinDefaultArgs<ExtArgs>
  jackpot?: boolean | Prisma.JackpotDefaultArgs<ExtArgs>
  transaction?: boolean | Prisma.JackpotWin$transactionArgs<ExtArgs>
  winner?: boolean | Prisma.UserProfileDefaultArgs<ExtArgs>
}

export type $JackpotWinPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "JackpotWin"
  objects: {
    gameSpin: Prisma.$GameSpinPayload<ExtArgs>
    jackpot: Prisma.$JackpotPayload<ExtArgs>
    transaction: Prisma.$TransactionPayload<ExtArgs> | null
    winner: Prisma.$UserProfilePayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    jackpotId: string
    winnerId: string
    winAmountCoins: number
    gameSpinId: string
    transactionId: string | null
    createdAt: Date
  }, ExtArgs["result"]["jackpotWin"]>
  composites: {}
}

export type JackpotWinGetPayload<S extends boolean | null | undefined | JackpotWinDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$JackpotWinPayload, S>

export type JackpotWinCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<JackpotWinFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: JackpotWinCountAggregateInputType | true
  }

export interface JackpotWinDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['JackpotWin'], meta: { name: 'JackpotWin' } }
  /**
   * Find zero or one JackpotWin that matches the filter.
   * @param {JackpotWinFindUniqueArgs} args - Arguments to find a JackpotWin
   * @example
   * // Get one JackpotWin
   * const jackpotWin = await prisma.jackpotWin.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends JackpotWinFindUniqueArgs>(args: Prisma.SelectSubset<T, JackpotWinFindUniqueArgs<ExtArgs>>): Prisma.Prisma__JackpotWinClient<runtime.Types.Result.GetResult<Prisma.$JackpotWinPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one JackpotWin that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {JackpotWinFindUniqueOrThrowArgs} args - Arguments to find a JackpotWin
   * @example
   * // Get one JackpotWin
   * const jackpotWin = await prisma.jackpotWin.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends JackpotWinFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, JackpotWinFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__JackpotWinClient<runtime.Types.Result.GetResult<Prisma.$JackpotWinPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first JackpotWin that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {JackpotWinFindFirstArgs} args - Arguments to find a JackpotWin
   * @example
   * // Get one JackpotWin
   * const jackpotWin = await prisma.jackpotWin.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends JackpotWinFindFirstArgs>(args?: Prisma.SelectSubset<T, JackpotWinFindFirstArgs<ExtArgs>>): Prisma.Prisma__JackpotWinClient<runtime.Types.Result.GetResult<Prisma.$JackpotWinPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first JackpotWin that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {JackpotWinFindFirstOrThrowArgs} args - Arguments to find a JackpotWin
   * @example
   * // Get one JackpotWin
   * const jackpotWin = await prisma.jackpotWin.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends JackpotWinFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, JackpotWinFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__JackpotWinClient<runtime.Types.Result.GetResult<Prisma.$JackpotWinPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more JackpotWins that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {JackpotWinFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all JackpotWins
   * const jackpotWins = await prisma.jackpotWin.findMany()
   * 
   * // Get first 10 JackpotWins
   * const jackpotWins = await prisma.jackpotWin.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const jackpotWinWithIdOnly = await prisma.jackpotWin.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends JackpotWinFindManyArgs>(args?: Prisma.SelectSubset<T, JackpotWinFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$JackpotWinPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a JackpotWin.
   * @param {JackpotWinCreateArgs} args - Arguments to create a JackpotWin.
   * @example
   * // Create one JackpotWin
   * const JackpotWin = await prisma.jackpotWin.create({
   *   data: {
   *     // ... data to create a JackpotWin
   *   }
   * })
   * 
   */
  create<T extends JackpotWinCreateArgs>(args: Prisma.SelectSubset<T, JackpotWinCreateArgs<ExtArgs>>): Prisma.Prisma__JackpotWinClient<runtime.Types.Result.GetResult<Prisma.$JackpotWinPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many JackpotWins.
   * @param {JackpotWinCreateManyArgs} args - Arguments to create many JackpotWins.
   * @example
   * // Create many JackpotWins
   * const jackpotWin = await prisma.jackpotWin.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends JackpotWinCreateManyArgs>(args?: Prisma.SelectSubset<T, JackpotWinCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many JackpotWins and returns the data saved in the database.
   * @param {JackpotWinCreateManyAndReturnArgs} args - Arguments to create many JackpotWins.
   * @example
   * // Create many JackpotWins
   * const jackpotWin = await prisma.jackpotWin.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many JackpotWins and only return the `id`
   * const jackpotWinWithIdOnly = await prisma.jackpotWin.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends JackpotWinCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, JackpotWinCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$JackpotWinPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a JackpotWin.
   * @param {JackpotWinDeleteArgs} args - Arguments to delete one JackpotWin.
   * @example
   * // Delete one JackpotWin
   * const JackpotWin = await prisma.jackpotWin.delete({
   *   where: {
   *     // ... filter to delete one JackpotWin
   *   }
   * })
   * 
   */
  delete<T extends JackpotWinDeleteArgs>(args: Prisma.SelectSubset<T, JackpotWinDeleteArgs<ExtArgs>>): Prisma.Prisma__JackpotWinClient<runtime.Types.Result.GetResult<Prisma.$JackpotWinPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one JackpotWin.
   * @param {JackpotWinUpdateArgs} args - Arguments to update one JackpotWin.
   * @example
   * // Update one JackpotWin
   * const jackpotWin = await prisma.jackpotWin.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends JackpotWinUpdateArgs>(args: Prisma.SelectSubset<T, JackpotWinUpdateArgs<ExtArgs>>): Prisma.Prisma__JackpotWinClient<runtime.Types.Result.GetResult<Prisma.$JackpotWinPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more JackpotWins.
   * @param {JackpotWinDeleteManyArgs} args - Arguments to filter JackpotWins to delete.
   * @example
   * // Delete a few JackpotWins
   * const { count } = await prisma.jackpotWin.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends JackpotWinDeleteManyArgs>(args?: Prisma.SelectSubset<T, JackpotWinDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more JackpotWins.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {JackpotWinUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many JackpotWins
   * const jackpotWin = await prisma.jackpotWin.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends JackpotWinUpdateManyArgs>(args: Prisma.SelectSubset<T, JackpotWinUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more JackpotWins and returns the data updated in the database.
   * @param {JackpotWinUpdateManyAndReturnArgs} args - Arguments to update many JackpotWins.
   * @example
   * // Update many JackpotWins
   * const jackpotWin = await prisma.jackpotWin.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more JackpotWins and only return the `id`
   * const jackpotWinWithIdOnly = await prisma.jackpotWin.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends JackpotWinUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, JackpotWinUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$JackpotWinPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one JackpotWin.
   * @param {JackpotWinUpsertArgs} args - Arguments to update or create a JackpotWin.
   * @example
   * // Update or create a JackpotWin
   * const jackpotWin = await prisma.jackpotWin.upsert({
   *   create: {
   *     // ... data to create a JackpotWin
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the JackpotWin we want to update
   *   }
   * })
   */
  upsert<T extends JackpotWinUpsertArgs>(args: Prisma.SelectSubset<T, JackpotWinUpsertArgs<ExtArgs>>): Prisma.Prisma__JackpotWinClient<runtime.Types.Result.GetResult<Prisma.$JackpotWinPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of JackpotWins.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {JackpotWinCountArgs} args - Arguments to filter JackpotWins to count.
   * @example
   * // Count the number of JackpotWins
   * const count = await prisma.jackpotWin.count({
   *   where: {
   *     // ... the filter for the JackpotWins we want to count
   *   }
   * })
  **/
  count<T extends JackpotWinCountArgs>(
    args?: Prisma.Subset<T, JackpotWinCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], JackpotWinCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a JackpotWin.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {JackpotWinAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends JackpotWinAggregateArgs>(args: Prisma.Subset<T, JackpotWinAggregateArgs>): Prisma.PrismaPromise<GetJackpotWinAggregateType<T>>

  /**
   * Group by JackpotWin.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {JackpotWinGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends JackpotWinGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: JackpotWinGroupByArgs['orderBy'] }
      : { orderBy?: JackpotWinGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, JackpotWinGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJackpotWinGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the JackpotWin model
 */
readonly fields: JackpotWinFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for JackpotWin.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__JackpotWinClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  gameSpin<T extends Prisma.GameSpinDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.GameSpinDefaultArgs<ExtArgs>>): Prisma.Prisma__GameSpinClient<runtime.Types.Result.GetResult<Prisma.$GameSpinPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  jackpot<T extends Prisma.JackpotDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.JackpotDefaultArgs<ExtArgs>>): Prisma.Prisma__JackpotClient<runtime.Types.Result.GetResult<Prisma.$JackpotPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  transaction<T extends Prisma.JackpotWin$transactionArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.JackpotWin$transactionArgs<ExtArgs>>): Prisma.Prisma__TransactionClient<runtime.Types.Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  winner<T extends Prisma.UserProfileDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserProfileDefaultArgs<ExtArgs>>): Prisma.Prisma__UserProfileClient<runtime.Types.Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the JackpotWin model
 */
export interface JackpotWinFieldRefs {
  readonly id: Prisma.FieldRef<"JackpotWin", 'String'>
  readonly jackpotId: Prisma.FieldRef<"JackpotWin", 'String'>
  readonly winnerId: Prisma.FieldRef<"JackpotWin", 'String'>
  readonly winAmountCoins: Prisma.FieldRef<"JackpotWin", 'Int'>
  readonly gameSpinId: Prisma.FieldRef<"JackpotWin", 'String'>
  readonly transactionId: Prisma.FieldRef<"JackpotWin", 'String'>
  readonly createdAt: Prisma.FieldRef<"JackpotWin", 'DateTime'>
}
    

// Custom InputTypes
/**
 * JackpotWin findUnique
 */
export type JackpotWinFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the JackpotWin
   */
  select?: Prisma.JackpotWinSelect<ExtArgs> | null
  /**
   * Omit specific fields from the JackpotWin
   */
  omit?: Prisma.JackpotWinOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.JackpotWinInclude<ExtArgs> | null
  /**
   * Filter, which JackpotWin to fetch.
   */
  where: Prisma.JackpotWinWhereUniqueInput
}

/**
 * JackpotWin findUniqueOrThrow
 */
export type JackpotWinFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the JackpotWin
   */
  select?: Prisma.JackpotWinSelect<ExtArgs> | null
  /**
   * Omit specific fields from the JackpotWin
   */
  omit?: Prisma.JackpotWinOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.JackpotWinInclude<ExtArgs> | null
  /**
   * Filter, which JackpotWin to fetch.
   */
  where: Prisma.JackpotWinWhereUniqueInput
}

/**
 * JackpotWin findFirst
 */
export type JackpotWinFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the JackpotWin
   */
  select?: Prisma.JackpotWinSelect<ExtArgs> | null
  /**
   * Omit specific fields from the JackpotWin
   */
  omit?: Prisma.JackpotWinOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.JackpotWinInclude<ExtArgs> | null
  /**
   * Filter, which JackpotWin to fetch.
   */
  where?: Prisma.JackpotWinWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of JackpotWins to fetch.
   */
  orderBy?: Prisma.JackpotWinOrderByWithRelationInput | Prisma.JackpotWinOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for JackpotWins.
   */
  cursor?: Prisma.JackpotWinWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` JackpotWins from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` JackpotWins.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of JackpotWins.
   */
  distinct?: Prisma.JackpotWinScalarFieldEnum | Prisma.JackpotWinScalarFieldEnum[]
}

/**
 * JackpotWin findFirstOrThrow
 */
export type JackpotWinFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the JackpotWin
   */
  select?: Prisma.JackpotWinSelect<ExtArgs> | null
  /**
   * Omit specific fields from the JackpotWin
   */
  omit?: Prisma.JackpotWinOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.JackpotWinInclude<ExtArgs> | null
  /**
   * Filter, which JackpotWin to fetch.
   */
  where?: Prisma.JackpotWinWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of JackpotWins to fetch.
   */
  orderBy?: Prisma.JackpotWinOrderByWithRelationInput | Prisma.JackpotWinOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for JackpotWins.
   */
  cursor?: Prisma.JackpotWinWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` JackpotWins from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` JackpotWins.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of JackpotWins.
   */
  distinct?: Prisma.JackpotWinScalarFieldEnum | Prisma.JackpotWinScalarFieldEnum[]
}

/**
 * JackpotWin findMany
 */
export type JackpotWinFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the JackpotWin
   */
  select?: Prisma.JackpotWinSelect<ExtArgs> | null
  /**
   * Omit specific fields from the JackpotWin
   */
  omit?: Prisma.JackpotWinOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.JackpotWinInclude<ExtArgs> | null
  /**
   * Filter, which JackpotWins to fetch.
   */
  where?: Prisma.JackpotWinWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of JackpotWins to fetch.
   */
  orderBy?: Prisma.JackpotWinOrderByWithRelationInput | Prisma.JackpotWinOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing JackpotWins.
   */
  cursor?: Prisma.JackpotWinWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` JackpotWins from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` JackpotWins.
   */
  skip?: number
  distinct?: Prisma.JackpotWinScalarFieldEnum | Prisma.JackpotWinScalarFieldEnum[]
}

/**
 * JackpotWin create
 */
export type JackpotWinCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the JackpotWin
   */
  select?: Prisma.JackpotWinSelect<ExtArgs> | null
  /**
   * Omit specific fields from the JackpotWin
   */
  omit?: Prisma.JackpotWinOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.JackpotWinInclude<ExtArgs> | null
  /**
   * The data needed to create a JackpotWin.
   */
  data: Prisma.XOR<Prisma.JackpotWinCreateInput, Prisma.JackpotWinUncheckedCreateInput>
}

/**
 * JackpotWin createMany
 */
export type JackpotWinCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many JackpotWins.
   */
  data: Prisma.JackpotWinCreateManyInput | Prisma.JackpotWinCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * JackpotWin createManyAndReturn
 */
export type JackpotWinCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the JackpotWin
   */
  select?: Prisma.JackpotWinSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the JackpotWin
   */
  omit?: Prisma.JackpotWinOmit<ExtArgs> | null
  /**
   * The data used to create many JackpotWins.
   */
  data: Prisma.JackpotWinCreateManyInput | Prisma.JackpotWinCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.JackpotWinIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * JackpotWin update
 */
export type JackpotWinUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the JackpotWin
   */
  select?: Prisma.JackpotWinSelect<ExtArgs> | null
  /**
   * Omit specific fields from the JackpotWin
   */
  omit?: Prisma.JackpotWinOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.JackpotWinInclude<ExtArgs> | null
  /**
   * The data needed to update a JackpotWin.
   */
  data: Prisma.XOR<Prisma.JackpotWinUpdateInput, Prisma.JackpotWinUncheckedUpdateInput>
  /**
   * Choose, which JackpotWin to update.
   */
  where: Prisma.JackpotWinWhereUniqueInput
}

/**
 * JackpotWin updateMany
 */
export type JackpotWinUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update JackpotWins.
   */
  data: Prisma.XOR<Prisma.JackpotWinUpdateManyMutationInput, Prisma.JackpotWinUncheckedUpdateManyInput>
  /**
   * Filter which JackpotWins to update
   */
  where?: Prisma.JackpotWinWhereInput
  /**
   * Limit how many JackpotWins to update.
   */
  limit?: number
}

/**
 * JackpotWin updateManyAndReturn
 */
export type JackpotWinUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the JackpotWin
   */
  select?: Prisma.JackpotWinSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the JackpotWin
   */
  omit?: Prisma.JackpotWinOmit<ExtArgs> | null
  /**
   * The data used to update JackpotWins.
   */
  data: Prisma.XOR<Prisma.JackpotWinUpdateManyMutationInput, Prisma.JackpotWinUncheckedUpdateManyInput>
  /**
   * Filter which JackpotWins to update
   */
  where?: Prisma.JackpotWinWhereInput
  /**
   * Limit how many JackpotWins to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.JackpotWinIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * JackpotWin upsert
 */
export type JackpotWinUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the JackpotWin
   */
  select?: Prisma.JackpotWinSelect<ExtArgs> | null
  /**
   * Omit specific fields from the JackpotWin
   */
  omit?: Prisma.JackpotWinOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.JackpotWinInclude<ExtArgs> | null
  /**
   * The filter to search for the JackpotWin to update in case it exists.
   */
  where: Prisma.JackpotWinWhereUniqueInput
  /**
   * In case the JackpotWin found by the `where` argument doesn't exist, create a new JackpotWin with this data.
   */
  create: Prisma.XOR<Prisma.JackpotWinCreateInput, Prisma.JackpotWinUncheckedCreateInput>
  /**
   * In case the JackpotWin was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.JackpotWinUpdateInput, Prisma.JackpotWinUncheckedUpdateInput>
}

/**
 * JackpotWin delete
 */
export type JackpotWinDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the JackpotWin
   */
  select?: Prisma.JackpotWinSelect<ExtArgs> | null
  /**
   * Omit specific fields from the JackpotWin
   */
  omit?: Prisma.JackpotWinOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.JackpotWinInclude<ExtArgs> | null
  /**
   * Filter which JackpotWin to delete.
   */
  where: Prisma.JackpotWinWhereUniqueInput
}

/**
 * JackpotWin deleteMany
 */
export type JackpotWinDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which JackpotWins to delete
   */
  where?: Prisma.JackpotWinWhereInput
  /**
   * Limit how many JackpotWins to delete.
   */
  limit?: number
}

/**
 * JackpotWin.transaction
 */
export type JackpotWin$transactionArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Transaction
   */
  select?: Prisma.TransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Transaction
   */
  omit?: Prisma.TransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionInclude<ExtArgs> | null
  where?: Prisma.TransactionWhereInput
}

/**
 * JackpotWin without action
 */
export type JackpotWinDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the JackpotWin
   */
  select?: Prisma.JackpotWinSelect<ExtArgs> | null
  /**
   * Omit specific fields from the JackpotWin
   */
  omit?: Prisma.JackpotWinOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.JackpotWinInclude<ExtArgs> | null
}
