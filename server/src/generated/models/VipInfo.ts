
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `VipInfo` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model VipInfo
 * 
 */
export type VipInfoModel = runtime.Types.Result.DefaultSelection<Prisma.$VipInfoPayload>

export type AggregateVipInfo = {
  _count: VipInfoCountAggregateOutputType | null
  _avg: VipInfoAvgAggregateOutputType | null
  _sum: VipInfoSumAggregateOutputType | null
  _min: VipInfoMinAggregateOutputType | null
  _max: VipInfoMaxAggregateOutputType | null
}

export type VipInfoAvgAggregateOutputType = {
  level: number | null
  currentLevelXp: number | null
  totalXp: number | null
  cashbackPercentage: number | null
}

export type VipInfoSumAggregateOutputType = {
  level: number | null
  currentLevelXp: number | null
  totalXp: number | null
  cashbackPercentage: number | null
}

export type VipInfoMinAggregateOutputType = {
  id: string | null
  createdAt: Date | null
  updatedAt: Date | null
  username: string | null
  avatar: string | null
  userId: string | null
  level: number | null
  currentLevelXp: number | null
  totalXp: number | null
  dailyBonusClaimedAt: Date | null
  weeklyBonusClaimedAt: Date | null
  monthlyBonusClaimedAt: Date | null
  cashbackPercentage: number | null
}

export type VipInfoMaxAggregateOutputType = {
  id: string | null
  createdAt: Date | null
  updatedAt: Date | null
  username: string | null
  avatar: string | null
  userId: string | null
  level: number | null
  currentLevelXp: number | null
  totalXp: number | null
  dailyBonusClaimedAt: Date | null
  weeklyBonusClaimedAt: Date | null
  monthlyBonusClaimedAt: Date | null
  cashbackPercentage: number | null
}

export type VipInfoCountAggregateOutputType = {
  id: number
  createdAt: number
  updatedAt: number
  username: number
  avatar: number
  userId: number
  level: number
  currentLevelXp: number
  totalXp: number
  dailyBonusClaimedAt: number
  weeklyBonusClaimedAt: number
  monthlyBonusClaimedAt: number
  cashbackPercentage: number
  _all: number
}


export type VipInfoAvgAggregateInputType = {
  level?: true
  currentLevelXp?: true
  totalXp?: true
  cashbackPercentage?: true
}

export type VipInfoSumAggregateInputType = {
  level?: true
  currentLevelXp?: true
  totalXp?: true
  cashbackPercentage?: true
}

export type VipInfoMinAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  username?: true
  avatar?: true
  userId?: true
  level?: true
  currentLevelXp?: true
  totalXp?: true
  dailyBonusClaimedAt?: true
  weeklyBonusClaimedAt?: true
  monthlyBonusClaimedAt?: true
  cashbackPercentage?: true
}

export type VipInfoMaxAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  username?: true
  avatar?: true
  userId?: true
  level?: true
  currentLevelXp?: true
  totalXp?: true
  dailyBonusClaimedAt?: true
  weeklyBonusClaimedAt?: true
  monthlyBonusClaimedAt?: true
  cashbackPercentage?: true
}

export type VipInfoCountAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  username?: true
  avatar?: true
  userId?: true
  level?: true
  currentLevelXp?: true
  totalXp?: true
  dailyBonusClaimedAt?: true
  weeklyBonusClaimedAt?: true
  monthlyBonusClaimedAt?: true
  cashbackPercentage?: true
  _all?: true
}

export type VipInfoAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which VipInfo to aggregate.
   */
  where?: Prisma.VipInfoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of VipInfos to fetch.
   */
  orderBy?: Prisma.VipInfoOrderByWithRelationInput | Prisma.VipInfoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.VipInfoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` VipInfos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` VipInfos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned VipInfos
  **/
  _count?: true | VipInfoCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: VipInfoAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: VipInfoSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: VipInfoMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: VipInfoMaxAggregateInputType
}

export type GetVipInfoAggregateType<T extends VipInfoAggregateArgs> = {
      [P in keyof T & keyof AggregateVipInfo]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateVipInfo[P]>
    : Prisma.GetScalarType<T[P], AggregateVipInfo[P]>
}




export type VipInfoGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.VipInfoWhereInput
  orderBy?: Prisma.VipInfoOrderByWithAggregationInput | Prisma.VipInfoOrderByWithAggregationInput[]
  by: Prisma.VipInfoScalarFieldEnum[] | Prisma.VipInfoScalarFieldEnum
  having?: Prisma.VipInfoScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: VipInfoCountAggregateInputType | true
  _avg?: VipInfoAvgAggregateInputType
  _sum?: VipInfoSumAggregateInputType
  _min?: VipInfoMinAggregateInputType
  _max?: VipInfoMaxAggregateInputType
}

export type VipInfoGroupByOutputType = {
  id: string
  createdAt: Date
  updatedAt: Date
  username: string
  avatar: string | null
  userId: string
  level: number
  currentLevelXp: number
  totalXp: number
  dailyBonusClaimedAt: Date | null
  weeklyBonusClaimedAt: Date | null
  monthlyBonusClaimedAt: Date | null
  cashbackPercentage: number
  _count: VipInfoCountAggregateOutputType | null
  _avg: VipInfoAvgAggregateOutputType | null
  _sum: VipInfoSumAggregateOutputType | null
  _min: VipInfoMinAggregateOutputType | null
  _max: VipInfoMaxAggregateOutputType | null
}

type GetVipInfoGroupByPayload<T extends VipInfoGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<VipInfoGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof VipInfoGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], VipInfoGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], VipInfoGroupByOutputType[P]>
      }
    >
  > 



export type VipInfoWhereInput = {
  AND?: Prisma.VipInfoWhereInput | Prisma.VipInfoWhereInput[]
  OR?: Prisma.VipInfoWhereInput[]
  NOT?: Prisma.VipInfoWhereInput | Prisma.VipInfoWhereInput[]
  id?: Prisma.StringFilter<"VipInfo"> | string
  createdAt?: Prisma.DateTimeFilter<"VipInfo"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"VipInfo"> | Date | string
  username?: Prisma.StringFilter<"VipInfo"> | string
  avatar?: Prisma.StringNullableFilter<"VipInfo"> | string | null
  userId?: Prisma.StringFilter<"VipInfo"> | string
  level?: Prisma.IntFilter<"VipInfo"> | number
  currentLevelXp?: Prisma.IntFilter<"VipInfo"> | number
  totalXp?: Prisma.IntFilter<"VipInfo"> | number
  dailyBonusClaimedAt?: Prisma.DateTimeNullableFilter<"VipInfo"> | Date | string | null
  weeklyBonusClaimedAt?: Prisma.DateTimeNullableFilter<"VipInfo"> | Date | string | null
  monthlyBonusClaimedAt?: Prisma.DateTimeNullableFilter<"VipInfo"> | Date | string | null
  cashbackPercentage?: Prisma.IntFilter<"VipInfo"> | number
  userProfile?: Prisma.XOR<Prisma.UserProfileNullableScalarRelationFilter, Prisma.UserProfileWhereInput> | null
}

export type VipInfoOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  username?: Prisma.SortOrder
  avatar?: Prisma.SortOrderInput | Prisma.SortOrder
  userId?: Prisma.SortOrder
  level?: Prisma.SortOrder
  currentLevelXp?: Prisma.SortOrder
  totalXp?: Prisma.SortOrder
  dailyBonusClaimedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  weeklyBonusClaimedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  monthlyBonusClaimedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  cashbackPercentage?: Prisma.SortOrder
  userProfile?: Prisma.UserProfileOrderByWithRelationInput
}

export type VipInfoWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  username?: string
  userId?: string
  AND?: Prisma.VipInfoWhereInput | Prisma.VipInfoWhereInput[]
  OR?: Prisma.VipInfoWhereInput[]
  NOT?: Prisma.VipInfoWhereInput | Prisma.VipInfoWhereInput[]
  createdAt?: Prisma.DateTimeFilter<"VipInfo"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"VipInfo"> | Date | string
  avatar?: Prisma.StringNullableFilter<"VipInfo"> | string | null
  level?: Prisma.IntFilter<"VipInfo"> | number
  currentLevelXp?: Prisma.IntFilter<"VipInfo"> | number
  totalXp?: Prisma.IntFilter<"VipInfo"> | number
  dailyBonusClaimedAt?: Prisma.DateTimeNullableFilter<"VipInfo"> | Date | string | null
  weeklyBonusClaimedAt?: Prisma.DateTimeNullableFilter<"VipInfo"> | Date | string | null
  monthlyBonusClaimedAt?: Prisma.DateTimeNullableFilter<"VipInfo"> | Date | string | null
  cashbackPercentage?: Prisma.IntFilter<"VipInfo"> | number
  userProfile?: Prisma.XOR<Prisma.UserProfileNullableScalarRelationFilter, Prisma.UserProfileWhereInput> | null
}, "id" | "username" | "userId">

export type VipInfoOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  username?: Prisma.SortOrder
  avatar?: Prisma.SortOrderInput | Prisma.SortOrder
  userId?: Prisma.SortOrder
  level?: Prisma.SortOrder
  currentLevelXp?: Prisma.SortOrder
  totalXp?: Prisma.SortOrder
  dailyBonusClaimedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  weeklyBonusClaimedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  monthlyBonusClaimedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  cashbackPercentage?: Prisma.SortOrder
  _count?: Prisma.VipInfoCountOrderByAggregateInput
  _avg?: Prisma.VipInfoAvgOrderByAggregateInput
  _max?: Prisma.VipInfoMaxOrderByAggregateInput
  _min?: Prisma.VipInfoMinOrderByAggregateInput
  _sum?: Prisma.VipInfoSumOrderByAggregateInput
}

export type VipInfoScalarWhereWithAggregatesInput = {
  AND?: Prisma.VipInfoScalarWhereWithAggregatesInput | Prisma.VipInfoScalarWhereWithAggregatesInput[]
  OR?: Prisma.VipInfoScalarWhereWithAggregatesInput[]
  NOT?: Prisma.VipInfoScalarWhereWithAggregatesInput | Prisma.VipInfoScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"VipInfo"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"VipInfo"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"VipInfo"> | Date | string
  username?: Prisma.StringWithAggregatesFilter<"VipInfo"> | string
  avatar?: Prisma.StringNullableWithAggregatesFilter<"VipInfo"> | string | null
  userId?: Prisma.StringWithAggregatesFilter<"VipInfo"> | string
  level?: Prisma.IntWithAggregatesFilter<"VipInfo"> | number
  currentLevelXp?: Prisma.IntWithAggregatesFilter<"VipInfo"> | number
  totalXp?: Prisma.IntWithAggregatesFilter<"VipInfo"> | number
  dailyBonusClaimedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"VipInfo"> | Date | string | null
  weeklyBonusClaimedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"VipInfo"> | Date | string | null
  monthlyBonusClaimedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"VipInfo"> | Date | string | null
  cashbackPercentage?: Prisma.IntWithAggregatesFilter<"VipInfo"> | number
}

export type VipInfoCreateInput = {
  id: string
  createdAt?: Date | string
  updatedAt?: Date | string
  username: string
  avatar?: string | null
  userId: string
  level?: number
  currentLevelXp?: number
  totalXp?: number
  dailyBonusClaimedAt?: Date | string | null
  weeklyBonusClaimedAt?: Date | string | null
  monthlyBonusClaimedAt?: Date | string | null
  cashbackPercentage?: number
  userProfile?: Prisma.UserProfileCreateNestedOneWithoutVipInfoInput
}

export type VipInfoUncheckedCreateInput = {
  id: string
  createdAt?: Date | string
  updatedAt?: Date | string
  username: string
  avatar?: string | null
  userId: string
  level?: number
  currentLevelXp?: number
  totalXp?: number
  dailyBonusClaimedAt?: Date | string | null
  weeklyBonusClaimedAt?: Date | string | null
  monthlyBonusClaimedAt?: Date | string | null
  cashbackPercentage?: number
  userProfile?: Prisma.UserProfileUncheckedCreateNestedOneWithoutVipInfoInput
}

export type VipInfoUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  level?: Prisma.IntFieldUpdateOperationsInput | number
  currentLevelXp?: Prisma.IntFieldUpdateOperationsInput | number
  totalXp?: Prisma.IntFieldUpdateOperationsInput | number
  dailyBonusClaimedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  weeklyBonusClaimedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  monthlyBonusClaimedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  cashbackPercentage?: Prisma.IntFieldUpdateOperationsInput | number
  userProfile?: Prisma.UserProfileUpdateOneWithoutVipInfoNestedInput
}

export type VipInfoUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  level?: Prisma.IntFieldUpdateOperationsInput | number
  currentLevelXp?: Prisma.IntFieldUpdateOperationsInput | number
  totalXp?: Prisma.IntFieldUpdateOperationsInput | number
  dailyBonusClaimedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  weeklyBonusClaimedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  monthlyBonusClaimedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  cashbackPercentage?: Prisma.IntFieldUpdateOperationsInput | number
  userProfile?: Prisma.UserProfileUncheckedUpdateOneWithoutVipInfoNestedInput
}

export type VipInfoCreateManyInput = {
  id: string
  createdAt?: Date | string
  updatedAt?: Date | string
  username: string
  avatar?: string | null
  userId: string
  level?: number
  currentLevelXp?: number
  totalXp?: number
  dailyBonusClaimedAt?: Date | string | null
  weeklyBonusClaimedAt?: Date | string | null
  monthlyBonusClaimedAt?: Date | string | null
  cashbackPercentage?: number
}

export type VipInfoUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  level?: Prisma.IntFieldUpdateOperationsInput | number
  currentLevelXp?: Prisma.IntFieldUpdateOperationsInput | number
  totalXp?: Prisma.IntFieldUpdateOperationsInput | number
  dailyBonusClaimedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  weeklyBonusClaimedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  monthlyBonusClaimedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  cashbackPercentage?: Prisma.IntFieldUpdateOperationsInput | number
}

export type VipInfoUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  level?: Prisma.IntFieldUpdateOperationsInput | number
  currentLevelXp?: Prisma.IntFieldUpdateOperationsInput | number
  totalXp?: Prisma.IntFieldUpdateOperationsInput | number
  dailyBonusClaimedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  weeklyBonusClaimedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  monthlyBonusClaimedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  cashbackPercentage?: Prisma.IntFieldUpdateOperationsInput | number
}

export type VipInfoScalarRelationFilter = {
  is?: Prisma.VipInfoWhereInput
  isNot?: Prisma.VipInfoWhereInput
}

export type VipInfoCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  username?: Prisma.SortOrder
  avatar?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  level?: Prisma.SortOrder
  currentLevelXp?: Prisma.SortOrder
  totalXp?: Prisma.SortOrder
  dailyBonusClaimedAt?: Prisma.SortOrder
  weeklyBonusClaimedAt?: Prisma.SortOrder
  monthlyBonusClaimedAt?: Prisma.SortOrder
  cashbackPercentage?: Prisma.SortOrder
}

export type VipInfoAvgOrderByAggregateInput = {
  level?: Prisma.SortOrder
  currentLevelXp?: Prisma.SortOrder
  totalXp?: Prisma.SortOrder
  cashbackPercentage?: Prisma.SortOrder
}

export type VipInfoMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  username?: Prisma.SortOrder
  avatar?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  level?: Prisma.SortOrder
  currentLevelXp?: Prisma.SortOrder
  totalXp?: Prisma.SortOrder
  dailyBonusClaimedAt?: Prisma.SortOrder
  weeklyBonusClaimedAt?: Prisma.SortOrder
  monthlyBonusClaimedAt?: Prisma.SortOrder
  cashbackPercentage?: Prisma.SortOrder
}

export type VipInfoMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  username?: Prisma.SortOrder
  avatar?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  level?: Prisma.SortOrder
  currentLevelXp?: Prisma.SortOrder
  totalXp?: Prisma.SortOrder
  dailyBonusClaimedAt?: Prisma.SortOrder
  weeklyBonusClaimedAt?: Prisma.SortOrder
  monthlyBonusClaimedAt?: Prisma.SortOrder
  cashbackPercentage?: Prisma.SortOrder
}

export type VipInfoSumOrderByAggregateInput = {
  level?: Prisma.SortOrder
  currentLevelXp?: Prisma.SortOrder
  totalXp?: Prisma.SortOrder
  cashbackPercentage?: Prisma.SortOrder
}

export type VipInfoCreateNestedOneWithoutUserProfileInput = {
  create?: Prisma.XOR<Prisma.VipInfoCreateWithoutUserProfileInput, Prisma.VipInfoUncheckedCreateWithoutUserProfileInput>
  connectOrCreate?: Prisma.VipInfoCreateOrConnectWithoutUserProfileInput
  connect?: Prisma.VipInfoWhereUniqueInput
}

export type VipInfoUpdateOneRequiredWithoutUserProfileNestedInput = {
  create?: Prisma.XOR<Prisma.VipInfoCreateWithoutUserProfileInput, Prisma.VipInfoUncheckedCreateWithoutUserProfileInput>
  connectOrCreate?: Prisma.VipInfoCreateOrConnectWithoutUserProfileInput
  upsert?: Prisma.VipInfoUpsertWithoutUserProfileInput
  connect?: Prisma.VipInfoWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.VipInfoUpdateToOneWithWhereWithoutUserProfileInput, Prisma.VipInfoUpdateWithoutUserProfileInput>, Prisma.VipInfoUncheckedUpdateWithoutUserProfileInput>
}

export type VipInfoCreateWithoutUserProfileInput = {
  id: string
  createdAt?: Date | string
  updatedAt?: Date | string
  username: string
  avatar?: string | null
  userId: string
  level?: number
  currentLevelXp?: number
  totalXp?: number
  dailyBonusClaimedAt?: Date | string | null
  weeklyBonusClaimedAt?: Date | string | null
  monthlyBonusClaimedAt?: Date | string | null
  cashbackPercentage?: number
}

export type VipInfoUncheckedCreateWithoutUserProfileInput = {
  id: string
  createdAt?: Date | string
  updatedAt?: Date | string
  username: string
  avatar?: string | null
  userId: string
  level?: number
  currentLevelXp?: number
  totalXp?: number
  dailyBonusClaimedAt?: Date | string | null
  weeklyBonusClaimedAt?: Date | string | null
  monthlyBonusClaimedAt?: Date | string | null
  cashbackPercentage?: number
}

export type VipInfoCreateOrConnectWithoutUserProfileInput = {
  where: Prisma.VipInfoWhereUniqueInput
  create: Prisma.XOR<Prisma.VipInfoCreateWithoutUserProfileInput, Prisma.VipInfoUncheckedCreateWithoutUserProfileInput>
}

export type VipInfoUpsertWithoutUserProfileInput = {
  update: Prisma.XOR<Prisma.VipInfoUpdateWithoutUserProfileInput, Prisma.VipInfoUncheckedUpdateWithoutUserProfileInput>
  create: Prisma.XOR<Prisma.VipInfoCreateWithoutUserProfileInput, Prisma.VipInfoUncheckedCreateWithoutUserProfileInput>
  where?: Prisma.VipInfoWhereInput
}

export type VipInfoUpdateToOneWithWhereWithoutUserProfileInput = {
  where?: Prisma.VipInfoWhereInput
  data: Prisma.XOR<Prisma.VipInfoUpdateWithoutUserProfileInput, Prisma.VipInfoUncheckedUpdateWithoutUserProfileInput>
}

export type VipInfoUpdateWithoutUserProfileInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  level?: Prisma.IntFieldUpdateOperationsInput | number
  currentLevelXp?: Prisma.IntFieldUpdateOperationsInput | number
  totalXp?: Prisma.IntFieldUpdateOperationsInput | number
  dailyBonusClaimedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  weeklyBonusClaimedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  monthlyBonusClaimedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  cashbackPercentage?: Prisma.IntFieldUpdateOperationsInput | number
}

export type VipInfoUncheckedUpdateWithoutUserProfileInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  username?: Prisma.StringFieldUpdateOperationsInput | string
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  level?: Prisma.IntFieldUpdateOperationsInput | number
  currentLevelXp?: Prisma.IntFieldUpdateOperationsInput | number
  totalXp?: Prisma.IntFieldUpdateOperationsInput | number
  dailyBonusClaimedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  weeklyBonusClaimedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  monthlyBonusClaimedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  cashbackPercentage?: Prisma.IntFieldUpdateOperationsInput | number
}



export type VipInfoSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  username?: boolean
  avatar?: boolean
  userId?: boolean
  level?: boolean
  currentLevelXp?: boolean
  totalXp?: boolean
  dailyBonusClaimedAt?: boolean
  weeklyBonusClaimedAt?: boolean
  monthlyBonusClaimedAt?: boolean
  cashbackPercentage?: boolean
  userProfile?: boolean | Prisma.VipInfo$userProfileArgs<ExtArgs>
}, ExtArgs["result"]["vipInfo"]>

export type VipInfoSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  username?: boolean
  avatar?: boolean
  userId?: boolean
  level?: boolean
  currentLevelXp?: boolean
  totalXp?: boolean
  dailyBonusClaimedAt?: boolean
  weeklyBonusClaimedAt?: boolean
  monthlyBonusClaimedAt?: boolean
  cashbackPercentage?: boolean
}, ExtArgs["result"]["vipInfo"]>

export type VipInfoSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  username?: boolean
  avatar?: boolean
  userId?: boolean
  level?: boolean
  currentLevelXp?: boolean
  totalXp?: boolean
  dailyBonusClaimedAt?: boolean
  weeklyBonusClaimedAt?: boolean
  monthlyBonusClaimedAt?: boolean
  cashbackPercentage?: boolean
}, ExtArgs["result"]["vipInfo"]>

export type VipInfoSelectScalar = {
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  username?: boolean
  avatar?: boolean
  userId?: boolean
  level?: boolean
  currentLevelXp?: boolean
  totalXp?: boolean
  dailyBonusClaimedAt?: boolean
  weeklyBonusClaimedAt?: boolean
  monthlyBonusClaimedAt?: boolean
  cashbackPercentage?: boolean
}

export type VipInfoOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "username" | "avatar" | "userId" | "level" | "currentLevelXp" | "totalXp" | "dailyBonusClaimedAt" | "weeklyBonusClaimedAt" | "monthlyBonusClaimedAt" | "cashbackPercentage", ExtArgs["result"]["vipInfo"]>
export type VipInfoInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  userProfile?: boolean | Prisma.VipInfo$userProfileArgs<ExtArgs>
}
export type VipInfoIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type VipInfoIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $VipInfoPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "VipInfo"
  objects: {
    userProfile: Prisma.$UserProfilePayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    createdAt: Date
    updatedAt: Date
    username: string
    avatar: string | null
    userId: string
    level: number
    currentLevelXp: number
    totalXp: number
    dailyBonusClaimedAt: Date | null
    weeklyBonusClaimedAt: Date | null
    monthlyBonusClaimedAt: Date | null
    cashbackPercentage: number
  }, ExtArgs["result"]["vipInfo"]>
  composites: {}
}

export type VipInfoGetPayload<S extends boolean | null | undefined | VipInfoDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$VipInfoPayload, S>

export type VipInfoCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<VipInfoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: VipInfoCountAggregateInputType | true
  }

export interface VipInfoDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VipInfo'], meta: { name: 'VipInfo' } }
  /**
   * Find zero or one VipInfo that matches the filter.
   * @param {VipInfoFindUniqueArgs} args - Arguments to find a VipInfo
   * @example
   * // Get one VipInfo
   * const vipInfo = await prisma.vipInfo.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends VipInfoFindUniqueArgs>(args: Prisma.SelectSubset<T, VipInfoFindUniqueArgs<ExtArgs>>): Prisma.Prisma__VipInfoClient<runtime.Types.Result.GetResult<Prisma.$VipInfoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one VipInfo that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {VipInfoFindUniqueOrThrowArgs} args - Arguments to find a VipInfo
   * @example
   * // Get one VipInfo
   * const vipInfo = await prisma.vipInfo.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends VipInfoFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, VipInfoFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__VipInfoClient<runtime.Types.Result.GetResult<Prisma.$VipInfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first VipInfo that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VipInfoFindFirstArgs} args - Arguments to find a VipInfo
   * @example
   * // Get one VipInfo
   * const vipInfo = await prisma.vipInfo.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends VipInfoFindFirstArgs>(args?: Prisma.SelectSubset<T, VipInfoFindFirstArgs<ExtArgs>>): Prisma.Prisma__VipInfoClient<runtime.Types.Result.GetResult<Prisma.$VipInfoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first VipInfo that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VipInfoFindFirstOrThrowArgs} args - Arguments to find a VipInfo
   * @example
   * // Get one VipInfo
   * const vipInfo = await prisma.vipInfo.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends VipInfoFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, VipInfoFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__VipInfoClient<runtime.Types.Result.GetResult<Prisma.$VipInfoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more VipInfos that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VipInfoFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all VipInfos
   * const vipInfos = await prisma.vipInfo.findMany()
   * 
   * // Get first 10 VipInfos
   * const vipInfos = await prisma.vipInfo.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const vipInfoWithIdOnly = await prisma.vipInfo.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends VipInfoFindManyArgs>(args?: Prisma.SelectSubset<T, VipInfoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$VipInfoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a VipInfo.
   * @param {VipInfoCreateArgs} args - Arguments to create a VipInfo.
   * @example
   * // Create one VipInfo
   * const VipInfo = await prisma.vipInfo.create({
   *   data: {
   *     // ... data to create a VipInfo
   *   }
   * })
   * 
   */
  create<T extends VipInfoCreateArgs>(args: Prisma.SelectSubset<T, VipInfoCreateArgs<ExtArgs>>): Prisma.Prisma__VipInfoClient<runtime.Types.Result.GetResult<Prisma.$VipInfoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many VipInfos.
   * @param {VipInfoCreateManyArgs} args - Arguments to create many VipInfos.
   * @example
   * // Create many VipInfos
   * const vipInfo = await prisma.vipInfo.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends VipInfoCreateManyArgs>(args?: Prisma.SelectSubset<T, VipInfoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many VipInfos and returns the data saved in the database.
   * @param {VipInfoCreateManyAndReturnArgs} args - Arguments to create many VipInfos.
   * @example
   * // Create many VipInfos
   * const vipInfo = await prisma.vipInfo.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many VipInfos and only return the `id`
   * const vipInfoWithIdOnly = await prisma.vipInfo.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends VipInfoCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, VipInfoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$VipInfoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a VipInfo.
   * @param {VipInfoDeleteArgs} args - Arguments to delete one VipInfo.
   * @example
   * // Delete one VipInfo
   * const VipInfo = await prisma.vipInfo.delete({
   *   where: {
   *     // ... filter to delete one VipInfo
   *   }
   * })
   * 
   */
  delete<T extends VipInfoDeleteArgs>(args: Prisma.SelectSubset<T, VipInfoDeleteArgs<ExtArgs>>): Prisma.Prisma__VipInfoClient<runtime.Types.Result.GetResult<Prisma.$VipInfoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one VipInfo.
   * @param {VipInfoUpdateArgs} args - Arguments to update one VipInfo.
   * @example
   * // Update one VipInfo
   * const vipInfo = await prisma.vipInfo.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends VipInfoUpdateArgs>(args: Prisma.SelectSubset<T, VipInfoUpdateArgs<ExtArgs>>): Prisma.Prisma__VipInfoClient<runtime.Types.Result.GetResult<Prisma.$VipInfoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more VipInfos.
   * @param {VipInfoDeleteManyArgs} args - Arguments to filter VipInfos to delete.
   * @example
   * // Delete a few VipInfos
   * const { count } = await prisma.vipInfo.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends VipInfoDeleteManyArgs>(args?: Prisma.SelectSubset<T, VipInfoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more VipInfos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VipInfoUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many VipInfos
   * const vipInfo = await prisma.vipInfo.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends VipInfoUpdateManyArgs>(args: Prisma.SelectSubset<T, VipInfoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more VipInfos and returns the data updated in the database.
   * @param {VipInfoUpdateManyAndReturnArgs} args - Arguments to update many VipInfos.
   * @example
   * // Update many VipInfos
   * const vipInfo = await prisma.vipInfo.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more VipInfos and only return the `id`
   * const vipInfoWithIdOnly = await prisma.vipInfo.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends VipInfoUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, VipInfoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$VipInfoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one VipInfo.
   * @param {VipInfoUpsertArgs} args - Arguments to update or create a VipInfo.
   * @example
   * // Update or create a VipInfo
   * const vipInfo = await prisma.vipInfo.upsert({
   *   create: {
   *     // ... data to create a VipInfo
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the VipInfo we want to update
   *   }
   * })
   */
  upsert<T extends VipInfoUpsertArgs>(args: Prisma.SelectSubset<T, VipInfoUpsertArgs<ExtArgs>>): Prisma.Prisma__VipInfoClient<runtime.Types.Result.GetResult<Prisma.$VipInfoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of VipInfos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VipInfoCountArgs} args - Arguments to filter VipInfos to count.
   * @example
   * // Count the number of VipInfos
   * const count = await prisma.vipInfo.count({
   *   where: {
   *     // ... the filter for the VipInfos we want to count
   *   }
   * })
  **/
  count<T extends VipInfoCountArgs>(
    args?: Prisma.Subset<T, VipInfoCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], VipInfoCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a VipInfo.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VipInfoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends VipInfoAggregateArgs>(args: Prisma.Subset<T, VipInfoAggregateArgs>): Prisma.PrismaPromise<GetVipInfoAggregateType<T>>

  /**
   * Group by VipInfo.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VipInfoGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends VipInfoGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: VipInfoGroupByArgs['orderBy'] }
      : { orderBy?: VipInfoGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, VipInfoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVipInfoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the VipInfo model
 */
readonly fields: VipInfoFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for VipInfo.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__VipInfoClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  userProfile<T extends Prisma.VipInfo$userProfileArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.VipInfo$userProfileArgs<ExtArgs>>): Prisma.Prisma__UserProfileClient<runtime.Types.Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the VipInfo model
 */
export interface VipInfoFieldRefs {
  readonly id: Prisma.FieldRef<"VipInfo", 'String'>
  readonly createdAt: Prisma.FieldRef<"VipInfo", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"VipInfo", 'DateTime'>
  readonly username: Prisma.FieldRef<"VipInfo", 'String'>
  readonly avatar: Prisma.FieldRef<"VipInfo", 'String'>
  readonly userId: Prisma.FieldRef<"VipInfo", 'String'>
  readonly level: Prisma.FieldRef<"VipInfo", 'Int'>
  readonly currentLevelXp: Prisma.FieldRef<"VipInfo", 'Int'>
  readonly totalXp: Prisma.FieldRef<"VipInfo", 'Int'>
  readonly dailyBonusClaimedAt: Prisma.FieldRef<"VipInfo", 'DateTime'>
  readonly weeklyBonusClaimedAt: Prisma.FieldRef<"VipInfo", 'DateTime'>
  readonly monthlyBonusClaimedAt: Prisma.FieldRef<"VipInfo", 'DateTime'>
  readonly cashbackPercentage: Prisma.FieldRef<"VipInfo", 'Int'>
}
    

// Custom InputTypes
/**
 * VipInfo findUnique
 */
export type VipInfoFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VipInfo
   */
  select?: Prisma.VipInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the VipInfo
   */
  omit?: Prisma.VipInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VipInfoInclude<ExtArgs> | null
  /**
   * Filter, which VipInfo to fetch.
   */
  where: Prisma.VipInfoWhereUniqueInput
}

/**
 * VipInfo findUniqueOrThrow
 */
export type VipInfoFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VipInfo
   */
  select?: Prisma.VipInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the VipInfo
   */
  omit?: Prisma.VipInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VipInfoInclude<ExtArgs> | null
  /**
   * Filter, which VipInfo to fetch.
   */
  where: Prisma.VipInfoWhereUniqueInput
}

/**
 * VipInfo findFirst
 */
export type VipInfoFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VipInfo
   */
  select?: Prisma.VipInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the VipInfo
   */
  omit?: Prisma.VipInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VipInfoInclude<ExtArgs> | null
  /**
   * Filter, which VipInfo to fetch.
   */
  where?: Prisma.VipInfoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of VipInfos to fetch.
   */
  orderBy?: Prisma.VipInfoOrderByWithRelationInput | Prisma.VipInfoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for VipInfos.
   */
  cursor?: Prisma.VipInfoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` VipInfos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` VipInfos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of VipInfos.
   */
  distinct?: Prisma.VipInfoScalarFieldEnum | Prisma.VipInfoScalarFieldEnum[]
}

/**
 * VipInfo findFirstOrThrow
 */
export type VipInfoFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VipInfo
   */
  select?: Prisma.VipInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the VipInfo
   */
  omit?: Prisma.VipInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VipInfoInclude<ExtArgs> | null
  /**
   * Filter, which VipInfo to fetch.
   */
  where?: Prisma.VipInfoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of VipInfos to fetch.
   */
  orderBy?: Prisma.VipInfoOrderByWithRelationInput | Prisma.VipInfoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for VipInfos.
   */
  cursor?: Prisma.VipInfoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` VipInfos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` VipInfos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of VipInfos.
   */
  distinct?: Prisma.VipInfoScalarFieldEnum | Prisma.VipInfoScalarFieldEnum[]
}

/**
 * VipInfo findMany
 */
export type VipInfoFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VipInfo
   */
  select?: Prisma.VipInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the VipInfo
   */
  omit?: Prisma.VipInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VipInfoInclude<ExtArgs> | null
  /**
   * Filter, which VipInfos to fetch.
   */
  where?: Prisma.VipInfoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of VipInfos to fetch.
   */
  orderBy?: Prisma.VipInfoOrderByWithRelationInput | Prisma.VipInfoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing VipInfos.
   */
  cursor?: Prisma.VipInfoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` VipInfos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` VipInfos.
   */
  skip?: number
  distinct?: Prisma.VipInfoScalarFieldEnum | Prisma.VipInfoScalarFieldEnum[]
}

/**
 * VipInfo create
 */
export type VipInfoCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VipInfo
   */
  select?: Prisma.VipInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the VipInfo
   */
  omit?: Prisma.VipInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VipInfoInclude<ExtArgs> | null
  /**
   * The data needed to create a VipInfo.
   */
  data: Prisma.XOR<Prisma.VipInfoCreateInput, Prisma.VipInfoUncheckedCreateInput>
}

/**
 * VipInfo createMany
 */
export type VipInfoCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many VipInfos.
   */
  data: Prisma.VipInfoCreateManyInput | Prisma.VipInfoCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * VipInfo createManyAndReturn
 */
export type VipInfoCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VipInfo
   */
  select?: Prisma.VipInfoSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the VipInfo
   */
  omit?: Prisma.VipInfoOmit<ExtArgs> | null
  /**
   * The data used to create many VipInfos.
   */
  data: Prisma.VipInfoCreateManyInput | Prisma.VipInfoCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * VipInfo update
 */
export type VipInfoUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VipInfo
   */
  select?: Prisma.VipInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the VipInfo
   */
  omit?: Prisma.VipInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VipInfoInclude<ExtArgs> | null
  /**
   * The data needed to update a VipInfo.
   */
  data: Prisma.XOR<Prisma.VipInfoUpdateInput, Prisma.VipInfoUncheckedUpdateInput>
  /**
   * Choose, which VipInfo to update.
   */
  where: Prisma.VipInfoWhereUniqueInput
}

/**
 * VipInfo updateMany
 */
export type VipInfoUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update VipInfos.
   */
  data: Prisma.XOR<Prisma.VipInfoUpdateManyMutationInput, Prisma.VipInfoUncheckedUpdateManyInput>
  /**
   * Filter which VipInfos to update
   */
  where?: Prisma.VipInfoWhereInput
  /**
   * Limit how many VipInfos to update.
   */
  limit?: number
}

/**
 * VipInfo updateManyAndReturn
 */
export type VipInfoUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VipInfo
   */
  select?: Prisma.VipInfoSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the VipInfo
   */
  omit?: Prisma.VipInfoOmit<ExtArgs> | null
  /**
   * The data used to update VipInfos.
   */
  data: Prisma.XOR<Prisma.VipInfoUpdateManyMutationInput, Prisma.VipInfoUncheckedUpdateManyInput>
  /**
   * Filter which VipInfos to update
   */
  where?: Prisma.VipInfoWhereInput
  /**
   * Limit how many VipInfos to update.
   */
  limit?: number
}

/**
 * VipInfo upsert
 */
export type VipInfoUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VipInfo
   */
  select?: Prisma.VipInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the VipInfo
   */
  omit?: Prisma.VipInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VipInfoInclude<ExtArgs> | null
  /**
   * The filter to search for the VipInfo to update in case it exists.
   */
  where: Prisma.VipInfoWhereUniqueInput
  /**
   * In case the VipInfo found by the `where` argument doesn't exist, create a new VipInfo with this data.
   */
  create: Prisma.XOR<Prisma.VipInfoCreateInput, Prisma.VipInfoUncheckedCreateInput>
  /**
   * In case the VipInfo was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.VipInfoUpdateInput, Prisma.VipInfoUncheckedUpdateInput>
}

/**
 * VipInfo delete
 */
export type VipInfoDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VipInfo
   */
  select?: Prisma.VipInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the VipInfo
   */
  omit?: Prisma.VipInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VipInfoInclude<ExtArgs> | null
  /**
   * Filter which VipInfo to delete.
   */
  where: Prisma.VipInfoWhereUniqueInput
}

/**
 * VipInfo deleteMany
 */
export type VipInfoDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which VipInfos to delete
   */
  where?: Prisma.VipInfoWhereInput
  /**
   * Limit how many VipInfos to delete.
   */
  limit?: number
}

/**
 * VipInfo.userProfile
 */
export type VipInfo$userProfileArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserProfile
   */
  select?: Prisma.UserProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserProfile
   */
  omit?: Prisma.UserProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserProfileInclude<ExtArgs> | null
  where?: Prisma.UserProfileWhereInput
}

/**
 * VipInfo without action
 */
export type VipInfoDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VipInfo
   */
  select?: Prisma.VipInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the VipInfo
   */
  omit?: Prisma.VipInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VipInfoInclude<ExtArgs> | null
}
