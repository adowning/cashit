
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `TournamentParticipant` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model TournamentParticipant
 * 
 */
export type TournamentParticipantModel = runtime.Types.Result.DefaultSelection<Prisma.$TournamentParticipantPayload>

export type AggregateTournamentParticipant = {
  _count: TournamentParticipantCountAggregateOutputType | null
  _avg: TournamentParticipantAvgAggregateOutputType | null
  _sum: TournamentParticipantSumAggregateOutputType | null
  _min: TournamentParticipantMinAggregateOutputType | null
  _max: TournamentParticipantMaxAggregateOutputType | null
}

export type TournamentParticipantAvgAggregateOutputType = {
  score: number | null
  rank: number | null
}

export type TournamentParticipantSumAggregateOutputType = {
  score: number | null
  rank: number | null
}

export type TournamentParticipantMinAggregateOutputType = {
  id: string | null
  tournamentId: string | null
  userId: string | null
  score: number | null
  rank: number | null
  joinedAt: Date | null
}

export type TournamentParticipantMaxAggregateOutputType = {
  id: string | null
  tournamentId: string | null
  userId: string | null
  score: number | null
  rank: number | null
  joinedAt: Date | null
}

export type TournamentParticipantCountAggregateOutputType = {
  id: number
  tournamentId: number
  userId: number
  score: number
  rank: number
  joinedAt: number
  _all: number
}


export type TournamentParticipantAvgAggregateInputType = {
  score?: true
  rank?: true
}

export type TournamentParticipantSumAggregateInputType = {
  score?: true
  rank?: true
}

export type TournamentParticipantMinAggregateInputType = {
  id?: true
  tournamentId?: true
  userId?: true
  score?: true
  rank?: true
  joinedAt?: true
}

export type TournamentParticipantMaxAggregateInputType = {
  id?: true
  tournamentId?: true
  userId?: true
  score?: true
  rank?: true
  joinedAt?: true
}

export type TournamentParticipantCountAggregateInputType = {
  id?: true
  tournamentId?: true
  userId?: true
  score?: true
  rank?: true
  joinedAt?: true
  _all?: true
}

export type TournamentParticipantAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TournamentParticipant to aggregate.
   */
  where?: Prisma.TournamentParticipantWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TournamentParticipants to fetch.
   */
  orderBy?: Prisma.TournamentParticipantOrderByWithRelationInput | Prisma.TournamentParticipantOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TournamentParticipantWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TournamentParticipants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TournamentParticipants.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned TournamentParticipants
  **/
  _count?: true | TournamentParticipantCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: TournamentParticipantAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: TournamentParticipantSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TournamentParticipantMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TournamentParticipantMaxAggregateInputType
}

export type GetTournamentParticipantAggregateType<T extends TournamentParticipantAggregateArgs> = {
      [P in keyof T & keyof AggregateTournamentParticipant]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTournamentParticipant[P]>
    : Prisma.GetScalarType<T[P], AggregateTournamentParticipant[P]>
}




export type TournamentParticipantGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TournamentParticipantWhereInput
  orderBy?: Prisma.TournamentParticipantOrderByWithAggregationInput | Prisma.TournamentParticipantOrderByWithAggregationInput[]
  by: Prisma.TournamentParticipantScalarFieldEnum[] | Prisma.TournamentParticipantScalarFieldEnum
  having?: Prisma.TournamentParticipantScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TournamentParticipantCountAggregateInputType | true
  _avg?: TournamentParticipantAvgAggregateInputType
  _sum?: TournamentParticipantSumAggregateInputType
  _min?: TournamentParticipantMinAggregateInputType
  _max?: TournamentParticipantMaxAggregateInputType
}

export type TournamentParticipantGroupByOutputType = {
  id: string
  tournamentId: string
  userId: string
  score: number
  rank: number | null
  joinedAt: Date
  _count: TournamentParticipantCountAggregateOutputType | null
  _avg: TournamentParticipantAvgAggregateOutputType | null
  _sum: TournamentParticipantSumAggregateOutputType | null
  _min: TournamentParticipantMinAggregateOutputType | null
  _max: TournamentParticipantMaxAggregateOutputType | null
}

type GetTournamentParticipantGroupByPayload<T extends TournamentParticipantGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TournamentParticipantGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TournamentParticipantGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TournamentParticipantGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TournamentParticipantGroupByOutputType[P]>
      }
    >
  > 



export type TournamentParticipantWhereInput = {
  AND?: Prisma.TournamentParticipantWhereInput | Prisma.TournamentParticipantWhereInput[]
  OR?: Prisma.TournamentParticipantWhereInput[]
  NOT?: Prisma.TournamentParticipantWhereInput | Prisma.TournamentParticipantWhereInput[]
  id?: Prisma.StringFilter<"TournamentParticipant"> | string
  tournamentId?: Prisma.StringFilter<"TournamentParticipant"> | string
  userId?: Prisma.StringFilter<"TournamentParticipant"> | string
  score?: Prisma.IntFilter<"TournamentParticipant"> | number
  rank?: Prisma.IntNullableFilter<"TournamentParticipant"> | number | null
  joinedAt?: Prisma.DateTimeFilter<"TournamentParticipant"> | Date | string
  gamePlays?: Prisma.TournamentGamePlayListRelationFilter
  tournament?: Prisma.XOR<Prisma.TournamentScalarRelationFilter, Prisma.TournamentWhereInput>
  user?: Prisma.XOR<Prisma.UserProfileScalarRelationFilter, Prisma.UserProfileWhereInput>
}

export type TournamentParticipantOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  tournamentId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  score?: Prisma.SortOrder
  rank?: Prisma.SortOrderInput | Prisma.SortOrder
  joinedAt?: Prisma.SortOrder
  gamePlays?: Prisma.TournamentGamePlayOrderByRelationAggregateInput
  tournament?: Prisma.TournamentOrderByWithRelationInput
  user?: Prisma.UserProfileOrderByWithRelationInput
}

export type TournamentParticipantWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  tournamentId_userId?: Prisma.TournamentParticipantTournamentIdUserIdCompoundUniqueInput
  AND?: Prisma.TournamentParticipantWhereInput | Prisma.TournamentParticipantWhereInput[]
  OR?: Prisma.TournamentParticipantWhereInput[]
  NOT?: Prisma.TournamentParticipantWhereInput | Prisma.TournamentParticipantWhereInput[]
  tournamentId?: Prisma.StringFilter<"TournamentParticipant"> | string
  userId?: Prisma.StringFilter<"TournamentParticipant"> | string
  score?: Prisma.IntFilter<"TournamentParticipant"> | number
  rank?: Prisma.IntNullableFilter<"TournamentParticipant"> | number | null
  joinedAt?: Prisma.DateTimeFilter<"TournamentParticipant"> | Date | string
  gamePlays?: Prisma.TournamentGamePlayListRelationFilter
  tournament?: Prisma.XOR<Prisma.TournamentScalarRelationFilter, Prisma.TournamentWhereInput>
  user?: Prisma.XOR<Prisma.UserProfileScalarRelationFilter, Prisma.UserProfileWhereInput>
}, "id" | "tournamentId_userId">

export type TournamentParticipantOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  tournamentId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  score?: Prisma.SortOrder
  rank?: Prisma.SortOrderInput | Prisma.SortOrder
  joinedAt?: Prisma.SortOrder
  _count?: Prisma.TournamentParticipantCountOrderByAggregateInput
  _avg?: Prisma.TournamentParticipantAvgOrderByAggregateInput
  _max?: Prisma.TournamentParticipantMaxOrderByAggregateInput
  _min?: Prisma.TournamentParticipantMinOrderByAggregateInput
  _sum?: Prisma.TournamentParticipantSumOrderByAggregateInput
}

export type TournamentParticipantScalarWhereWithAggregatesInput = {
  AND?: Prisma.TournamentParticipantScalarWhereWithAggregatesInput | Prisma.TournamentParticipantScalarWhereWithAggregatesInput[]
  OR?: Prisma.TournamentParticipantScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TournamentParticipantScalarWhereWithAggregatesInput | Prisma.TournamentParticipantScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"TournamentParticipant"> | string
  tournamentId?: Prisma.StringWithAggregatesFilter<"TournamentParticipant"> | string
  userId?: Prisma.StringWithAggregatesFilter<"TournamentParticipant"> | string
  score?: Prisma.IntWithAggregatesFilter<"TournamentParticipant"> | number
  rank?: Prisma.IntNullableWithAggregatesFilter<"TournamentParticipant"> | number | null
  joinedAt?: Prisma.DateTimeWithAggregatesFilter<"TournamentParticipant"> | Date | string
}

export type TournamentParticipantCreateInput = {
  id?: string
  score?: number
  rank?: number | null
  joinedAt?: Date | string
  gamePlays?: Prisma.TournamentGamePlayCreateNestedManyWithoutTournamentParticipantInput
  tournament: Prisma.TournamentCreateNestedOneWithoutParticipantsInput
  user: Prisma.UserProfileCreateNestedOneWithoutTournamentParticipantInput
}

export type TournamentParticipantUncheckedCreateInput = {
  id?: string
  tournamentId: string
  userId: string
  score?: number
  rank?: number | null
  joinedAt?: Date | string
  gamePlays?: Prisma.TournamentGamePlayUncheckedCreateNestedManyWithoutTournamentParticipantInput
}

export type TournamentParticipantUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  score?: Prisma.IntFieldUpdateOperationsInput | number
  rank?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  gamePlays?: Prisma.TournamentGamePlayUpdateManyWithoutTournamentParticipantNestedInput
  tournament?: Prisma.TournamentUpdateOneRequiredWithoutParticipantsNestedInput
  user?: Prisma.UserProfileUpdateOneRequiredWithoutTournamentParticipantNestedInput
}

export type TournamentParticipantUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  tournamentId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  score?: Prisma.IntFieldUpdateOperationsInput | number
  rank?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  gamePlays?: Prisma.TournamentGamePlayUncheckedUpdateManyWithoutTournamentParticipantNestedInput
}

export type TournamentParticipantCreateManyInput = {
  id?: string
  tournamentId: string
  userId: string
  score?: number
  rank?: number | null
  joinedAt?: Date | string
}

export type TournamentParticipantUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  score?: Prisma.IntFieldUpdateOperationsInput | number
  rank?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TournamentParticipantUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  tournamentId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  score?: Prisma.IntFieldUpdateOperationsInput | number
  rank?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TournamentParticipantListRelationFilter = {
  every?: Prisma.TournamentParticipantWhereInput
  some?: Prisma.TournamentParticipantWhereInput
  none?: Prisma.TournamentParticipantWhereInput
}

export type TournamentParticipantOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type TournamentParticipantTournamentIdUserIdCompoundUniqueInput = {
  tournamentId: string
  userId: string
}

export type TournamentParticipantCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  tournamentId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  score?: Prisma.SortOrder
  rank?: Prisma.SortOrder
  joinedAt?: Prisma.SortOrder
}

export type TournamentParticipantAvgOrderByAggregateInput = {
  score?: Prisma.SortOrder
  rank?: Prisma.SortOrder
}

export type TournamentParticipantMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  tournamentId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  score?: Prisma.SortOrder
  rank?: Prisma.SortOrder
  joinedAt?: Prisma.SortOrder
}

export type TournamentParticipantMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  tournamentId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  score?: Prisma.SortOrder
  rank?: Prisma.SortOrder
  joinedAt?: Prisma.SortOrder
}

export type TournamentParticipantSumOrderByAggregateInput = {
  score?: Prisma.SortOrder
  rank?: Prisma.SortOrder
}

export type TournamentParticipantScalarRelationFilter = {
  is?: Prisma.TournamentParticipantWhereInput
  isNot?: Prisma.TournamentParticipantWhereInput
}

export type TournamentParticipantCreateNestedManyWithoutTournamentInput = {
  create?: Prisma.XOR<Prisma.TournamentParticipantCreateWithoutTournamentInput, Prisma.TournamentParticipantUncheckedCreateWithoutTournamentInput> | Prisma.TournamentParticipantCreateWithoutTournamentInput[] | Prisma.TournamentParticipantUncheckedCreateWithoutTournamentInput[]
  connectOrCreate?: Prisma.TournamentParticipantCreateOrConnectWithoutTournamentInput | Prisma.TournamentParticipantCreateOrConnectWithoutTournamentInput[]
  createMany?: Prisma.TournamentParticipantCreateManyTournamentInputEnvelope
  connect?: Prisma.TournamentParticipantWhereUniqueInput | Prisma.TournamentParticipantWhereUniqueInput[]
}

export type TournamentParticipantUncheckedCreateNestedManyWithoutTournamentInput = {
  create?: Prisma.XOR<Prisma.TournamentParticipantCreateWithoutTournamentInput, Prisma.TournamentParticipantUncheckedCreateWithoutTournamentInput> | Prisma.TournamentParticipantCreateWithoutTournamentInput[] | Prisma.TournamentParticipantUncheckedCreateWithoutTournamentInput[]
  connectOrCreate?: Prisma.TournamentParticipantCreateOrConnectWithoutTournamentInput | Prisma.TournamentParticipantCreateOrConnectWithoutTournamentInput[]
  createMany?: Prisma.TournamentParticipantCreateManyTournamentInputEnvelope
  connect?: Prisma.TournamentParticipantWhereUniqueInput | Prisma.TournamentParticipantWhereUniqueInput[]
}

export type TournamentParticipantUpdateManyWithoutTournamentNestedInput = {
  create?: Prisma.XOR<Prisma.TournamentParticipantCreateWithoutTournamentInput, Prisma.TournamentParticipantUncheckedCreateWithoutTournamentInput> | Prisma.TournamentParticipantCreateWithoutTournamentInput[] | Prisma.TournamentParticipantUncheckedCreateWithoutTournamentInput[]
  connectOrCreate?: Prisma.TournamentParticipantCreateOrConnectWithoutTournamentInput | Prisma.TournamentParticipantCreateOrConnectWithoutTournamentInput[]
  upsert?: Prisma.TournamentParticipantUpsertWithWhereUniqueWithoutTournamentInput | Prisma.TournamentParticipantUpsertWithWhereUniqueWithoutTournamentInput[]
  createMany?: Prisma.TournamentParticipantCreateManyTournamentInputEnvelope
  set?: Prisma.TournamentParticipantWhereUniqueInput | Prisma.TournamentParticipantWhereUniqueInput[]
  disconnect?: Prisma.TournamentParticipantWhereUniqueInput | Prisma.TournamentParticipantWhereUniqueInput[]
  delete?: Prisma.TournamentParticipantWhereUniqueInput | Prisma.TournamentParticipantWhereUniqueInput[]
  connect?: Prisma.TournamentParticipantWhereUniqueInput | Prisma.TournamentParticipantWhereUniqueInput[]
  update?: Prisma.TournamentParticipantUpdateWithWhereUniqueWithoutTournamentInput | Prisma.TournamentParticipantUpdateWithWhereUniqueWithoutTournamentInput[]
  updateMany?: Prisma.TournamentParticipantUpdateManyWithWhereWithoutTournamentInput | Prisma.TournamentParticipantUpdateManyWithWhereWithoutTournamentInput[]
  deleteMany?: Prisma.TournamentParticipantScalarWhereInput | Prisma.TournamentParticipantScalarWhereInput[]
}

export type TournamentParticipantUncheckedUpdateManyWithoutTournamentNestedInput = {
  create?: Prisma.XOR<Prisma.TournamentParticipantCreateWithoutTournamentInput, Prisma.TournamentParticipantUncheckedCreateWithoutTournamentInput> | Prisma.TournamentParticipantCreateWithoutTournamentInput[] | Prisma.TournamentParticipantUncheckedCreateWithoutTournamentInput[]
  connectOrCreate?: Prisma.TournamentParticipantCreateOrConnectWithoutTournamentInput | Prisma.TournamentParticipantCreateOrConnectWithoutTournamentInput[]
  upsert?: Prisma.TournamentParticipantUpsertWithWhereUniqueWithoutTournamentInput | Prisma.TournamentParticipantUpsertWithWhereUniqueWithoutTournamentInput[]
  createMany?: Prisma.TournamentParticipantCreateManyTournamentInputEnvelope
  set?: Prisma.TournamentParticipantWhereUniqueInput | Prisma.TournamentParticipantWhereUniqueInput[]
  disconnect?: Prisma.TournamentParticipantWhereUniqueInput | Prisma.TournamentParticipantWhereUniqueInput[]
  delete?: Prisma.TournamentParticipantWhereUniqueInput | Prisma.TournamentParticipantWhereUniqueInput[]
  connect?: Prisma.TournamentParticipantWhereUniqueInput | Prisma.TournamentParticipantWhereUniqueInput[]
  update?: Prisma.TournamentParticipantUpdateWithWhereUniqueWithoutTournamentInput | Prisma.TournamentParticipantUpdateWithWhereUniqueWithoutTournamentInput[]
  updateMany?: Prisma.TournamentParticipantUpdateManyWithWhereWithoutTournamentInput | Prisma.TournamentParticipantUpdateManyWithWhereWithoutTournamentInput[]
  deleteMany?: Prisma.TournamentParticipantScalarWhereInput | Prisma.TournamentParticipantScalarWhereInput[]
}

export type TournamentParticipantCreateNestedOneWithoutGamePlaysInput = {
  create?: Prisma.XOR<Prisma.TournamentParticipantCreateWithoutGamePlaysInput, Prisma.TournamentParticipantUncheckedCreateWithoutGamePlaysInput>
  connectOrCreate?: Prisma.TournamentParticipantCreateOrConnectWithoutGamePlaysInput
  connect?: Prisma.TournamentParticipantWhereUniqueInput
}

export type TournamentParticipantUpdateOneRequiredWithoutGamePlaysNestedInput = {
  create?: Prisma.XOR<Prisma.TournamentParticipantCreateWithoutGamePlaysInput, Prisma.TournamentParticipantUncheckedCreateWithoutGamePlaysInput>
  connectOrCreate?: Prisma.TournamentParticipantCreateOrConnectWithoutGamePlaysInput
  upsert?: Prisma.TournamentParticipantUpsertWithoutGamePlaysInput
  connect?: Prisma.TournamentParticipantWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TournamentParticipantUpdateToOneWithWhereWithoutGamePlaysInput, Prisma.TournamentParticipantUpdateWithoutGamePlaysInput>, Prisma.TournamentParticipantUncheckedUpdateWithoutGamePlaysInput>
}

export type TournamentParticipantCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.TournamentParticipantCreateWithoutUserInput, Prisma.TournamentParticipantUncheckedCreateWithoutUserInput> | Prisma.TournamentParticipantCreateWithoutUserInput[] | Prisma.TournamentParticipantUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.TournamentParticipantCreateOrConnectWithoutUserInput | Prisma.TournamentParticipantCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.TournamentParticipantCreateManyUserInputEnvelope
  connect?: Prisma.TournamentParticipantWhereUniqueInput | Prisma.TournamentParticipantWhereUniqueInput[]
}

export type TournamentParticipantUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.TournamentParticipantCreateWithoutUserInput, Prisma.TournamentParticipantUncheckedCreateWithoutUserInput> | Prisma.TournamentParticipantCreateWithoutUserInput[] | Prisma.TournamentParticipantUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.TournamentParticipantCreateOrConnectWithoutUserInput | Prisma.TournamentParticipantCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.TournamentParticipantCreateManyUserInputEnvelope
  connect?: Prisma.TournamentParticipantWhereUniqueInput | Prisma.TournamentParticipantWhereUniqueInput[]
}

export type TournamentParticipantUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.TournamentParticipantCreateWithoutUserInput, Prisma.TournamentParticipantUncheckedCreateWithoutUserInput> | Prisma.TournamentParticipantCreateWithoutUserInput[] | Prisma.TournamentParticipantUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.TournamentParticipantCreateOrConnectWithoutUserInput | Prisma.TournamentParticipantCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.TournamentParticipantUpsertWithWhereUniqueWithoutUserInput | Prisma.TournamentParticipantUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.TournamentParticipantCreateManyUserInputEnvelope
  set?: Prisma.TournamentParticipantWhereUniqueInput | Prisma.TournamentParticipantWhereUniqueInput[]
  disconnect?: Prisma.TournamentParticipantWhereUniqueInput | Prisma.TournamentParticipantWhereUniqueInput[]
  delete?: Prisma.TournamentParticipantWhereUniqueInput | Prisma.TournamentParticipantWhereUniqueInput[]
  connect?: Prisma.TournamentParticipantWhereUniqueInput | Prisma.TournamentParticipantWhereUniqueInput[]
  update?: Prisma.TournamentParticipantUpdateWithWhereUniqueWithoutUserInput | Prisma.TournamentParticipantUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.TournamentParticipantUpdateManyWithWhereWithoutUserInput | Prisma.TournamentParticipantUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.TournamentParticipantScalarWhereInput | Prisma.TournamentParticipantScalarWhereInput[]
}

export type TournamentParticipantUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.TournamentParticipantCreateWithoutUserInput, Prisma.TournamentParticipantUncheckedCreateWithoutUserInput> | Prisma.TournamentParticipantCreateWithoutUserInput[] | Prisma.TournamentParticipantUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.TournamentParticipantCreateOrConnectWithoutUserInput | Prisma.TournamentParticipantCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.TournamentParticipantUpsertWithWhereUniqueWithoutUserInput | Prisma.TournamentParticipantUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.TournamentParticipantCreateManyUserInputEnvelope
  set?: Prisma.TournamentParticipantWhereUniqueInput | Prisma.TournamentParticipantWhereUniqueInput[]
  disconnect?: Prisma.TournamentParticipantWhereUniqueInput | Prisma.TournamentParticipantWhereUniqueInput[]
  delete?: Prisma.TournamentParticipantWhereUniqueInput | Prisma.TournamentParticipantWhereUniqueInput[]
  connect?: Prisma.TournamentParticipantWhereUniqueInput | Prisma.TournamentParticipantWhereUniqueInput[]
  update?: Prisma.TournamentParticipantUpdateWithWhereUniqueWithoutUserInput | Prisma.TournamentParticipantUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.TournamentParticipantUpdateManyWithWhereWithoutUserInput | Prisma.TournamentParticipantUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.TournamentParticipantScalarWhereInput | Prisma.TournamentParticipantScalarWhereInput[]
}

export type TournamentParticipantCreateWithoutTournamentInput = {
  id?: string
  score?: number
  rank?: number | null
  joinedAt?: Date | string
  gamePlays?: Prisma.TournamentGamePlayCreateNestedManyWithoutTournamentParticipantInput
  user: Prisma.UserProfileCreateNestedOneWithoutTournamentParticipantInput
}

export type TournamentParticipantUncheckedCreateWithoutTournamentInput = {
  id?: string
  userId: string
  score?: number
  rank?: number | null
  joinedAt?: Date | string
  gamePlays?: Prisma.TournamentGamePlayUncheckedCreateNestedManyWithoutTournamentParticipantInput
}

export type TournamentParticipantCreateOrConnectWithoutTournamentInput = {
  where: Prisma.TournamentParticipantWhereUniqueInput
  create: Prisma.XOR<Prisma.TournamentParticipantCreateWithoutTournamentInput, Prisma.TournamentParticipantUncheckedCreateWithoutTournamentInput>
}

export type TournamentParticipantCreateManyTournamentInputEnvelope = {
  data: Prisma.TournamentParticipantCreateManyTournamentInput | Prisma.TournamentParticipantCreateManyTournamentInput[]
  skipDuplicates?: boolean
}

export type TournamentParticipantUpsertWithWhereUniqueWithoutTournamentInput = {
  where: Prisma.TournamentParticipantWhereUniqueInput
  update: Prisma.XOR<Prisma.TournamentParticipantUpdateWithoutTournamentInput, Prisma.TournamentParticipantUncheckedUpdateWithoutTournamentInput>
  create: Prisma.XOR<Prisma.TournamentParticipantCreateWithoutTournamentInput, Prisma.TournamentParticipantUncheckedCreateWithoutTournamentInput>
}

export type TournamentParticipantUpdateWithWhereUniqueWithoutTournamentInput = {
  where: Prisma.TournamentParticipantWhereUniqueInput
  data: Prisma.XOR<Prisma.TournamentParticipantUpdateWithoutTournamentInput, Prisma.TournamentParticipantUncheckedUpdateWithoutTournamentInput>
}

export type TournamentParticipantUpdateManyWithWhereWithoutTournamentInput = {
  where: Prisma.TournamentParticipantScalarWhereInput
  data: Prisma.XOR<Prisma.TournamentParticipantUpdateManyMutationInput, Prisma.TournamentParticipantUncheckedUpdateManyWithoutTournamentInput>
}

export type TournamentParticipantScalarWhereInput = {
  AND?: Prisma.TournamentParticipantScalarWhereInput | Prisma.TournamentParticipantScalarWhereInput[]
  OR?: Prisma.TournamentParticipantScalarWhereInput[]
  NOT?: Prisma.TournamentParticipantScalarWhereInput | Prisma.TournamentParticipantScalarWhereInput[]
  id?: Prisma.StringFilter<"TournamentParticipant"> | string
  tournamentId?: Prisma.StringFilter<"TournamentParticipant"> | string
  userId?: Prisma.StringFilter<"TournamentParticipant"> | string
  score?: Prisma.IntFilter<"TournamentParticipant"> | number
  rank?: Prisma.IntNullableFilter<"TournamentParticipant"> | number | null
  joinedAt?: Prisma.DateTimeFilter<"TournamentParticipant"> | Date | string
}

export type TournamentParticipantCreateWithoutGamePlaysInput = {
  id?: string
  score?: number
  rank?: number | null
  joinedAt?: Date | string
  tournament: Prisma.TournamentCreateNestedOneWithoutParticipantsInput
  user: Prisma.UserProfileCreateNestedOneWithoutTournamentParticipantInput
}

export type TournamentParticipantUncheckedCreateWithoutGamePlaysInput = {
  id?: string
  tournamentId: string
  userId: string
  score?: number
  rank?: number | null
  joinedAt?: Date | string
}

export type TournamentParticipantCreateOrConnectWithoutGamePlaysInput = {
  where: Prisma.TournamentParticipantWhereUniqueInput
  create: Prisma.XOR<Prisma.TournamentParticipantCreateWithoutGamePlaysInput, Prisma.TournamentParticipantUncheckedCreateWithoutGamePlaysInput>
}

export type TournamentParticipantUpsertWithoutGamePlaysInput = {
  update: Prisma.XOR<Prisma.TournamentParticipantUpdateWithoutGamePlaysInput, Prisma.TournamentParticipantUncheckedUpdateWithoutGamePlaysInput>
  create: Prisma.XOR<Prisma.TournamentParticipantCreateWithoutGamePlaysInput, Prisma.TournamentParticipantUncheckedCreateWithoutGamePlaysInput>
  where?: Prisma.TournamentParticipantWhereInput
}

export type TournamentParticipantUpdateToOneWithWhereWithoutGamePlaysInput = {
  where?: Prisma.TournamentParticipantWhereInput
  data: Prisma.XOR<Prisma.TournamentParticipantUpdateWithoutGamePlaysInput, Prisma.TournamentParticipantUncheckedUpdateWithoutGamePlaysInput>
}

export type TournamentParticipantUpdateWithoutGamePlaysInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  score?: Prisma.IntFieldUpdateOperationsInput | number
  rank?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  tournament?: Prisma.TournamentUpdateOneRequiredWithoutParticipantsNestedInput
  user?: Prisma.UserProfileUpdateOneRequiredWithoutTournamentParticipantNestedInput
}

export type TournamentParticipantUncheckedUpdateWithoutGamePlaysInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  tournamentId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  score?: Prisma.IntFieldUpdateOperationsInput | number
  rank?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TournamentParticipantCreateWithoutUserInput = {
  id?: string
  score?: number
  rank?: number | null
  joinedAt?: Date | string
  gamePlays?: Prisma.TournamentGamePlayCreateNestedManyWithoutTournamentParticipantInput
  tournament: Prisma.TournamentCreateNestedOneWithoutParticipantsInput
}

export type TournamentParticipantUncheckedCreateWithoutUserInput = {
  id?: string
  tournamentId: string
  score?: number
  rank?: number | null
  joinedAt?: Date | string
  gamePlays?: Prisma.TournamentGamePlayUncheckedCreateNestedManyWithoutTournamentParticipantInput
}

export type TournamentParticipantCreateOrConnectWithoutUserInput = {
  where: Prisma.TournamentParticipantWhereUniqueInput
  create: Prisma.XOR<Prisma.TournamentParticipantCreateWithoutUserInput, Prisma.TournamentParticipantUncheckedCreateWithoutUserInput>
}

export type TournamentParticipantCreateManyUserInputEnvelope = {
  data: Prisma.TournamentParticipantCreateManyUserInput | Prisma.TournamentParticipantCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type TournamentParticipantUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.TournamentParticipantWhereUniqueInput
  update: Prisma.XOR<Prisma.TournamentParticipantUpdateWithoutUserInput, Prisma.TournamentParticipantUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.TournamentParticipantCreateWithoutUserInput, Prisma.TournamentParticipantUncheckedCreateWithoutUserInput>
}

export type TournamentParticipantUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.TournamentParticipantWhereUniqueInput
  data: Prisma.XOR<Prisma.TournamentParticipantUpdateWithoutUserInput, Prisma.TournamentParticipantUncheckedUpdateWithoutUserInput>
}

export type TournamentParticipantUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.TournamentParticipantScalarWhereInput
  data: Prisma.XOR<Prisma.TournamentParticipantUpdateManyMutationInput, Prisma.TournamentParticipantUncheckedUpdateManyWithoutUserInput>
}

export type TournamentParticipantCreateManyTournamentInput = {
  id?: string
  userId: string
  score?: number
  rank?: number | null
  joinedAt?: Date | string
}

export type TournamentParticipantUpdateWithoutTournamentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  score?: Prisma.IntFieldUpdateOperationsInput | number
  rank?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  gamePlays?: Prisma.TournamentGamePlayUpdateManyWithoutTournamentParticipantNestedInput
  user?: Prisma.UserProfileUpdateOneRequiredWithoutTournamentParticipantNestedInput
}

export type TournamentParticipantUncheckedUpdateWithoutTournamentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  score?: Prisma.IntFieldUpdateOperationsInput | number
  rank?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  gamePlays?: Prisma.TournamentGamePlayUncheckedUpdateManyWithoutTournamentParticipantNestedInput
}

export type TournamentParticipantUncheckedUpdateManyWithoutTournamentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  score?: Prisma.IntFieldUpdateOperationsInput | number
  rank?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TournamentParticipantCreateManyUserInput = {
  id?: string
  tournamentId: string
  score?: number
  rank?: number | null
  joinedAt?: Date | string
}

export type TournamentParticipantUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  score?: Prisma.IntFieldUpdateOperationsInput | number
  rank?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  gamePlays?: Prisma.TournamentGamePlayUpdateManyWithoutTournamentParticipantNestedInput
  tournament?: Prisma.TournamentUpdateOneRequiredWithoutParticipantsNestedInput
}

export type TournamentParticipantUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  tournamentId?: Prisma.StringFieldUpdateOperationsInput | string
  score?: Prisma.IntFieldUpdateOperationsInput | number
  rank?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  gamePlays?: Prisma.TournamentGamePlayUncheckedUpdateManyWithoutTournamentParticipantNestedInput
}

export type TournamentParticipantUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  tournamentId?: Prisma.StringFieldUpdateOperationsInput | string
  score?: Prisma.IntFieldUpdateOperationsInput | number
  rank?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  joinedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type TournamentParticipantCountOutputType
 */

export type TournamentParticipantCountOutputType = {
  gamePlays: number
}

export type TournamentParticipantCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  gamePlays?: boolean | TournamentParticipantCountOutputTypeCountGamePlaysArgs
}

/**
 * TournamentParticipantCountOutputType without action
 */
export type TournamentParticipantCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentParticipantCountOutputType
   */
  select?: Prisma.TournamentParticipantCountOutputTypeSelect<ExtArgs> | null
}

/**
 * TournamentParticipantCountOutputType without action
 */
export type TournamentParticipantCountOutputTypeCountGamePlaysArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TournamentGamePlayWhereInput
}


export type TournamentParticipantSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  tournamentId?: boolean
  userId?: boolean
  score?: boolean
  rank?: boolean
  joinedAt?: boolean
  gamePlays?: boolean | Prisma.TournamentParticipant$gamePlaysArgs<ExtArgs>
  tournament?: boolean | Prisma.TournamentDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserProfileDefaultArgs<ExtArgs>
  _count?: boolean | Prisma.TournamentParticipantCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["tournamentParticipant"]>

export type TournamentParticipantSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  tournamentId?: boolean
  userId?: boolean
  score?: boolean
  rank?: boolean
  joinedAt?: boolean
  tournament?: boolean | Prisma.TournamentDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserProfileDefaultArgs<ExtArgs>
}, ExtArgs["result"]["tournamentParticipant"]>

export type TournamentParticipantSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  tournamentId?: boolean
  userId?: boolean
  score?: boolean
  rank?: boolean
  joinedAt?: boolean
  tournament?: boolean | Prisma.TournamentDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserProfileDefaultArgs<ExtArgs>
}, ExtArgs["result"]["tournamentParticipant"]>

export type TournamentParticipantSelectScalar = {
  id?: boolean
  tournamentId?: boolean
  userId?: boolean
  score?: boolean
  rank?: boolean
  joinedAt?: boolean
}

export type TournamentParticipantOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "tournamentId" | "userId" | "score" | "rank" | "joinedAt", ExtArgs["result"]["tournamentParticipant"]>
export type TournamentParticipantInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  gamePlays?: boolean | Prisma.TournamentParticipant$gamePlaysArgs<ExtArgs>
  tournament?: boolean | Prisma.TournamentDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserProfileDefaultArgs<ExtArgs>
  _count?: boolean | Prisma.TournamentParticipantCountOutputTypeDefaultArgs<ExtArgs>
}
export type TournamentParticipantIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  tournament?: boolean | Prisma.TournamentDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserProfileDefaultArgs<ExtArgs>
}
export type TournamentParticipantIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  tournament?: boolean | Prisma.TournamentDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserProfileDefaultArgs<ExtArgs>
}

export type $TournamentParticipantPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "TournamentParticipant"
  objects: {
    gamePlays: Prisma.$TournamentGamePlayPayload<ExtArgs>[]
    tournament: Prisma.$TournamentPayload<ExtArgs>
    user: Prisma.$UserProfilePayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    tournamentId: string
    userId: string
    score: number
    rank: number | null
    joinedAt: Date
  }, ExtArgs["result"]["tournamentParticipant"]>
  composites: {}
}

export type TournamentParticipantGetPayload<S extends boolean | null | undefined | TournamentParticipantDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TournamentParticipantPayload, S>

export type TournamentParticipantCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TournamentParticipantFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TournamentParticipantCountAggregateInputType | true
  }

export interface TournamentParticipantDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TournamentParticipant'], meta: { name: 'TournamentParticipant' } }
  /**
   * Find zero or one TournamentParticipant that matches the filter.
   * @param {TournamentParticipantFindUniqueArgs} args - Arguments to find a TournamentParticipant
   * @example
   * // Get one TournamentParticipant
   * const tournamentParticipant = await prisma.tournamentParticipant.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TournamentParticipantFindUniqueArgs>(args: Prisma.SelectSubset<T, TournamentParticipantFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TournamentParticipantClient<runtime.Types.Result.GetResult<Prisma.$TournamentParticipantPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one TournamentParticipant that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TournamentParticipantFindUniqueOrThrowArgs} args - Arguments to find a TournamentParticipant
   * @example
   * // Get one TournamentParticipant
   * const tournamentParticipant = await prisma.tournamentParticipant.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TournamentParticipantFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TournamentParticipantFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TournamentParticipantClient<runtime.Types.Result.GetResult<Prisma.$TournamentParticipantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TournamentParticipant that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TournamentParticipantFindFirstArgs} args - Arguments to find a TournamentParticipant
   * @example
   * // Get one TournamentParticipant
   * const tournamentParticipant = await prisma.tournamentParticipant.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TournamentParticipantFindFirstArgs>(args?: Prisma.SelectSubset<T, TournamentParticipantFindFirstArgs<ExtArgs>>): Prisma.Prisma__TournamentParticipantClient<runtime.Types.Result.GetResult<Prisma.$TournamentParticipantPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TournamentParticipant that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TournamentParticipantFindFirstOrThrowArgs} args - Arguments to find a TournamentParticipant
   * @example
   * // Get one TournamentParticipant
   * const tournamentParticipant = await prisma.tournamentParticipant.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TournamentParticipantFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TournamentParticipantFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TournamentParticipantClient<runtime.Types.Result.GetResult<Prisma.$TournamentParticipantPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more TournamentParticipants that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TournamentParticipantFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TournamentParticipants
   * const tournamentParticipants = await prisma.tournamentParticipant.findMany()
   * 
   * // Get first 10 TournamentParticipants
   * const tournamentParticipants = await prisma.tournamentParticipant.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const tournamentParticipantWithIdOnly = await prisma.tournamentParticipant.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TournamentParticipantFindManyArgs>(args?: Prisma.SelectSubset<T, TournamentParticipantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TournamentParticipantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a TournamentParticipant.
   * @param {TournamentParticipantCreateArgs} args - Arguments to create a TournamentParticipant.
   * @example
   * // Create one TournamentParticipant
   * const TournamentParticipant = await prisma.tournamentParticipant.create({
   *   data: {
   *     // ... data to create a TournamentParticipant
   *   }
   * })
   * 
   */
  create<T extends TournamentParticipantCreateArgs>(args: Prisma.SelectSubset<T, TournamentParticipantCreateArgs<ExtArgs>>): Prisma.Prisma__TournamentParticipantClient<runtime.Types.Result.GetResult<Prisma.$TournamentParticipantPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many TournamentParticipants.
   * @param {TournamentParticipantCreateManyArgs} args - Arguments to create many TournamentParticipants.
   * @example
   * // Create many TournamentParticipants
   * const tournamentParticipant = await prisma.tournamentParticipant.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TournamentParticipantCreateManyArgs>(args?: Prisma.SelectSubset<T, TournamentParticipantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many TournamentParticipants and returns the data saved in the database.
   * @param {TournamentParticipantCreateManyAndReturnArgs} args - Arguments to create many TournamentParticipants.
   * @example
   * // Create many TournamentParticipants
   * const tournamentParticipant = await prisma.tournamentParticipant.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many TournamentParticipants and only return the `id`
   * const tournamentParticipantWithIdOnly = await prisma.tournamentParticipant.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TournamentParticipantCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TournamentParticipantCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TournamentParticipantPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a TournamentParticipant.
   * @param {TournamentParticipantDeleteArgs} args - Arguments to delete one TournamentParticipant.
   * @example
   * // Delete one TournamentParticipant
   * const TournamentParticipant = await prisma.tournamentParticipant.delete({
   *   where: {
   *     // ... filter to delete one TournamentParticipant
   *   }
   * })
   * 
   */
  delete<T extends TournamentParticipantDeleteArgs>(args: Prisma.SelectSubset<T, TournamentParticipantDeleteArgs<ExtArgs>>): Prisma.Prisma__TournamentParticipantClient<runtime.Types.Result.GetResult<Prisma.$TournamentParticipantPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one TournamentParticipant.
   * @param {TournamentParticipantUpdateArgs} args - Arguments to update one TournamentParticipant.
   * @example
   * // Update one TournamentParticipant
   * const tournamentParticipant = await prisma.tournamentParticipant.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TournamentParticipantUpdateArgs>(args: Prisma.SelectSubset<T, TournamentParticipantUpdateArgs<ExtArgs>>): Prisma.Prisma__TournamentParticipantClient<runtime.Types.Result.GetResult<Prisma.$TournamentParticipantPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more TournamentParticipants.
   * @param {TournamentParticipantDeleteManyArgs} args - Arguments to filter TournamentParticipants to delete.
   * @example
   * // Delete a few TournamentParticipants
   * const { count } = await prisma.tournamentParticipant.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TournamentParticipantDeleteManyArgs>(args?: Prisma.SelectSubset<T, TournamentParticipantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TournamentParticipants.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TournamentParticipantUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TournamentParticipants
   * const tournamentParticipant = await prisma.tournamentParticipant.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TournamentParticipantUpdateManyArgs>(args: Prisma.SelectSubset<T, TournamentParticipantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TournamentParticipants and returns the data updated in the database.
   * @param {TournamentParticipantUpdateManyAndReturnArgs} args - Arguments to update many TournamentParticipants.
   * @example
   * // Update many TournamentParticipants
   * const tournamentParticipant = await prisma.tournamentParticipant.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more TournamentParticipants and only return the `id`
   * const tournamentParticipantWithIdOnly = await prisma.tournamentParticipant.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TournamentParticipantUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TournamentParticipantUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TournamentParticipantPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one TournamentParticipant.
   * @param {TournamentParticipantUpsertArgs} args - Arguments to update or create a TournamentParticipant.
   * @example
   * // Update or create a TournamentParticipant
   * const tournamentParticipant = await prisma.tournamentParticipant.upsert({
   *   create: {
   *     // ... data to create a TournamentParticipant
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TournamentParticipant we want to update
   *   }
   * })
   */
  upsert<T extends TournamentParticipantUpsertArgs>(args: Prisma.SelectSubset<T, TournamentParticipantUpsertArgs<ExtArgs>>): Prisma.Prisma__TournamentParticipantClient<runtime.Types.Result.GetResult<Prisma.$TournamentParticipantPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of TournamentParticipants.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TournamentParticipantCountArgs} args - Arguments to filter TournamentParticipants to count.
   * @example
   * // Count the number of TournamentParticipants
   * const count = await prisma.tournamentParticipant.count({
   *   where: {
   *     // ... the filter for the TournamentParticipants we want to count
   *   }
   * })
  **/
  count<T extends TournamentParticipantCountArgs>(
    args?: Prisma.Subset<T, TournamentParticipantCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TournamentParticipantCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a TournamentParticipant.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TournamentParticipantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TournamentParticipantAggregateArgs>(args: Prisma.Subset<T, TournamentParticipantAggregateArgs>): Prisma.PrismaPromise<GetTournamentParticipantAggregateType<T>>

  /**
   * Group by TournamentParticipant.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TournamentParticipantGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TournamentParticipantGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TournamentParticipantGroupByArgs['orderBy'] }
      : { orderBy?: TournamentParticipantGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TournamentParticipantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTournamentParticipantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the TournamentParticipant model
 */
readonly fields: TournamentParticipantFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TournamentParticipant.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TournamentParticipantClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  gamePlays<T extends Prisma.TournamentParticipant$gamePlaysArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TournamentParticipant$gamePlaysArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TournamentGamePlayPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  tournament<T extends Prisma.TournamentDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TournamentDefaultArgs<ExtArgs>>): Prisma.Prisma__TournamentClient<runtime.Types.Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  user<T extends Prisma.UserProfileDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserProfileDefaultArgs<ExtArgs>>): Prisma.Prisma__UserProfileClient<runtime.Types.Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the TournamentParticipant model
 */
export interface TournamentParticipantFieldRefs {
  readonly id: Prisma.FieldRef<"TournamentParticipant", 'String'>
  readonly tournamentId: Prisma.FieldRef<"TournamentParticipant", 'String'>
  readonly userId: Prisma.FieldRef<"TournamentParticipant", 'String'>
  readonly score: Prisma.FieldRef<"TournamentParticipant", 'Int'>
  readonly rank: Prisma.FieldRef<"TournamentParticipant", 'Int'>
  readonly joinedAt: Prisma.FieldRef<"TournamentParticipant", 'DateTime'>
}
    

// Custom InputTypes
/**
 * TournamentParticipant findUnique
 */
export type TournamentParticipantFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentParticipant
   */
  select?: Prisma.TournamentParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TournamentParticipant
   */
  omit?: Prisma.TournamentParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentParticipantInclude<ExtArgs> | null
  /**
   * Filter, which TournamentParticipant to fetch.
   */
  where: Prisma.TournamentParticipantWhereUniqueInput
}

/**
 * TournamentParticipant findUniqueOrThrow
 */
export type TournamentParticipantFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentParticipant
   */
  select?: Prisma.TournamentParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TournamentParticipant
   */
  omit?: Prisma.TournamentParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentParticipantInclude<ExtArgs> | null
  /**
   * Filter, which TournamentParticipant to fetch.
   */
  where: Prisma.TournamentParticipantWhereUniqueInput
}

/**
 * TournamentParticipant findFirst
 */
export type TournamentParticipantFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentParticipant
   */
  select?: Prisma.TournamentParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TournamentParticipant
   */
  omit?: Prisma.TournamentParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentParticipantInclude<ExtArgs> | null
  /**
   * Filter, which TournamentParticipant to fetch.
   */
  where?: Prisma.TournamentParticipantWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TournamentParticipants to fetch.
   */
  orderBy?: Prisma.TournamentParticipantOrderByWithRelationInput | Prisma.TournamentParticipantOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TournamentParticipants.
   */
  cursor?: Prisma.TournamentParticipantWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TournamentParticipants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TournamentParticipants.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TournamentParticipants.
   */
  distinct?: Prisma.TournamentParticipantScalarFieldEnum | Prisma.TournamentParticipantScalarFieldEnum[]
}

/**
 * TournamentParticipant findFirstOrThrow
 */
export type TournamentParticipantFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentParticipant
   */
  select?: Prisma.TournamentParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TournamentParticipant
   */
  omit?: Prisma.TournamentParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentParticipantInclude<ExtArgs> | null
  /**
   * Filter, which TournamentParticipant to fetch.
   */
  where?: Prisma.TournamentParticipantWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TournamentParticipants to fetch.
   */
  orderBy?: Prisma.TournamentParticipantOrderByWithRelationInput | Prisma.TournamentParticipantOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TournamentParticipants.
   */
  cursor?: Prisma.TournamentParticipantWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TournamentParticipants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TournamentParticipants.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TournamentParticipants.
   */
  distinct?: Prisma.TournamentParticipantScalarFieldEnum | Prisma.TournamentParticipantScalarFieldEnum[]
}

/**
 * TournamentParticipant findMany
 */
export type TournamentParticipantFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentParticipant
   */
  select?: Prisma.TournamentParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TournamentParticipant
   */
  omit?: Prisma.TournamentParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentParticipantInclude<ExtArgs> | null
  /**
   * Filter, which TournamentParticipants to fetch.
   */
  where?: Prisma.TournamentParticipantWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TournamentParticipants to fetch.
   */
  orderBy?: Prisma.TournamentParticipantOrderByWithRelationInput | Prisma.TournamentParticipantOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing TournamentParticipants.
   */
  cursor?: Prisma.TournamentParticipantWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TournamentParticipants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TournamentParticipants.
   */
  skip?: number
  distinct?: Prisma.TournamentParticipantScalarFieldEnum | Prisma.TournamentParticipantScalarFieldEnum[]
}

/**
 * TournamentParticipant create
 */
export type TournamentParticipantCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentParticipant
   */
  select?: Prisma.TournamentParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TournamentParticipant
   */
  omit?: Prisma.TournamentParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentParticipantInclude<ExtArgs> | null
  /**
   * The data needed to create a TournamentParticipant.
   */
  data: Prisma.XOR<Prisma.TournamentParticipantCreateInput, Prisma.TournamentParticipantUncheckedCreateInput>
}

/**
 * TournamentParticipant createMany
 */
export type TournamentParticipantCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many TournamentParticipants.
   */
  data: Prisma.TournamentParticipantCreateManyInput | Prisma.TournamentParticipantCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * TournamentParticipant createManyAndReturn
 */
export type TournamentParticipantCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentParticipant
   */
  select?: Prisma.TournamentParticipantSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TournamentParticipant
   */
  omit?: Prisma.TournamentParticipantOmit<ExtArgs> | null
  /**
   * The data used to create many TournamentParticipants.
   */
  data: Prisma.TournamentParticipantCreateManyInput | Prisma.TournamentParticipantCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentParticipantIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * TournamentParticipant update
 */
export type TournamentParticipantUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentParticipant
   */
  select?: Prisma.TournamentParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TournamentParticipant
   */
  omit?: Prisma.TournamentParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentParticipantInclude<ExtArgs> | null
  /**
   * The data needed to update a TournamentParticipant.
   */
  data: Prisma.XOR<Prisma.TournamentParticipantUpdateInput, Prisma.TournamentParticipantUncheckedUpdateInput>
  /**
   * Choose, which TournamentParticipant to update.
   */
  where: Prisma.TournamentParticipantWhereUniqueInput
}

/**
 * TournamentParticipant updateMany
 */
export type TournamentParticipantUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update TournamentParticipants.
   */
  data: Prisma.XOR<Prisma.TournamentParticipantUpdateManyMutationInput, Prisma.TournamentParticipantUncheckedUpdateManyInput>
  /**
   * Filter which TournamentParticipants to update
   */
  where?: Prisma.TournamentParticipantWhereInput
  /**
   * Limit how many TournamentParticipants to update.
   */
  limit?: number
}

/**
 * TournamentParticipant updateManyAndReturn
 */
export type TournamentParticipantUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentParticipant
   */
  select?: Prisma.TournamentParticipantSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TournamentParticipant
   */
  omit?: Prisma.TournamentParticipantOmit<ExtArgs> | null
  /**
   * The data used to update TournamentParticipants.
   */
  data: Prisma.XOR<Prisma.TournamentParticipantUpdateManyMutationInput, Prisma.TournamentParticipantUncheckedUpdateManyInput>
  /**
   * Filter which TournamentParticipants to update
   */
  where?: Prisma.TournamentParticipantWhereInput
  /**
   * Limit how many TournamentParticipants to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentParticipantIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * TournamentParticipant upsert
 */
export type TournamentParticipantUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentParticipant
   */
  select?: Prisma.TournamentParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TournamentParticipant
   */
  omit?: Prisma.TournamentParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentParticipantInclude<ExtArgs> | null
  /**
   * The filter to search for the TournamentParticipant to update in case it exists.
   */
  where: Prisma.TournamentParticipantWhereUniqueInput
  /**
   * In case the TournamentParticipant found by the `where` argument doesn't exist, create a new TournamentParticipant with this data.
   */
  create: Prisma.XOR<Prisma.TournamentParticipantCreateInput, Prisma.TournamentParticipantUncheckedCreateInput>
  /**
   * In case the TournamentParticipant was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TournamentParticipantUpdateInput, Prisma.TournamentParticipantUncheckedUpdateInput>
}

/**
 * TournamentParticipant delete
 */
export type TournamentParticipantDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentParticipant
   */
  select?: Prisma.TournamentParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TournamentParticipant
   */
  omit?: Prisma.TournamentParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentParticipantInclude<ExtArgs> | null
  /**
   * Filter which TournamentParticipant to delete.
   */
  where: Prisma.TournamentParticipantWhereUniqueInput
}

/**
 * TournamentParticipant deleteMany
 */
export type TournamentParticipantDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TournamentParticipants to delete
   */
  where?: Prisma.TournamentParticipantWhereInput
  /**
   * Limit how many TournamentParticipants to delete.
   */
  limit?: number
}

/**
 * TournamentParticipant.gamePlays
 */
export type TournamentParticipant$gamePlaysArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentGamePlay
   */
  select?: Prisma.TournamentGamePlaySelect<ExtArgs> | null
  /**
   * Omit specific fields from the TournamentGamePlay
   */
  omit?: Prisma.TournamentGamePlayOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentGamePlayInclude<ExtArgs> | null
  where?: Prisma.TournamentGamePlayWhereInput
  orderBy?: Prisma.TournamentGamePlayOrderByWithRelationInput | Prisma.TournamentGamePlayOrderByWithRelationInput[]
  cursor?: Prisma.TournamentGamePlayWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TournamentGamePlayScalarFieldEnum | Prisma.TournamentGamePlayScalarFieldEnum[]
}

/**
 * TournamentParticipant without action
 */
export type TournamentParticipantDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentParticipant
   */
  select?: Prisma.TournamentParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TournamentParticipant
   */
  omit?: Prisma.TournamentParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentParticipantInclude<ExtArgs> | null
}
