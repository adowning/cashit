
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `TournamentGames` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model TournamentGames
 * 
 */
export type TournamentGamesModel = runtime.Types.Result.DefaultSelection<Prisma.$TournamentGamesPayload>

export type AggregateTournamentGames = {
  _count: TournamentGamesCountAggregateOutputType | null
  _min: TournamentGamesMinAggregateOutputType | null
  _max: TournamentGamesMaxAggregateOutputType | null
}

export type TournamentGamesMinAggregateOutputType = {
  A: string | null
  B: string | null
}

export type TournamentGamesMaxAggregateOutputType = {
  A: string | null
  B: string | null
}

export type TournamentGamesCountAggregateOutputType = {
  A: number
  B: number
  _all: number
}


export type TournamentGamesMinAggregateInputType = {
  A?: true
  B?: true
}

export type TournamentGamesMaxAggregateInputType = {
  A?: true
  B?: true
}

export type TournamentGamesCountAggregateInputType = {
  A?: true
  B?: true
  _all?: true
}

export type TournamentGamesAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TournamentGames to aggregate.
   */
  where?: Prisma.TournamentGamesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TournamentGames to fetch.
   */
  orderBy?: Prisma.TournamentGamesOrderByWithRelationInput | Prisma.TournamentGamesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TournamentGamesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TournamentGames from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TournamentGames.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned TournamentGames
  **/
  _count?: true | TournamentGamesCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TournamentGamesMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TournamentGamesMaxAggregateInputType
}

export type GetTournamentGamesAggregateType<T extends TournamentGamesAggregateArgs> = {
      [P in keyof T & keyof AggregateTournamentGames]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTournamentGames[P]>
    : Prisma.GetScalarType<T[P], AggregateTournamentGames[P]>
}




export type TournamentGamesGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TournamentGamesWhereInput
  orderBy?: Prisma.TournamentGamesOrderByWithAggregationInput | Prisma.TournamentGamesOrderByWithAggregationInput[]
  by: Prisma.TournamentGamesScalarFieldEnum[] | Prisma.TournamentGamesScalarFieldEnum
  having?: Prisma.TournamentGamesScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TournamentGamesCountAggregateInputType | true
  _min?: TournamentGamesMinAggregateInputType
  _max?: TournamentGamesMaxAggregateInputType
}

export type TournamentGamesGroupByOutputType = {
  A: string
  B: string
  _count: TournamentGamesCountAggregateOutputType | null
  _min: TournamentGamesMinAggregateOutputType | null
  _max: TournamentGamesMaxAggregateOutputType | null
}

type GetTournamentGamesGroupByPayload<T extends TournamentGamesGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TournamentGamesGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TournamentGamesGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TournamentGamesGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TournamentGamesGroupByOutputType[P]>
      }
    >
  > 



export type TournamentGamesWhereInput = {
  AND?: Prisma.TournamentGamesWhereInput | Prisma.TournamentGamesWhereInput[]
  OR?: Prisma.TournamentGamesWhereInput[]
  NOT?: Prisma.TournamentGamesWhereInput | Prisma.TournamentGamesWhereInput[]
  A?: Prisma.StringFilter<"TournamentGames"> | string
  B?: Prisma.StringFilter<"TournamentGames"> | string
  games?: Prisma.XOR<Prisma.GameScalarRelationFilter, Prisma.GameWhereInput>
  tournament?: Prisma.XOR<Prisma.TournamentScalarRelationFilter, Prisma.TournamentWhereInput>
}

export type TournamentGamesOrderByWithRelationInput = {
  A?: Prisma.SortOrder
  B?: Prisma.SortOrder
  games?: Prisma.GameOrderByWithRelationInput
  tournament?: Prisma.TournamentOrderByWithRelationInput
}

export type TournamentGamesWhereUniqueInput = Prisma.AtLeast<{
  A_B?: Prisma.TournamentGamesABCompoundUniqueInput
  AND?: Prisma.TournamentGamesWhereInput | Prisma.TournamentGamesWhereInput[]
  OR?: Prisma.TournamentGamesWhereInput[]
  NOT?: Prisma.TournamentGamesWhereInput | Prisma.TournamentGamesWhereInput[]
  A?: Prisma.StringFilter<"TournamentGames"> | string
  B?: Prisma.StringFilter<"TournamentGames"> | string
  games?: Prisma.XOR<Prisma.GameScalarRelationFilter, Prisma.GameWhereInput>
  tournament?: Prisma.XOR<Prisma.TournamentScalarRelationFilter, Prisma.TournamentWhereInput>
}, "A_B">

export type TournamentGamesOrderByWithAggregationInput = {
  A?: Prisma.SortOrder
  B?: Prisma.SortOrder
  _count?: Prisma.TournamentGamesCountOrderByAggregateInput
  _max?: Prisma.TournamentGamesMaxOrderByAggregateInput
  _min?: Prisma.TournamentGamesMinOrderByAggregateInput
}

export type TournamentGamesScalarWhereWithAggregatesInput = {
  AND?: Prisma.TournamentGamesScalarWhereWithAggregatesInput | Prisma.TournamentGamesScalarWhereWithAggregatesInput[]
  OR?: Prisma.TournamentGamesScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TournamentGamesScalarWhereWithAggregatesInput | Prisma.TournamentGamesScalarWhereWithAggregatesInput[]
  A?: Prisma.StringWithAggregatesFilter<"TournamentGames"> | string
  B?: Prisma.StringWithAggregatesFilter<"TournamentGames"> | string
}

export type TournamentGamesCreateInput = {
  games: Prisma.GameCreateNestedOneWithoutTournamentGamesInput
  tournament: Prisma.TournamentCreateNestedOneWithoutTournamentGamesInput
}

export type TournamentGamesUncheckedCreateInput = {
  A: string
  B: string
}

export type TournamentGamesUpdateInput = {
  games?: Prisma.GameUpdateOneRequiredWithoutTournamentGamesNestedInput
  tournament?: Prisma.TournamentUpdateOneRequiredWithoutTournamentGamesNestedInput
}

export type TournamentGamesUncheckedUpdateInput = {
  A?: Prisma.StringFieldUpdateOperationsInput | string
  B?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TournamentGamesCreateManyInput = {
  A: string
  B: string
}

export type TournamentGamesUpdateManyMutationInput = {

}

export type TournamentGamesUncheckedUpdateManyInput = {
  A?: Prisma.StringFieldUpdateOperationsInput | string
  B?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TournamentGamesListRelationFilter = {
  every?: Prisma.TournamentGamesWhereInput
  some?: Prisma.TournamentGamesWhereInput
  none?: Prisma.TournamentGamesWhereInput
}

export type TournamentGamesOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type TournamentGamesABCompoundUniqueInput = {
  A: string
  B: string
}

export type TournamentGamesCountOrderByAggregateInput = {
  A?: Prisma.SortOrder
  B?: Prisma.SortOrder
}

export type TournamentGamesMaxOrderByAggregateInput = {
  A?: Prisma.SortOrder
  B?: Prisma.SortOrder
}

export type TournamentGamesMinOrderByAggregateInput = {
  A?: Prisma.SortOrder
  B?: Prisma.SortOrder
}

export type TournamentGamesCreateNestedManyWithoutGamesInput = {
  create?: Prisma.XOR<Prisma.TournamentGamesCreateWithoutGamesInput, Prisma.TournamentGamesUncheckedCreateWithoutGamesInput> | Prisma.TournamentGamesCreateWithoutGamesInput[] | Prisma.TournamentGamesUncheckedCreateWithoutGamesInput[]
  connectOrCreate?: Prisma.TournamentGamesCreateOrConnectWithoutGamesInput | Prisma.TournamentGamesCreateOrConnectWithoutGamesInput[]
  createMany?: Prisma.TournamentGamesCreateManyGamesInputEnvelope
  connect?: Prisma.TournamentGamesWhereUniqueInput | Prisma.TournamentGamesWhereUniqueInput[]
}

export type TournamentGamesUncheckedCreateNestedManyWithoutGamesInput = {
  create?: Prisma.XOR<Prisma.TournamentGamesCreateWithoutGamesInput, Prisma.TournamentGamesUncheckedCreateWithoutGamesInput> | Prisma.TournamentGamesCreateWithoutGamesInput[] | Prisma.TournamentGamesUncheckedCreateWithoutGamesInput[]
  connectOrCreate?: Prisma.TournamentGamesCreateOrConnectWithoutGamesInput | Prisma.TournamentGamesCreateOrConnectWithoutGamesInput[]
  createMany?: Prisma.TournamentGamesCreateManyGamesInputEnvelope
  connect?: Prisma.TournamentGamesWhereUniqueInput | Prisma.TournamentGamesWhereUniqueInput[]
}

export type TournamentGamesUpdateManyWithoutGamesNestedInput = {
  create?: Prisma.XOR<Prisma.TournamentGamesCreateWithoutGamesInput, Prisma.TournamentGamesUncheckedCreateWithoutGamesInput> | Prisma.TournamentGamesCreateWithoutGamesInput[] | Prisma.TournamentGamesUncheckedCreateWithoutGamesInput[]
  connectOrCreate?: Prisma.TournamentGamesCreateOrConnectWithoutGamesInput | Prisma.TournamentGamesCreateOrConnectWithoutGamesInput[]
  upsert?: Prisma.TournamentGamesUpsertWithWhereUniqueWithoutGamesInput | Prisma.TournamentGamesUpsertWithWhereUniqueWithoutGamesInput[]
  createMany?: Prisma.TournamentGamesCreateManyGamesInputEnvelope
  set?: Prisma.TournamentGamesWhereUniqueInput | Prisma.TournamentGamesWhereUniqueInput[]
  disconnect?: Prisma.TournamentGamesWhereUniqueInput | Prisma.TournamentGamesWhereUniqueInput[]
  delete?: Prisma.TournamentGamesWhereUniqueInput | Prisma.TournamentGamesWhereUniqueInput[]
  connect?: Prisma.TournamentGamesWhereUniqueInput | Prisma.TournamentGamesWhereUniqueInput[]
  update?: Prisma.TournamentGamesUpdateWithWhereUniqueWithoutGamesInput | Prisma.TournamentGamesUpdateWithWhereUniqueWithoutGamesInput[]
  updateMany?: Prisma.TournamentGamesUpdateManyWithWhereWithoutGamesInput | Prisma.TournamentGamesUpdateManyWithWhereWithoutGamesInput[]
  deleteMany?: Prisma.TournamentGamesScalarWhereInput | Prisma.TournamentGamesScalarWhereInput[]
}

export type TournamentGamesUncheckedUpdateManyWithoutGamesNestedInput = {
  create?: Prisma.XOR<Prisma.TournamentGamesCreateWithoutGamesInput, Prisma.TournamentGamesUncheckedCreateWithoutGamesInput> | Prisma.TournamentGamesCreateWithoutGamesInput[] | Prisma.TournamentGamesUncheckedCreateWithoutGamesInput[]
  connectOrCreate?: Prisma.TournamentGamesCreateOrConnectWithoutGamesInput | Prisma.TournamentGamesCreateOrConnectWithoutGamesInput[]
  upsert?: Prisma.TournamentGamesUpsertWithWhereUniqueWithoutGamesInput | Prisma.TournamentGamesUpsertWithWhereUniqueWithoutGamesInput[]
  createMany?: Prisma.TournamentGamesCreateManyGamesInputEnvelope
  set?: Prisma.TournamentGamesWhereUniqueInput | Prisma.TournamentGamesWhereUniqueInput[]
  disconnect?: Prisma.TournamentGamesWhereUniqueInput | Prisma.TournamentGamesWhereUniqueInput[]
  delete?: Prisma.TournamentGamesWhereUniqueInput | Prisma.TournamentGamesWhereUniqueInput[]
  connect?: Prisma.TournamentGamesWhereUniqueInput | Prisma.TournamentGamesWhereUniqueInput[]
  update?: Prisma.TournamentGamesUpdateWithWhereUniqueWithoutGamesInput | Prisma.TournamentGamesUpdateWithWhereUniqueWithoutGamesInput[]
  updateMany?: Prisma.TournamentGamesUpdateManyWithWhereWithoutGamesInput | Prisma.TournamentGamesUpdateManyWithWhereWithoutGamesInput[]
  deleteMany?: Prisma.TournamentGamesScalarWhereInput | Prisma.TournamentGamesScalarWhereInput[]
}

export type TournamentGamesCreateNestedManyWithoutTournamentInput = {
  create?: Prisma.XOR<Prisma.TournamentGamesCreateWithoutTournamentInput, Prisma.TournamentGamesUncheckedCreateWithoutTournamentInput> | Prisma.TournamentGamesCreateWithoutTournamentInput[] | Prisma.TournamentGamesUncheckedCreateWithoutTournamentInput[]
  connectOrCreate?: Prisma.TournamentGamesCreateOrConnectWithoutTournamentInput | Prisma.TournamentGamesCreateOrConnectWithoutTournamentInput[]
  createMany?: Prisma.TournamentGamesCreateManyTournamentInputEnvelope
  connect?: Prisma.TournamentGamesWhereUniqueInput | Prisma.TournamentGamesWhereUniqueInput[]
}

export type TournamentGamesUncheckedCreateNestedManyWithoutTournamentInput = {
  create?: Prisma.XOR<Prisma.TournamentGamesCreateWithoutTournamentInput, Prisma.TournamentGamesUncheckedCreateWithoutTournamentInput> | Prisma.TournamentGamesCreateWithoutTournamentInput[] | Prisma.TournamentGamesUncheckedCreateWithoutTournamentInput[]
  connectOrCreate?: Prisma.TournamentGamesCreateOrConnectWithoutTournamentInput | Prisma.TournamentGamesCreateOrConnectWithoutTournamentInput[]
  createMany?: Prisma.TournamentGamesCreateManyTournamentInputEnvelope
  connect?: Prisma.TournamentGamesWhereUniqueInput | Prisma.TournamentGamesWhereUniqueInput[]
}

export type TournamentGamesUpdateManyWithoutTournamentNestedInput = {
  create?: Prisma.XOR<Prisma.TournamentGamesCreateWithoutTournamentInput, Prisma.TournamentGamesUncheckedCreateWithoutTournamentInput> | Prisma.TournamentGamesCreateWithoutTournamentInput[] | Prisma.TournamentGamesUncheckedCreateWithoutTournamentInput[]
  connectOrCreate?: Prisma.TournamentGamesCreateOrConnectWithoutTournamentInput | Prisma.TournamentGamesCreateOrConnectWithoutTournamentInput[]
  upsert?: Prisma.TournamentGamesUpsertWithWhereUniqueWithoutTournamentInput | Prisma.TournamentGamesUpsertWithWhereUniqueWithoutTournamentInput[]
  createMany?: Prisma.TournamentGamesCreateManyTournamentInputEnvelope
  set?: Prisma.TournamentGamesWhereUniqueInput | Prisma.TournamentGamesWhereUniqueInput[]
  disconnect?: Prisma.TournamentGamesWhereUniqueInput | Prisma.TournamentGamesWhereUniqueInput[]
  delete?: Prisma.TournamentGamesWhereUniqueInput | Prisma.TournamentGamesWhereUniqueInput[]
  connect?: Prisma.TournamentGamesWhereUniqueInput | Prisma.TournamentGamesWhereUniqueInput[]
  update?: Prisma.TournamentGamesUpdateWithWhereUniqueWithoutTournamentInput | Prisma.TournamentGamesUpdateWithWhereUniqueWithoutTournamentInput[]
  updateMany?: Prisma.TournamentGamesUpdateManyWithWhereWithoutTournamentInput | Prisma.TournamentGamesUpdateManyWithWhereWithoutTournamentInput[]
  deleteMany?: Prisma.TournamentGamesScalarWhereInput | Prisma.TournamentGamesScalarWhereInput[]
}

export type TournamentGamesUncheckedUpdateManyWithoutTournamentNestedInput = {
  create?: Prisma.XOR<Prisma.TournamentGamesCreateWithoutTournamentInput, Prisma.TournamentGamesUncheckedCreateWithoutTournamentInput> | Prisma.TournamentGamesCreateWithoutTournamentInput[] | Prisma.TournamentGamesUncheckedCreateWithoutTournamentInput[]
  connectOrCreate?: Prisma.TournamentGamesCreateOrConnectWithoutTournamentInput | Prisma.TournamentGamesCreateOrConnectWithoutTournamentInput[]
  upsert?: Prisma.TournamentGamesUpsertWithWhereUniqueWithoutTournamentInput | Prisma.TournamentGamesUpsertWithWhereUniqueWithoutTournamentInput[]
  createMany?: Prisma.TournamentGamesCreateManyTournamentInputEnvelope
  set?: Prisma.TournamentGamesWhereUniqueInput | Prisma.TournamentGamesWhereUniqueInput[]
  disconnect?: Prisma.TournamentGamesWhereUniqueInput | Prisma.TournamentGamesWhereUniqueInput[]
  delete?: Prisma.TournamentGamesWhereUniqueInput | Prisma.TournamentGamesWhereUniqueInput[]
  connect?: Prisma.TournamentGamesWhereUniqueInput | Prisma.TournamentGamesWhereUniqueInput[]
  update?: Prisma.TournamentGamesUpdateWithWhereUniqueWithoutTournamentInput | Prisma.TournamentGamesUpdateWithWhereUniqueWithoutTournamentInput[]
  updateMany?: Prisma.TournamentGamesUpdateManyWithWhereWithoutTournamentInput | Prisma.TournamentGamesUpdateManyWithWhereWithoutTournamentInput[]
  deleteMany?: Prisma.TournamentGamesScalarWhereInput | Prisma.TournamentGamesScalarWhereInput[]
}

export type TournamentGamesCreateWithoutGamesInput = {
  tournament: Prisma.TournamentCreateNestedOneWithoutTournamentGamesInput
}

export type TournamentGamesUncheckedCreateWithoutGamesInput = {
  B: string
}

export type TournamentGamesCreateOrConnectWithoutGamesInput = {
  where: Prisma.TournamentGamesWhereUniqueInput
  create: Prisma.XOR<Prisma.TournamentGamesCreateWithoutGamesInput, Prisma.TournamentGamesUncheckedCreateWithoutGamesInput>
}

export type TournamentGamesCreateManyGamesInputEnvelope = {
  data: Prisma.TournamentGamesCreateManyGamesInput | Prisma.TournamentGamesCreateManyGamesInput[]
  skipDuplicates?: boolean
}

export type TournamentGamesUpsertWithWhereUniqueWithoutGamesInput = {
  where: Prisma.TournamentGamesWhereUniqueInput
  update: Prisma.XOR<Prisma.TournamentGamesUpdateWithoutGamesInput, Prisma.TournamentGamesUncheckedUpdateWithoutGamesInput>
  create: Prisma.XOR<Prisma.TournamentGamesCreateWithoutGamesInput, Prisma.TournamentGamesUncheckedCreateWithoutGamesInput>
}

export type TournamentGamesUpdateWithWhereUniqueWithoutGamesInput = {
  where: Prisma.TournamentGamesWhereUniqueInput
  data: Prisma.XOR<Prisma.TournamentGamesUpdateWithoutGamesInput, Prisma.TournamentGamesUncheckedUpdateWithoutGamesInput>
}

export type TournamentGamesUpdateManyWithWhereWithoutGamesInput = {
  where: Prisma.TournamentGamesScalarWhereInput
  data: Prisma.XOR<Prisma.TournamentGamesUpdateManyMutationInput, Prisma.TournamentGamesUncheckedUpdateManyWithoutGamesInput>
}

export type TournamentGamesScalarWhereInput = {
  AND?: Prisma.TournamentGamesScalarWhereInput | Prisma.TournamentGamesScalarWhereInput[]
  OR?: Prisma.TournamentGamesScalarWhereInput[]
  NOT?: Prisma.TournamentGamesScalarWhereInput | Prisma.TournamentGamesScalarWhereInput[]
  A?: Prisma.StringFilter<"TournamentGames"> | string
  B?: Prisma.StringFilter<"TournamentGames"> | string
}

export type TournamentGamesCreateWithoutTournamentInput = {
  games: Prisma.GameCreateNestedOneWithoutTournamentGamesInput
}

export type TournamentGamesUncheckedCreateWithoutTournamentInput = {
  A: string
}

export type TournamentGamesCreateOrConnectWithoutTournamentInput = {
  where: Prisma.TournamentGamesWhereUniqueInput
  create: Prisma.XOR<Prisma.TournamentGamesCreateWithoutTournamentInput, Prisma.TournamentGamesUncheckedCreateWithoutTournamentInput>
}

export type TournamentGamesCreateManyTournamentInputEnvelope = {
  data: Prisma.TournamentGamesCreateManyTournamentInput | Prisma.TournamentGamesCreateManyTournamentInput[]
  skipDuplicates?: boolean
}

export type TournamentGamesUpsertWithWhereUniqueWithoutTournamentInput = {
  where: Prisma.TournamentGamesWhereUniqueInput
  update: Prisma.XOR<Prisma.TournamentGamesUpdateWithoutTournamentInput, Prisma.TournamentGamesUncheckedUpdateWithoutTournamentInput>
  create: Prisma.XOR<Prisma.TournamentGamesCreateWithoutTournamentInput, Prisma.TournamentGamesUncheckedCreateWithoutTournamentInput>
}

export type TournamentGamesUpdateWithWhereUniqueWithoutTournamentInput = {
  where: Prisma.TournamentGamesWhereUniqueInput
  data: Prisma.XOR<Prisma.TournamentGamesUpdateWithoutTournamentInput, Prisma.TournamentGamesUncheckedUpdateWithoutTournamentInput>
}

export type TournamentGamesUpdateManyWithWhereWithoutTournamentInput = {
  where: Prisma.TournamentGamesScalarWhereInput
  data: Prisma.XOR<Prisma.TournamentGamesUpdateManyMutationInput, Prisma.TournamentGamesUncheckedUpdateManyWithoutTournamentInput>
}

export type TournamentGamesCreateManyGamesInput = {
  B: string
}

export type TournamentGamesUpdateWithoutGamesInput = {
  tournament?: Prisma.TournamentUpdateOneRequiredWithoutTournamentGamesNestedInput
}

export type TournamentGamesUncheckedUpdateWithoutGamesInput = {
  B?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TournamentGamesUncheckedUpdateManyWithoutGamesInput = {
  B?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TournamentGamesCreateManyTournamentInput = {
  A: string
}

export type TournamentGamesUpdateWithoutTournamentInput = {
  games?: Prisma.GameUpdateOneRequiredWithoutTournamentGamesNestedInput
}

export type TournamentGamesUncheckedUpdateWithoutTournamentInput = {
  A?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TournamentGamesUncheckedUpdateManyWithoutTournamentInput = {
  A?: Prisma.StringFieldUpdateOperationsInput | string
}



export type TournamentGamesSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  A?: boolean
  B?: boolean
  games?: boolean | Prisma.GameDefaultArgs<ExtArgs>
  tournament?: boolean | Prisma.TournamentDefaultArgs<ExtArgs>
}, ExtArgs["result"]["tournamentGames"]>

export type TournamentGamesSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  A?: boolean
  B?: boolean
  games?: boolean | Prisma.GameDefaultArgs<ExtArgs>
  tournament?: boolean | Prisma.TournamentDefaultArgs<ExtArgs>
}, ExtArgs["result"]["tournamentGames"]>

export type TournamentGamesSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  A?: boolean
  B?: boolean
  games?: boolean | Prisma.GameDefaultArgs<ExtArgs>
  tournament?: boolean | Prisma.TournamentDefaultArgs<ExtArgs>
}, ExtArgs["result"]["tournamentGames"]>

export type TournamentGamesSelectScalar = {
  A?: boolean
  B?: boolean
}

export type TournamentGamesOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"A" | "B", ExtArgs["result"]["tournamentGames"]>
export type TournamentGamesInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  games?: boolean | Prisma.GameDefaultArgs<ExtArgs>
  tournament?: boolean | Prisma.TournamentDefaultArgs<ExtArgs>
}
export type TournamentGamesIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  games?: boolean | Prisma.GameDefaultArgs<ExtArgs>
  tournament?: boolean | Prisma.TournamentDefaultArgs<ExtArgs>
}
export type TournamentGamesIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  games?: boolean | Prisma.GameDefaultArgs<ExtArgs>
  tournament?: boolean | Prisma.TournamentDefaultArgs<ExtArgs>
}

export type $TournamentGamesPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "TournamentGames"
  objects: {
    games: Prisma.$GamePayload<ExtArgs>
    tournament: Prisma.$TournamentPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    A: string
    B: string
  }, ExtArgs["result"]["tournamentGames"]>
  composites: {}
}

export type TournamentGamesGetPayload<S extends boolean | null | undefined | TournamentGamesDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TournamentGamesPayload, S>

export type TournamentGamesCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TournamentGamesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TournamentGamesCountAggregateInputType | true
  }

export interface TournamentGamesDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TournamentGames'], meta: { name: 'TournamentGames' } }
  /**
   * Find zero or one TournamentGames that matches the filter.
   * @param {TournamentGamesFindUniqueArgs} args - Arguments to find a TournamentGames
   * @example
   * // Get one TournamentGames
   * const tournamentGames = await prisma.tournamentGames.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TournamentGamesFindUniqueArgs>(args: Prisma.SelectSubset<T, TournamentGamesFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TournamentGamesClient<runtime.Types.Result.GetResult<Prisma.$TournamentGamesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one TournamentGames that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TournamentGamesFindUniqueOrThrowArgs} args - Arguments to find a TournamentGames
   * @example
   * // Get one TournamentGames
   * const tournamentGames = await prisma.tournamentGames.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TournamentGamesFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TournamentGamesFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TournamentGamesClient<runtime.Types.Result.GetResult<Prisma.$TournamentGamesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TournamentGames that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TournamentGamesFindFirstArgs} args - Arguments to find a TournamentGames
   * @example
   * // Get one TournamentGames
   * const tournamentGames = await prisma.tournamentGames.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TournamentGamesFindFirstArgs>(args?: Prisma.SelectSubset<T, TournamentGamesFindFirstArgs<ExtArgs>>): Prisma.Prisma__TournamentGamesClient<runtime.Types.Result.GetResult<Prisma.$TournamentGamesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TournamentGames that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TournamentGamesFindFirstOrThrowArgs} args - Arguments to find a TournamentGames
   * @example
   * // Get one TournamentGames
   * const tournamentGames = await prisma.tournamentGames.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TournamentGamesFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TournamentGamesFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TournamentGamesClient<runtime.Types.Result.GetResult<Prisma.$TournamentGamesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more TournamentGames that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TournamentGamesFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TournamentGames
   * const tournamentGames = await prisma.tournamentGames.findMany()
   * 
   * // Get first 10 TournamentGames
   * const tournamentGames = await prisma.tournamentGames.findMany({ take: 10 })
   * 
   * // Only select the `A`
   * const tournamentGamesWithAOnly = await prisma.tournamentGames.findMany({ select: { A: true } })
   * 
   */
  findMany<T extends TournamentGamesFindManyArgs>(args?: Prisma.SelectSubset<T, TournamentGamesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TournamentGamesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a TournamentGames.
   * @param {TournamentGamesCreateArgs} args - Arguments to create a TournamentGames.
   * @example
   * // Create one TournamentGames
   * const TournamentGames = await prisma.tournamentGames.create({
   *   data: {
   *     // ... data to create a TournamentGames
   *   }
   * })
   * 
   */
  create<T extends TournamentGamesCreateArgs>(args: Prisma.SelectSubset<T, TournamentGamesCreateArgs<ExtArgs>>): Prisma.Prisma__TournamentGamesClient<runtime.Types.Result.GetResult<Prisma.$TournamentGamesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many TournamentGames.
   * @param {TournamentGamesCreateManyArgs} args - Arguments to create many TournamentGames.
   * @example
   * // Create many TournamentGames
   * const tournamentGames = await prisma.tournamentGames.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TournamentGamesCreateManyArgs>(args?: Prisma.SelectSubset<T, TournamentGamesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many TournamentGames and returns the data saved in the database.
   * @param {TournamentGamesCreateManyAndReturnArgs} args - Arguments to create many TournamentGames.
   * @example
   * // Create many TournamentGames
   * const tournamentGames = await prisma.tournamentGames.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many TournamentGames and only return the `A`
   * const tournamentGamesWithAOnly = await prisma.tournamentGames.createManyAndReturn({
   *   select: { A: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TournamentGamesCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TournamentGamesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TournamentGamesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a TournamentGames.
   * @param {TournamentGamesDeleteArgs} args - Arguments to delete one TournamentGames.
   * @example
   * // Delete one TournamentGames
   * const TournamentGames = await prisma.tournamentGames.delete({
   *   where: {
   *     // ... filter to delete one TournamentGames
   *   }
   * })
   * 
   */
  delete<T extends TournamentGamesDeleteArgs>(args: Prisma.SelectSubset<T, TournamentGamesDeleteArgs<ExtArgs>>): Prisma.Prisma__TournamentGamesClient<runtime.Types.Result.GetResult<Prisma.$TournamentGamesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one TournamentGames.
   * @param {TournamentGamesUpdateArgs} args - Arguments to update one TournamentGames.
   * @example
   * // Update one TournamentGames
   * const tournamentGames = await prisma.tournamentGames.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TournamentGamesUpdateArgs>(args: Prisma.SelectSubset<T, TournamentGamesUpdateArgs<ExtArgs>>): Prisma.Prisma__TournamentGamesClient<runtime.Types.Result.GetResult<Prisma.$TournamentGamesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more TournamentGames.
   * @param {TournamentGamesDeleteManyArgs} args - Arguments to filter TournamentGames to delete.
   * @example
   * // Delete a few TournamentGames
   * const { count } = await prisma.tournamentGames.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TournamentGamesDeleteManyArgs>(args?: Prisma.SelectSubset<T, TournamentGamesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TournamentGames.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TournamentGamesUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TournamentGames
   * const tournamentGames = await prisma.tournamentGames.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TournamentGamesUpdateManyArgs>(args: Prisma.SelectSubset<T, TournamentGamesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TournamentGames and returns the data updated in the database.
   * @param {TournamentGamesUpdateManyAndReturnArgs} args - Arguments to update many TournamentGames.
   * @example
   * // Update many TournamentGames
   * const tournamentGames = await prisma.tournamentGames.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more TournamentGames and only return the `A`
   * const tournamentGamesWithAOnly = await prisma.tournamentGames.updateManyAndReturn({
   *   select: { A: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TournamentGamesUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TournamentGamesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TournamentGamesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one TournamentGames.
   * @param {TournamentGamesUpsertArgs} args - Arguments to update or create a TournamentGames.
   * @example
   * // Update or create a TournamentGames
   * const tournamentGames = await prisma.tournamentGames.upsert({
   *   create: {
   *     // ... data to create a TournamentGames
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TournamentGames we want to update
   *   }
   * })
   */
  upsert<T extends TournamentGamesUpsertArgs>(args: Prisma.SelectSubset<T, TournamentGamesUpsertArgs<ExtArgs>>): Prisma.Prisma__TournamentGamesClient<runtime.Types.Result.GetResult<Prisma.$TournamentGamesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of TournamentGames.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TournamentGamesCountArgs} args - Arguments to filter TournamentGames to count.
   * @example
   * // Count the number of TournamentGames
   * const count = await prisma.tournamentGames.count({
   *   where: {
   *     // ... the filter for the TournamentGames we want to count
   *   }
   * })
  **/
  count<T extends TournamentGamesCountArgs>(
    args?: Prisma.Subset<T, TournamentGamesCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TournamentGamesCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a TournamentGames.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TournamentGamesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TournamentGamesAggregateArgs>(args: Prisma.Subset<T, TournamentGamesAggregateArgs>): Prisma.PrismaPromise<GetTournamentGamesAggregateType<T>>

  /**
   * Group by TournamentGames.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TournamentGamesGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TournamentGamesGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TournamentGamesGroupByArgs['orderBy'] }
      : { orderBy?: TournamentGamesGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TournamentGamesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTournamentGamesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the TournamentGames model
 */
readonly fields: TournamentGamesFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TournamentGames.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TournamentGamesClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  games<T extends Prisma.GameDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.GameDefaultArgs<ExtArgs>>): Prisma.Prisma__GameClient<runtime.Types.Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  tournament<T extends Prisma.TournamentDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TournamentDefaultArgs<ExtArgs>>): Prisma.Prisma__TournamentClient<runtime.Types.Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the TournamentGames model
 */
export interface TournamentGamesFieldRefs {
  readonly A: Prisma.FieldRef<"TournamentGames", 'String'>
  readonly B: Prisma.FieldRef<"TournamentGames", 'String'>
}
    

// Custom InputTypes
/**
 * TournamentGames findUnique
 */
export type TournamentGamesFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentGames
   */
  select?: Prisma.TournamentGamesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TournamentGames
   */
  omit?: Prisma.TournamentGamesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentGamesInclude<ExtArgs> | null
  /**
   * Filter, which TournamentGames to fetch.
   */
  where: Prisma.TournamentGamesWhereUniqueInput
}

/**
 * TournamentGames findUniqueOrThrow
 */
export type TournamentGamesFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentGames
   */
  select?: Prisma.TournamentGamesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TournamentGames
   */
  omit?: Prisma.TournamentGamesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentGamesInclude<ExtArgs> | null
  /**
   * Filter, which TournamentGames to fetch.
   */
  where: Prisma.TournamentGamesWhereUniqueInput
}

/**
 * TournamentGames findFirst
 */
export type TournamentGamesFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentGames
   */
  select?: Prisma.TournamentGamesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TournamentGames
   */
  omit?: Prisma.TournamentGamesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentGamesInclude<ExtArgs> | null
  /**
   * Filter, which TournamentGames to fetch.
   */
  where?: Prisma.TournamentGamesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TournamentGames to fetch.
   */
  orderBy?: Prisma.TournamentGamesOrderByWithRelationInput | Prisma.TournamentGamesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TournamentGames.
   */
  cursor?: Prisma.TournamentGamesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TournamentGames from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TournamentGames.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TournamentGames.
   */
  distinct?: Prisma.TournamentGamesScalarFieldEnum | Prisma.TournamentGamesScalarFieldEnum[]
}

/**
 * TournamentGames findFirstOrThrow
 */
export type TournamentGamesFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentGames
   */
  select?: Prisma.TournamentGamesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TournamentGames
   */
  omit?: Prisma.TournamentGamesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentGamesInclude<ExtArgs> | null
  /**
   * Filter, which TournamentGames to fetch.
   */
  where?: Prisma.TournamentGamesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TournamentGames to fetch.
   */
  orderBy?: Prisma.TournamentGamesOrderByWithRelationInput | Prisma.TournamentGamesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TournamentGames.
   */
  cursor?: Prisma.TournamentGamesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TournamentGames from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TournamentGames.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TournamentGames.
   */
  distinct?: Prisma.TournamentGamesScalarFieldEnum | Prisma.TournamentGamesScalarFieldEnum[]
}

/**
 * TournamentGames findMany
 */
export type TournamentGamesFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentGames
   */
  select?: Prisma.TournamentGamesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TournamentGames
   */
  omit?: Prisma.TournamentGamesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentGamesInclude<ExtArgs> | null
  /**
   * Filter, which TournamentGames to fetch.
   */
  where?: Prisma.TournamentGamesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TournamentGames to fetch.
   */
  orderBy?: Prisma.TournamentGamesOrderByWithRelationInput | Prisma.TournamentGamesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing TournamentGames.
   */
  cursor?: Prisma.TournamentGamesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TournamentGames from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TournamentGames.
   */
  skip?: number
  distinct?: Prisma.TournamentGamesScalarFieldEnum | Prisma.TournamentGamesScalarFieldEnum[]
}

/**
 * TournamentGames create
 */
export type TournamentGamesCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentGames
   */
  select?: Prisma.TournamentGamesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TournamentGames
   */
  omit?: Prisma.TournamentGamesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentGamesInclude<ExtArgs> | null
  /**
   * The data needed to create a TournamentGames.
   */
  data: Prisma.XOR<Prisma.TournamentGamesCreateInput, Prisma.TournamentGamesUncheckedCreateInput>
}

/**
 * TournamentGames createMany
 */
export type TournamentGamesCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many TournamentGames.
   */
  data: Prisma.TournamentGamesCreateManyInput | Prisma.TournamentGamesCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * TournamentGames createManyAndReturn
 */
export type TournamentGamesCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentGames
   */
  select?: Prisma.TournamentGamesSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TournamentGames
   */
  omit?: Prisma.TournamentGamesOmit<ExtArgs> | null
  /**
   * The data used to create many TournamentGames.
   */
  data: Prisma.TournamentGamesCreateManyInput | Prisma.TournamentGamesCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentGamesIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * TournamentGames update
 */
export type TournamentGamesUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentGames
   */
  select?: Prisma.TournamentGamesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TournamentGames
   */
  omit?: Prisma.TournamentGamesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentGamesInclude<ExtArgs> | null
  /**
   * The data needed to update a TournamentGames.
   */
  data: Prisma.XOR<Prisma.TournamentGamesUpdateInput, Prisma.TournamentGamesUncheckedUpdateInput>
  /**
   * Choose, which TournamentGames to update.
   */
  where: Prisma.TournamentGamesWhereUniqueInput
}

/**
 * TournamentGames updateMany
 */
export type TournamentGamesUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update TournamentGames.
   */
  data: Prisma.XOR<Prisma.TournamentGamesUpdateManyMutationInput, Prisma.TournamentGamesUncheckedUpdateManyInput>
  /**
   * Filter which TournamentGames to update
   */
  where?: Prisma.TournamentGamesWhereInput
  /**
   * Limit how many TournamentGames to update.
   */
  limit?: number
}

/**
 * TournamentGames updateManyAndReturn
 */
export type TournamentGamesUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentGames
   */
  select?: Prisma.TournamentGamesSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TournamentGames
   */
  omit?: Prisma.TournamentGamesOmit<ExtArgs> | null
  /**
   * The data used to update TournamentGames.
   */
  data: Prisma.XOR<Prisma.TournamentGamesUpdateManyMutationInput, Prisma.TournamentGamesUncheckedUpdateManyInput>
  /**
   * Filter which TournamentGames to update
   */
  where?: Prisma.TournamentGamesWhereInput
  /**
   * Limit how many TournamentGames to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentGamesIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * TournamentGames upsert
 */
export type TournamentGamesUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentGames
   */
  select?: Prisma.TournamentGamesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TournamentGames
   */
  omit?: Prisma.TournamentGamesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentGamesInclude<ExtArgs> | null
  /**
   * The filter to search for the TournamentGames to update in case it exists.
   */
  where: Prisma.TournamentGamesWhereUniqueInput
  /**
   * In case the TournamentGames found by the `where` argument doesn't exist, create a new TournamentGames with this data.
   */
  create: Prisma.XOR<Prisma.TournamentGamesCreateInput, Prisma.TournamentGamesUncheckedCreateInput>
  /**
   * In case the TournamentGames was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TournamentGamesUpdateInput, Prisma.TournamentGamesUncheckedUpdateInput>
}

/**
 * TournamentGames delete
 */
export type TournamentGamesDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentGames
   */
  select?: Prisma.TournamentGamesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TournamentGames
   */
  omit?: Prisma.TournamentGamesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentGamesInclude<ExtArgs> | null
  /**
   * Filter which TournamentGames to delete.
   */
  where: Prisma.TournamentGamesWhereUniqueInput
}

/**
 * TournamentGames deleteMany
 */
export type TournamentGamesDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TournamentGames to delete
   */
  where?: Prisma.TournamentGamesWhereInput
  /**
   * Limit how many TournamentGames to delete.
   */
  limit?: number
}

/**
 * TournamentGames without action
 */
export type TournamentGamesDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentGames
   */
  select?: Prisma.TournamentGamesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TournamentGames
   */
  omit?: Prisma.TournamentGamesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentGamesInclude<ExtArgs> | null
}
