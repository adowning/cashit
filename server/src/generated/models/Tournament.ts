
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Tournament` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Tournament
 * 
 */
export type TournamentModel = runtime.Types.Result.DefaultSelection<Prisma.$TournamentPayload>

export type AggregateTournament = {
  _count: TournamentCountAggregateOutputType | null
  _avg: TournamentAvgAggregateOutputType | null
  _sum: TournamentSumAggregateOutputType | null
  _min: TournamentMinAggregateOutputType | null
  _max: TournamentMaxAggregateOutputType | null
}

export type TournamentAvgAggregateOutputType = {
  targetScore: number | null
}

export type TournamentSumAggregateOutputType = {
  targetScore: number | null
}

export type TournamentMinAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  startTime: Date | null
  endTime: Date | null
  targetScore: number | null
  status: $Enums.TournamentStatus | null
  createdAt: Date | null
  updatedAt: Date | null
  createdByid: string | null
  userId: string | null
}

export type TournamentMaxAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  startTime: Date | null
  endTime: Date | null
  targetScore: number | null
  status: $Enums.TournamentStatus | null
  createdAt: Date | null
  updatedAt: Date | null
  createdByid: string | null
  userId: string | null
}

export type TournamentCountAggregateOutputType = {
  id: number
  name: number
  description: number
  startTime: number
  endTime: number
  targetScore: number
  status: number
  createdAt: number
  updatedAt: number
  createdByid: number
  userId: number
  _all: number
}


export type TournamentAvgAggregateInputType = {
  targetScore?: true
}

export type TournamentSumAggregateInputType = {
  targetScore?: true
}

export type TournamentMinAggregateInputType = {
  id?: true
  name?: true
  description?: true
  startTime?: true
  endTime?: true
  targetScore?: true
  status?: true
  createdAt?: true
  updatedAt?: true
  createdByid?: true
  userId?: true
}

export type TournamentMaxAggregateInputType = {
  id?: true
  name?: true
  description?: true
  startTime?: true
  endTime?: true
  targetScore?: true
  status?: true
  createdAt?: true
  updatedAt?: true
  createdByid?: true
  userId?: true
}

export type TournamentCountAggregateInputType = {
  id?: true
  name?: true
  description?: true
  startTime?: true
  endTime?: true
  targetScore?: true
  status?: true
  createdAt?: true
  updatedAt?: true
  createdByid?: true
  userId?: true
  _all?: true
}

export type TournamentAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Tournament to aggregate.
   */
  where?: Prisma.TournamentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Tournaments to fetch.
   */
  orderBy?: Prisma.TournamentOrderByWithRelationInput | Prisma.TournamentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TournamentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Tournaments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Tournaments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Tournaments
  **/
  _count?: true | TournamentCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: TournamentAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: TournamentSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TournamentMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TournamentMaxAggregateInputType
}

export type GetTournamentAggregateType<T extends TournamentAggregateArgs> = {
      [P in keyof T & keyof AggregateTournament]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTournament[P]>
    : Prisma.GetScalarType<T[P], AggregateTournament[P]>
}




export type TournamentGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TournamentWhereInput
  orderBy?: Prisma.TournamentOrderByWithAggregationInput | Prisma.TournamentOrderByWithAggregationInput[]
  by: Prisma.TournamentScalarFieldEnum[] | Prisma.TournamentScalarFieldEnum
  having?: Prisma.TournamentScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TournamentCountAggregateInputType | true
  _avg?: TournamentAvgAggregateInputType
  _sum?: TournamentSumAggregateInputType
  _min?: TournamentMinAggregateInputType
  _max?: TournamentMaxAggregateInputType
}

export type TournamentGroupByOutputType = {
  id: string
  name: string
  description: string | null
  startTime: Date
  endTime: Date | null
  targetScore: number | null
  status: $Enums.TournamentStatus
  createdAt: Date
  updatedAt: Date
  createdByid: string | null
  userId: string | null
  _count: TournamentCountAggregateOutputType | null
  _avg: TournamentAvgAggregateOutputType | null
  _sum: TournamentSumAggregateOutputType | null
  _min: TournamentMinAggregateOutputType | null
  _max: TournamentMaxAggregateOutputType | null
}

type GetTournamentGroupByPayload<T extends TournamentGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TournamentGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TournamentGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TournamentGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TournamentGroupByOutputType[P]>
      }
    >
  > 



export type TournamentWhereInput = {
  AND?: Prisma.TournamentWhereInput | Prisma.TournamentWhereInput[]
  OR?: Prisma.TournamentWhereInput[]
  NOT?: Prisma.TournamentWhereInput | Prisma.TournamentWhereInput[]
  id?: Prisma.StringFilter<"Tournament"> | string
  name?: Prisma.StringFilter<"Tournament"> | string
  description?: Prisma.StringNullableFilter<"Tournament"> | string | null
  startTime?: Prisma.DateTimeFilter<"Tournament"> | Date | string
  endTime?: Prisma.DateTimeNullableFilter<"Tournament"> | Date | string | null
  targetScore?: Prisma.IntNullableFilter<"Tournament"> | number | null
  status?: Prisma.EnumTournamentStatusFilter<"Tournament"> | $Enums.TournamentStatus
  createdAt?: Prisma.DateTimeFilter<"Tournament"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Tournament"> | Date | string
  createdByid?: Prisma.StringNullableFilter<"Tournament"> | string | null
  userId?: Prisma.StringNullableFilter<"Tournament"> | string | null
  user?: Prisma.XOR<Prisma.UserProfileNullableScalarRelationFilter, Prisma.UserProfileWhereInput> | null
  participants?: Prisma.TournamentParticipantListRelationFilter
  rewards?: Prisma.TournamentRewardListRelationFilter
  tournamentGames?: Prisma.TournamentGamesListRelationFilter
}

export type TournamentOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  startTime?: Prisma.SortOrder
  endTime?: Prisma.SortOrderInput | Prisma.SortOrder
  targetScore?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  createdByid?: Prisma.SortOrderInput | Prisma.SortOrder
  userId?: Prisma.SortOrderInput | Prisma.SortOrder
  user?: Prisma.UserProfileOrderByWithRelationInput
  participants?: Prisma.TournamentParticipantOrderByRelationAggregateInput
  rewards?: Prisma.TournamentRewardOrderByRelationAggregateInput
  tournamentGames?: Prisma.TournamentGamesOrderByRelationAggregateInput
}

export type TournamentWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.TournamentWhereInput | Prisma.TournamentWhereInput[]
  OR?: Prisma.TournamentWhereInput[]
  NOT?: Prisma.TournamentWhereInput | Prisma.TournamentWhereInput[]
  name?: Prisma.StringFilter<"Tournament"> | string
  description?: Prisma.StringNullableFilter<"Tournament"> | string | null
  startTime?: Prisma.DateTimeFilter<"Tournament"> | Date | string
  endTime?: Prisma.DateTimeNullableFilter<"Tournament"> | Date | string | null
  targetScore?: Prisma.IntNullableFilter<"Tournament"> | number | null
  status?: Prisma.EnumTournamentStatusFilter<"Tournament"> | $Enums.TournamentStatus
  createdAt?: Prisma.DateTimeFilter<"Tournament"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Tournament"> | Date | string
  createdByid?: Prisma.StringNullableFilter<"Tournament"> | string | null
  userId?: Prisma.StringNullableFilter<"Tournament"> | string | null
  user?: Prisma.XOR<Prisma.UserProfileNullableScalarRelationFilter, Prisma.UserProfileWhereInput> | null
  participants?: Prisma.TournamentParticipantListRelationFilter
  rewards?: Prisma.TournamentRewardListRelationFilter
  tournamentGames?: Prisma.TournamentGamesListRelationFilter
}, "id">

export type TournamentOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  startTime?: Prisma.SortOrder
  endTime?: Prisma.SortOrderInput | Prisma.SortOrder
  targetScore?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  createdByid?: Prisma.SortOrderInput | Prisma.SortOrder
  userId?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.TournamentCountOrderByAggregateInput
  _avg?: Prisma.TournamentAvgOrderByAggregateInput
  _max?: Prisma.TournamentMaxOrderByAggregateInput
  _min?: Prisma.TournamentMinOrderByAggregateInput
  _sum?: Prisma.TournamentSumOrderByAggregateInput
}

export type TournamentScalarWhereWithAggregatesInput = {
  AND?: Prisma.TournamentScalarWhereWithAggregatesInput | Prisma.TournamentScalarWhereWithAggregatesInput[]
  OR?: Prisma.TournamentScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TournamentScalarWhereWithAggregatesInput | Prisma.TournamentScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Tournament"> | string
  name?: Prisma.StringWithAggregatesFilter<"Tournament"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"Tournament"> | string | null
  startTime?: Prisma.DateTimeWithAggregatesFilter<"Tournament"> | Date | string
  endTime?: Prisma.DateTimeNullableWithAggregatesFilter<"Tournament"> | Date | string | null
  targetScore?: Prisma.IntNullableWithAggregatesFilter<"Tournament"> | number | null
  status?: Prisma.EnumTournamentStatusWithAggregatesFilter<"Tournament"> | $Enums.TournamentStatus
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Tournament"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Tournament"> | Date | string
  createdByid?: Prisma.StringNullableWithAggregatesFilter<"Tournament"> | string | null
  userId?: Prisma.StringNullableWithAggregatesFilter<"Tournament"> | string | null
}

export type TournamentCreateInput = {
  id?: string
  name: string
  description?: string | null
  startTime: Date | string
  endTime?: Date | string | null
  targetScore?: number | null
  status?: $Enums.TournamentStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  createdByid?: string | null
  user?: Prisma.UserProfileCreateNestedOneWithoutTournamentInput
  participants?: Prisma.TournamentParticipantCreateNestedManyWithoutTournamentInput
  rewards?: Prisma.TournamentRewardCreateNestedManyWithoutTournamentInput
  tournamentGames?: Prisma.TournamentGamesCreateNestedManyWithoutTournamentInput
}

export type TournamentUncheckedCreateInput = {
  id?: string
  name: string
  description?: string | null
  startTime: Date | string
  endTime?: Date | string | null
  targetScore?: number | null
  status?: $Enums.TournamentStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  createdByid?: string | null
  userId?: string | null
  participants?: Prisma.TournamentParticipantUncheckedCreateNestedManyWithoutTournamentInput
  rewards?: Prisma.TournamentRewardUncheckedCreateNestedManyWithoutTournamentInput
  tournamentGames?: Prisma.TournamentGamesUncheckedCreateNestedManyWithoutTournamentInput
}

export type TournamentUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  targetScore?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  status?: Prisma.EnumTournamentStatusFieldUpdateOperationsInput | $Enums.TournamentStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdByid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  user?: Prisma.UserProfileUpdateOneWithoutTournamentNestedInput
  participants?: Prisma.TournamentParticipantUpdateManyWithoutTournamentNestedInput
  rewards?: Prisma.TournamentRewardUpdateManyWithoutTournamentNestedInput
  tournamentGames?: Prisma.TournamentGamesUpdateManyWithoutTournamentNestedInput
}

export type TournamentUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  targetScore?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  status?: Prisma.EnumTournamentStatusFieldUpdateOperationsInput | $Enums.TournamentStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdByid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  participants?: Prisma.TournamentParticipantUncheckedUpdateManyWithoutTournamentNestedInput
  rewards?: Prisma.TournamentRewardUncheckedUpdateManyWithoutTournamentNestedInput
  tournamentGames?: Prisma.TournamentGamesUncheckedUpdateManyWithoutTournamentNestedInput
}

export type TournamentCreateManyInput = {
  id?: string
  name: string
  description?: string | null
  startTime: Date | string
  endTime?: Date | string | null
  targetScore?: number | null
  status?: $Enums.TournamentStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  createdByid?: string | null
  userId?: string | null
}

export type TournamentUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  targetScore?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  status?: Prisma.EnumTournamentStatusFieldUpdateOperationsInput | $Enums.TournamentStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdByid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type TournamentUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  targetScore?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  status?: Prisma.EnumTournamentStatusFieldUpdateOperationsInput | $Enums.TournamentStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdByid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type TournamentCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  startTime?: Prisma.SortOrder
  endTime?: Prisma.SortOrder
  targetScore?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  createdByid?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type TournamentAvgOrderByAggregateInput = {
  targetScore?: Prisma.SortOrder
}

export type TournamentMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  startTime?: Prisma.SortOrder
  endTime?: Prisma.SortOrder
  targetScore?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  createdByid?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type TournamentMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  startTime?: Prisma.SortOrder
  endTime?: Prisma.SortOrder
  targetScore?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  createdByid?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type TournamentSumOrderByAggregateInput = {
  targetScore?: Prisma.SortOrder
}

export type TournamentScalarRelationFilter = {
  is?: Prisma.TournamentWhereInput
  isNot?: Prisma.TournamentWhereInput
}

export type TournamentListRelationFilter = {
  every?: Prisma.TournamentWhereInput
  some?: Prisma.TournamentWhereInput
  none?: Prisma.TournamentWhereInput
}

export type TournamentOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type EnumTournamentStatusFieldUpdateOperationsInput = {
  set?: $Enums.TournamentStatus
}

export type TournamentCreateNestedOneWithoutParticipantsInput = {
  create?: Prisma.XOR<Prisma.TournamentCreateWithoutParticipantsInput, Prisma.TournamentUncheckedCreateWithoutParticipantsInput>
  connectOrCreate?: Prisma.TournamentCreateOrConnectWithoutParticipantsInput
  connect?: Prisma.TournamentWhereUniqueInput
}

export type TournamentUpdateOneRequiredWithoutParticipantsNestedInput = {
  create?: Prisma.XOR<Prisma.TournamentCreateWithoutParticipantsInput, Prisma.TournamentUncheckedCreateWithoutParticipantsInput>
  connectOrCreate?: Prisma.TournamentCreateOrConnectWithoutParticipantsInput
  upsert?: Prisma.TournamentUpsertWithoutParticipantsInput
  connect?: Prisma.TournamentWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TournamentUpdateToOneWithWhereWithoutParticipantsInput, Prisma.TournamentUpdateWithoutParticipantsInput>, Prisma.TournamentUncheckedUpdateWithoutParticipantsInput>
}

export type TournamentCreateNestedOneWithoutRewardsInput = {
  create?: Prisma.XOR<Prisma.TournamentCreateWithoutRewardsInput, Prisma.TournamentUncheckedCreateWithoutRewardsInput>
  connectOrCreate?: Prisma.TournamentCreateOrConnectWithoutRewardsInput
  connect?: Prisma.TournamentWhereUniqueInput
}

export type TournamentUpdateOneRequiredWithoutRewardsNestedInput = {
  create?: Prisma.XOR<Prisma.TournamentCreateWithoutRewardsInput, Prisma.TournamentUncheckedCreateWithoutRewardsInput>
  connectOrCreate?: Prisma.TournamentCreateOrConnectWithoutRewardsInput
  upsert?: Prisma.TournamentUpsertWithoutRewardsInput
  connect?: Prisma.TournamentWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TournamentUpdateToOneWithWhereWithoutRewardsInput, Prisma.TournamentUpdateWithoutRewardsInput>, Prisma.TournamentUncheckedUpdateWithoutRewardsInput>
}

export type TournamentCreateNestedOneWithoutTournamentGamesInput = {
  create?: Prisma.XOR<Prisma.TournamentCreateWithoutTournamentGamesInput, Prisma.TournamentUncheckedCreateWithoutTournamentGamesInput>
  connectOrCreate?: Prisma.TournamentCreateOrConnectWithoutTournamentGamesInput
  connect?: Prisma.TournamentWhereUniqueInput
}

export type TournamentUpdateOneRequiredWithoutTournamentGamesNestedInput = {
  create?: Prisma.XOR<Prisma.TournamentCreateWithoutTournamentGamesInput, Prisma.TournamentUncheckedCreateWithoutTournamentGamesInput>
  connectOrCreate?: Prisma.TournamentCreateOrConnectWithoutTournamentGamesInput
  upsert?: Prisma.TournamentUpsertWithoutTournamentGamesInput
  connect?: Prisma.TournamentWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TournamentUpdateToOneWithWhereWithoutTournamentGamesInput, Prisma.TournamentUpdateWithoutTournamentGamesInput>, Prisma.TournamentUncheckedUpdateWithoutTournamentGamesInput>
}

export type TournamentCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.TournamentCreateWithoutUserInput, Prisma.TournamentUncheckedCreateWithoutUserInput> | Prisma.TournamentCreateWithoutUserInput[] | Prisma.TournamentUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.TournamentCreateOrConnectWithoutUserInput | Prisma.TournamentCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.TournamentCreateManyUserInputEnvelope
  connect?: Prisma.TournamentWhereUniqueInput | Prisma.TournamentWhereUniqueInput[]
}

export type TournamentUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.TournamentCreateWithoutUserInput, Prisma.TournamentUncheckedCreateWithoutUserInput> | Prisma.TournamentCreateWithoutUserInput[] | Prisma.TournamentUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.TournamentCreateOrConnectWithoutUserInput | Prisma.TournamentCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.TournamentCreateManyUserInputEnvelope
  connect?: Prisma.TournamentWhereUniqueInput | Prisma.TournamentWhereUniqueInput[]
}

export type TournamentUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.TournamentCreateWithoutUserInput, Prisma.TournamentUncheckedCreateWithoutUserInput> | Prisma.TournamentCreateWithoutUserInput[] | Prisma.TournamentUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.TournamentCreateOrConnectWithoutUserInput | Prisma.TournamentCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.TournamentUpsertWithWhereUniqueWithoutUserInput | Prisma.TournamentUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.TournamentCreateManyUserInputEnvelope
  set?: Prisma.TournamentWhereUniqueInput | Prisma.TournamentWhereUniqueInput[]
  disconnect?: Prisma.TournamentWhereUniqueInput | Prisma.TournamentWhereUniqueInput[]
  delete?: Prisma.TournamentWhereUniqueInput | Prisma.TournamentWhereUniqueInput[]
  connect?: Prisma.TournamentWhereUniqueInput | Prisma.TournamentWhereUniqueInput[]
  update?: Prisma.TournamentUpdateWithWhereUniqueWithoutUserInput | Prisma.TournamentUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.TournamentUpdateManyWithWhereWithoutUserInput | Prisma.TournamentUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.TournamentScalarWhereInput | Prisma.TournamentScalarWhereInput[]
}

export type TournamentUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.TournamentCreateWithoutUserInput, Prisma.TournamentUncheckedCreateWithoutUserInput> | Prisma.TournamentCreateWithoutUserInput[] | Prisma.TournamentUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.TournamentCreateOrConnectWithoutUserInput | Prisma.TournamentCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.TournamentUpsertWithWhereUniqueWithoutUserInput | Prisma.TournamentUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.TournamentCreateManyUserInputEnvelope
  set?: Prisma.TournamentWhereUniqueInput | Prisma.TournamentWhereUniqueInput[]
  disconnect?: Prisma.TournamentWhereUniqueInput | Prisma.TournamentWhereUniqueInput[]
  delete?: Prisma.TournamentWhereUniqueInput | Prisma.TournamentWhereUniqueInput[]
  connect?: Prisma.TournamentWhereUniqueInput | Prisma.TournamentWhereUniqueInput[]
  update?: Prisma.TournamentUpdateWithWhereUniqueWithoutUserInput | Prisma.TournamentUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.TournamentUpdateManyWithWhereWithoutUserInput | Prisma.TournamentUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.TournamentScalarWhereInput | Prisma.TournamentScalarWhereInput[]
}

export type TournamentCreateWithoutParticipantsInput = {
  id?: string
  name: string
  description?: string | null
  startTime: Date | string
  endTime?: Date | string | null
  targetScore?: number | null
  status?: $Enums.TournamentStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  createdByid?: string | null
  user?: Prisma.UserProfileCreateNestedOneWithoutTournamentInput
  rewards?: Prisma.TournamentRewardCreateNestedManyWithoutTournamentInput
  tournamentGames?: Prisma.TournamentGamesCreateNestedManyWithoutTournamentInput
}

export type TournamentUncheckedCreateWithoutParticipantsInput = {
  id?: string
  name: string
  description?: string | null
  startTime: Date | string
  endTime?: Date | string | null
  targetScore?: number | null
  status?: $Enums.TournamentStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  createdByid?: string | null
  userId?: string | null
  rewards?: Prisma.TournamentRewardUncheckedCreateNestedManyWithoutTournamentInput
  tournamentGames?: Prisma.TournamentGamesUncheckedCreateNestedManyWithoutTournamentInput
}

export type TournamentCreateOrConnectWithoutParticipantsInput = {
  where: Prisma.TournamentWhereUniqueInput
  create: Prisma.XOR<Prisma.TournamentCreateWithoutParticipantsInput, Prisma.TournamentUncheckedCreateWithoutParticipantsInput>
}

export type TournamentUpsertWithoutParticipantsInput = {
  update: Prisma.XOR<Prisma.TournamentUpdateWithoutParticipantsInput, Prisma.TournamentUncheckedUpdateWithoutParticipantsInput>
  create: Prisma.XOR<Prisma.TournamentCreateWithoutParticipantsInput, Prisma.TournamentUncheckedCreateWithoutParticipantsInput>
  where?: Prisma.TournamentWhereInput
}

export type TournamentUpdateToOneWithWhereWithoutParticipantsInput = {
  where?: Prisma.TournamentWhereInput
  data: Prisma.XOR<Prisma.TournamentUpdateWithoutParticipantsInput, Prisma.TournamentUncheckedUpdateWithoutParticipantsInput>
}

export type TournamentUpdateWithoutParticipantsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  targetScore?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  status?: Prisma.EnumTournamentStatusFieldUpdateOperationsInput | $Enums.TournamentStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdByid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  user?: Prisma.UserProfileUpdateOneWithoutTournamentNestedInput
  rewards?: Prisma.TournamentRewardUpdateManyWithoutTournamentNestedInput
  tournamentGames?: Prisma.TournamentGamesUpdateManyWithoutTournamentNestedInput
}

export type TournamentUncheckedUpdateWithoutParticipantsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  targetScore?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  status?: Prisma.EnumTournamentStatusFieldUpdateOperationsInput | $Enums.TournamentStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdByid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rewards?: Prisma.TournamentRewardUncheckedUpdateManyWithoutTournamentNestedInput
  tournamentGames?: Prisma.TournamentGamesUncheckedUpdateManyWithoutTournamentNestedInput
}

export type TournamentCreateWithoutRewardsInput = {
  id?: string
  name: string
  description?: string | null
  startTime: Date | string
  endTime?: Date | string | null
  targetScore?: number | null
  status?: $Enums.TournamentStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  createdByid?: string | null
  user?: Prisma.UserProfileCreateNestedOneWithoutTournamentInput
  participants?: Prisma.TournamentParticipantCreateNestedManyWithoutTournamentInput
  tournamentGames?: Prisma.TournamentGamesCreateNestedManyWithoutTournamentInput
}

export type TournamentUncheckedCreateWithoutRewardsInput = {
  id?: string
  name: string
  description?: string | null
  startTime: Date | string
  endTime?: Date | string | null
  targetScore?: number | null
  status?: $Enums.TournamentStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  createdByid?: string | null
  userId?: string | null
  participants?: Prisma.TournamentParticipantUncheckedCreateNestedManyWithoutTournamentInput
  tournamentGames?: Prisma.TournamentGamesUncheckedCreateNestedManyWithoutTournamentInput
}

export type TournamentCreateOrConnectWithoutRewardsInput = {
  where: Prisma.TournamentWhereUniqueInput
  create: Prisma.XOR<Prisma.TournamentCreateWithoutRewardsInput, Prisma.TournamentUncheckedCreateWithoutRewardsInput>
}

export type TournamentUpsertWithoutRewardsInput = {
  update: Prisma.XOR<Prisma.TournamentUpdateWithoutRewardsInput, Prisma.TournamentUncheckedUpdateWithoutRewardsInput>
  create: Prisma.XOR<Prisma.TournamentCreateWithoutRewardsInput, Prisma.TournamentUncheckedCreateWithoutRewardsInput>
  where?: Prisma.TournamentWhereInput
}

export type TournamentUpdateToOneWithWhereWithoutRewardsInput = {
  where?: Prisma.TournamentWhereInput
  data: Prisma.XOR<Prisma.TournamentUpdateWithoutRewardsInput, Prisma.TournamentUncheckedUpdateWithoutRewardsInput>
}

export type TournamentUpdateWithoutRewardsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  targetScore?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  status?: Prisma.EnumTournamentStatusFieldUpdateOperationsInput | $Enums.TournamentStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdByid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  user?: Prisma.UserProfileUpdateOneWithoutTournamentNestedInput
  participants?: Prisma.TournamentParticipantUpdateManyWithoutTournamentNestedInput
  tournamentGames?: Prisma.TournamentGamesUpdateManyWithoutTournamentNestedInput
}

export type TournamentUncheckedUpdateWithoutRewardsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  targetScore?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  status?: Prisma.EnumTournamentStatusFieldUpdateOperationsInput | $Enums.TournamentStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdByid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  participants?: Prisma.TournamentParticipantUncheckedUpdateManyWithoutTournamentNestedInput
  tournamentGames?: Prisma.TournamentGamesUncheckedUpdateManyWithoutTournamentNestedInput
}

export type TournamentCreateWithoutTournamentGamesInput = {
  id?: string
  name: string
  description?: string | null
  startTime: Date | string
  endTime?: Date | string | null
  targetScore?: number | null
  status?: $Enums.TournamentStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  createdByid?: string | null
  user?: Prisma.UserProfileCreateNestedOneWithoutTournamentInput
  participants?: Prisma.TournamentParticipantCreateNestedManyWithoutTournamentInput
  rewards?: Prisma.TournamentRewardCreateNestedManyWithoutTournamentInput
}

export type TournamentUncheckedCreateWithoutTournamentGamesInput = {
  id?: string
  name: string
  description?: string | null
  startTime: Date | string
  endTime?: Date | string | null
  targetScore?: number | null
  status?: $Enums.TournamentStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  createdByid?: string | null
  userId?: string | null
  participants?: Prisma.TournamentParticipantUncheckedCreateNestedManyWithoutTournamentInput
  rewards?: Prisma.TournamentRewardUncheckedCreateNestedManyWithoutTournamentInput
}

export type TournamentCreateOrConnectWithoutTournamentGamesInput = {
  where: Prisma.TournamentWhereUniqueInput
  create: Prisma.XOR<Prisma.TournamentCreateWithoutTournamentGamesInput, Prisma.TournamentUncheckedCreateWithoutTournamentGamesInput>
}

export type TournamentUpsertWithoutTournamentGamesInput = {
  update: Prisma.XOR<Prisma.TournamentUpdateWithoutTournamentGamesInput, Prisma.TournamentUncheckedUpdateWithoutTournamentGamesInput>
  create: Prisma.XOR<Prisma.TournamentCreateWithoutTournamentGamesInput, Prisma.TournamentUncheckedCreateWithoutTournamentGamesInput>
  where?: Prisma.TournamentWhereInput
}

export type TournamentUpdateToOneWithWhereWithoutTournamentGamesInput = {
  where?: Prisma.TournamentWhereInput
  data: Prisma.XOR<Prisma.TournamentUpdateWithoutTournamentGamesInput, Prisma.TournamentUncheckedUpdateWithoutTournamentGamesInput>
}

export type TournamentUpdateWithoutTournamentGamesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  targetScore?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  status?: Prisma.EnumTournamentStatusFieldUpdateOperationsInput | $Enums.TournamentStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdByid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  user?: Prisma.UserProfileUpdateOneWithoutTournamentNestedInput
  participants?: Prisma.TournamentParticipantUpdateManyWithoutTournamentNestedInput
  rewards?: Prisma.TournamentRewardUpdateManyWithoutTournamentNestedInput
}

export type TournamentUncheckedUpdateWithoutTournamentGamesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  targetScore?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  status?: Prisma.EnumTournamentStatusFieldUpdateOperationsInput | $Enums.TournamentStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdByid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  participants?: Prisma.TournamentParticipantUncheckedUpdateManyWithoutTournamentNestedInput
  rewards?: Prisma.TournamentRewardUncheckedUpdateManyWithoutTournamentNestedInput
}

export type TournamentCreateWithoutUserInput = {
  id?: string
  name: string
  description?: string | null
  startTime: Date | string
  endTime?: Date | string | null
  targetScore?: number | null
  status?: $Enums.TournamentStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  createdByid?: string | null
  participants?: Prisma.TournamentParticipantCreateNestedManyWithoutTournamentInput
  rewards?: Prisma.TournamentRewardCreateNestedManyWithoutTournamentInput
  tournamentGames?: Prisma.TournamentGamesCreateNestedManyWithoutTournamentInput
}

export type TournamentUncheckedCreateWithoutUserInput = {
  id?: string
  name: string
  description?: string | null
  startTime: Date | string
  endTime?: Date | string | null
  targetScore?: number | null
  status?: $Enums.TournamentStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  createdByid?: string | null
  participants?: Prisma.TournamentParticipantUncheckedCreateNestedManyWithoutTournamentInput
  rewards?: Prisma.TournamentRewardUncheckedCreateNestedManyWithoutTournamentInput
  tournamentGames?: Prisma.TournamentGamesUncheckedCreateNestedManyWithoutTournamentInput
}

export type TournamentCreateOrConnectWithoutUserInput = {
  where: Prisma.TournamentWhereUniqueInput
  create: Prisma.XOR<Prisma.TournamentCreateWithoutUserInput, Prisma.TournamentUncheckedCreateWithoutUserInput>
}

export type TournamentCreateManyUserInputEnvelope = {
  data: Prisma.TournamentCreateManyUserInput | Prisma.TournamentCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type TournamentUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.TournamentWhereUniqueInput
  update: Prisma.XOR<Prisma.TournamentUpdateWithoutUserInput, Prisma.TournamentUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.TournamentCreateWithoutUserInput, Prisma.TournamentUncheckedCreateWithoutUserInput>
}

export type TournamentUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.TournamentWhereUniqueInput
  data: Prisma.XOR<Prisma.TournamentUpdateWithoutUserInput, Prisma.TournamentUncheckedUpdateWithoutUserInput>
}

export type TournamentUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.TournamentScalarWhereInput
  data: Prisma.XOR<Prisma.TournamentUpdateManyMutationInput, Prisma.TournamentUncheckedUpdateManyWithoutUserInput>
}

export type TournamentScalarWhereInput = {
  AND?: Prisma.TournamentScalarWhereInput | Prisma.TournamentScalarWhereInput[]
  OR?: Prisma.TournamentScalarWhereInput[]
  NOT?: Prisma.TournamentScalarWhereInput | Prisma.TournamentScalarWhereInput[]
  id?: Prisma.StringFilter<"Tournament"> | string
  name?: Prisma.StringFilter<"Tournament"> | string
  description?: Prisma.StringNullableFilter<"Tournament"> | string | null
  startTime?: Prisma.DateTimeFilter<"Tournament"> | Date | string
  endTime?: Prisma.DateTimeNullableFilter<"Tournament"> | Date | string | null
  targetScore?: Prisma.IntNullableFilter<"Tournament"> | number | null
  status?: Prisma.EnumTournamentStatusFilter<"Tournament"> | $Enums.TournamentStatus
  createdAt?: Prisma.DateTimeFilter<"Tournament"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Tournament"> | Date | string
  createdByid?: Prisma.StringNullableFilter<"Tournament"> | string | null
  userId?: Prisma.StringNullableFilter<"Tournament"> | string | null
}

export type TournamentCreateManyUserInput = {
  id?: string
  name: string
  description?: string | null
  startTime: Date | string
  endTime?: Date | string | null
  targetScore?: number | null
  status?: $Enums.TournamentStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  createdByid?: string | null
}

export type TournamentUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  targetScore?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  status?: Prisma.EnumTournamentStatusFieldUpdateOperationsInput | $Enums.TournamentStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdByid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  participants?: Prisma.TournamentParticipantUpdateManyWithoutTournamentNestedInput
  rewards?: Prisma.TournamentRewardUpdateManyWithoutTournamentNestedInput
  tournamentGames?: Prisma.TournamentGamesUpdateManyWithoutTournamentNestedInput
}

export type TournamentUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  targetScore?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  status?: Prisma.EnumTournamentStatusFieldUpdateOperationsInput | $Enums.TournamentStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdByid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  participants?: Prisma.TournamentParticipantUncheckedUpdateManyWithoutTournamentNestedInput
  rewards?: Prisma.TournamentRewardUncheckedUpdateManyWithoutTournamentNestedInput
  tournamentGames?: Prisma.TournamentGamesUncheckedUpdateManyWithoutTournamentNestedInput
}

export type TournamentUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  targetScore?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  status?: Prisma.EnumTournamentStatusFieldUpdateOperationsInput | $Enums.TournamentStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdByid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}


/**
 * Count Type TournamentCountOutputType
 */

export type TournamentCountOutputType = {
  participants: number
  rewards: number
  tournamentGames: number
}

export type TournamentCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  participants?: boolean | TournamentCountOutputTypeCountParticipantsArgs
  rewards?: boolean | TournamentCountOutputTypeCountRewardsArgs
  tournamentGames?: boolean | TournamentCountOutputTypeCountTournamentGamesArgs
}

/**
 * TournamentCountOutputType without action
 */
export type TournamentCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentCountOutputType
   */
  select?: Prisma.TournamentCountOutputTypeSelect<ExtArgs> | null
}

/**
 * TournamentCountOutputType without action
 */
export type TournamentCountOutputTypeCountParticipantsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TournamentParticipantWhereInput
}

/**
 * TournamentCountOutputType without action
 */
export type TournamentCountOutputTypeCountRewardsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TournamentRewardWhereInput
}

/**
 * TournamentCountOutputType without action
 */
export type TournamentCountOutputTypeCountTournamentGamesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TournamentGamesWhereInput
}


export type TournamentSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  startTime?: boolean
  endTime?: boolean
  targetScore?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  createdByid?: boolean
  userId?: boolean
  user?: boolean | Prisma.Tournament$userArgs<ExtArgs>
  participants?: boolean | Prisma.Tournament$participantsArgs<ExtArgs>
  rewards?: boolean | Prisma.Tournament$rewardsArgs<ExtArgs>
  tournamentGames?: boolean | Prisma.Tournament$tournamentGamesArgs<ExtArgs>
  _count?: boolean | Prisma.TournamentCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["tournament"]>

export type TournamentSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  startTime?: boolean
  endTime?: boolean
  targetScore?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  createdByid?: boolean
  userId?: boolean
  user?: boolean | Prisma.Tournament$userArgs<ExtArgs>
}, ExtArgs["result"]["tournament"]>

export type TournamentSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  startTime?: boolean
  endTime?: boolean
  targetScore?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  createdByid?: boolean
  userId?: boolean
  user?: boolean | Prisma.Tournament$userArgs<ExtArgs>
}, ExtArgs["result"]["tournament"]>

export type TournamentSelectScalar = {
  id?: boolean
  name?: boolean
  description?: boolean
  startTime?: boolean
  endTime?: boolean
  targetScore?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  createdByid?: boolean
  userId?: boolean
}

export type TournamentOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "description" | "startTime" | "endTime" | "targetScore" | "status" | "createdAt" | "updatedAt" | "createdByid" | "userId", ExtArgs["result"]["tournament"]>
export type TournamentInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.Tournament$userArgs<ExtArgs>
  participants?: boolean | Prisma.Tournament$participantsArgs<ExtArgs>
  rewards?: boolean | Prisma.Tournament$rewardsArgs<ExtArgs>
  tournamentGames?: boolean | Prisma.Tournament$tournamentGamesArgs<ExtArgs>
  _count?: boolean | Prisma.TournamentCountOutputTypeDefaultArgs<ExtArgs>
}
export type TournamentIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.Tournament$userArgs<ExtArgs>
}
export type TournamentIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.Tournament$userArgs<ExtArgs>
}

export type $TournamentPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Tournament"
  objects: {
    user: Prisma.$UserProfilePayload<ExtArgs> | null
    participants: Prisma.$TournamentParticipantPayload<ExtArgs>[]
    rewards: Prisma.$TournamentRewardPayload<ExtArgs>[]
    tournamentGames: Prisma.$TournamentGamesPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    description: string | null
    startTime: Date
    endTime: Date | null
    targetScore: number | null
    status: $Enums.TournamentStatus
    createdAt: Date
    updatedAt: Date
    createdByid: string | null
    userId: string | null
  }, ExtArgs["result"]["tournament"]>
  composites: {}
}

export type TournamentGetPayload<S extends boolean | null | undefined | TournamentDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TournamentPayload, S>

export type TournamentCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TournamentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TournamentCountAggregateInputType | true
  }

export interface TournamentDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tournament'], meta: { name: 'Tournament' } }
  /**
   * Find zero or one Tournament that matches the filter.
   * @param {TournamentFindUniqueArgs} args - Arguments to find a Tournament
   * @example
   * // Get one Tournament
   * const tournament = await prisma.tournament.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TournamentFindUniqueArgs>(args: Prisma.SelectSubset<T, TournamentFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TournamentClient<runtime.Types.Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Tournament that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TournamentFindUniqueOrThrowArgs} args - Arguments to find a Tournament
   * @example
   * // Get one Tournament
   * const tournament = await prisma.tournament.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TournamentFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TournamentFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TournamentClient<runtime.Types.Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Tournament that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TournamentFindFirstArgs} args - Arguments to find a Tournament
   * @example
   * // Get one Tournament
   * const tournament = await prisma.tournament.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TournamentFindFirstArgs>(args?: Prisma.SelectSubset<T, TournamentFindFirstArgs<ExtArgs>>): Prisma.Prisma__TournamentClient<runtime.Types.Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Tournament that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TournamentFindFirstOrThrowArgs} args - Arguments to find a Tournament
   * @example
   * // Get one Tournament
   * const tournament = await prisma.tournament.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TournamentFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TournamentFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TournamentClient<runtime.Types.Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Tournaments that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TournamentFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Tournaments
   * const tournaments = await prisma.tournament.findMany()
   * 
   * // Get first 10 Tournaments
   * const tournaments = await prisma.tournament.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const tournamentWithIdOnly = await prisma.tournament.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TournamentFindManyArgs>(args?: Prisma.SelectSubset<T, TournamentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Tournament.
   * @param {TournamentCreateArgs} args - Arguments to create a Tournament.
   * @example
   * // Create one Tournament
   * const Tournament = await prisma.tournament.create({
   *   data: {
   *     // ... data to create a Tournament
   *   }
   * })
   * 
   */
  create<T extends TournamentCreateArgs>(args: Prisma.SelectSubset<T, TournamentCreateArgs<ExtArgs>>): Prisma.Prisma__TournamentClient<runtime.Types.Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Tournaments.
   * @param {TournamentCreateManyArgs} args - Arguments to create many Tournaments.
   * @example
   * // Create many Tournaments
   * const tournament = await prisma.tournament.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TournamentCreateManyArgs>(args?: Prisma.SelectSubset<T, TournamentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Tournaments and returns the data saved in the database.
   * @param {TournamentCreateManyAndReturnArgs} args - Arguments to create many Tournaments.
   * @example
   * // Create many Tournaments
   * const tournament = await prisma.tournament.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Tournaments and only return the `id`
   * const tournamentWithIdOnly = await prisma.tournament.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TournamentCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TournamentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Tournament.
   * @param {TournamentDeleteArgs} args - Arguments to delete one Tournament.
   * @example
   * // Delete one Tournament
   * const Tournament = await prisma.tournament.delete({
   *   where: {
   *     // ... filter to delete one Tournament
   *   }
   * })
   * 
   */
  delete<T extends TournamentDeleteArgs>(args: Prisma.SelectSubset<T, TournamentDeleteArgs<ExtArgs>>): Prisma.Prisma__TournamentClient<runtime.Types.Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Tournament.
   * @param {TournamentUpdateArgs} args - Arguments to update one Tournament.
   * @example
   * // Update one Tournament
   * const tournament = await prisma.tournament.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TournamentUpdateArgs>(args: Prisma.SelectSubset<T, TournamentUpdateArgs<ExtArgs>>): Prisma.Prisma__TournamentClient<runtime.Types.Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Tournaments.
   * @param {TournamentDeleteManyArgs} args - Arguments to filter Tournaments to delete.
   * @example
   * // Delete a few Tournaments
   * const { count } = await prisma.tournament.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TournamentDeleteManyArgs>(args?: Prisma.SelectSubset<T, TournamentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Tournaments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TournamentUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Tournaments
   * const tournament = await prisma.tournament.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TournamentUpdateManyArgs>(args: Prisma.SelectSubset<T, TournamentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Tournaments and returns the data updated in the database.
   * @param {TournamentUpdateManyAndReturnArgs} args - Arguments to update many Tournaments.
   * @example
   * // Update many Tournaments
   * const tournament = await prisma.tournament.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Tournaments and only return the `id`
   * const tournamentWithIdOnly = await prisma.tournament.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TournamentUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TournamentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Tournament.
   * @param {TournamentUpsertArgs} args - Arguments to update or create a Tournament.
   * @example
   * // Update or create a Tournament
   * const tournament = await prisma.tournament.upsert({
   *   create: {
   *     // ... data to create a Tournament
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Tournament we want to update
   *   }
   * })
   */
  upsert<T extends TournamentUpsertArgs>(args: Prisma.SelectSubset<T, TournamentUpsertArgs<ExtArgs>>): Prisma.Prisma__TournamentClient<runtime.Types.Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Tournaments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TournamentCountArgs} args - Arguments to filter Tournaments to count.
   * @example
   * // Count the number of Tournaments
   * const count = await prisma.tournament.count({
   *   where: {
   *     // ... the filter for the Tournaments we want to count
   *   }
   * })
  **/
  count<T extends TournamentCountArgs>(
    args?: Prisma.Subset<T, TournamentCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TournamentCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Tournament.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TournamentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TournamentAggregateArgs>(args: Prisma.Subset<T, TournamentAggregateArgs>): Prisma.PrismaPromise<GetTournamentAggregateType<T>>

  /**
   * Group by Tournament.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TournamentGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TournamentGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TournamentGroupByArgs['orderBy'] }
      : { orderBy?: TournamentGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TournamentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTournamentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Tournament model
 */
readonly fields: TournamentFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Tournament.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TournamentClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.Tournament$userArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Tournament$userArgs<ExtArgs>>): Prisma.Prisma__UserProfileClient<runtime.Types.Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  participants<T extends Prisma.Tournament$participantsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Tournament$participantsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TournamentParticipantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  rewards<T extends Prisma.Tournament$rewardsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Tournament$rewardsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TournamentRewardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  tournamentGames<T extends Prisma.Tournament$tournamentGamesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Tournament$tournamentGamesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TournamentGamesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Tournament model
 */
export interface TournamentFieldRefs {
  readonly id: Prisma.FieldRef<"Tournament", 'String'>
  readonly name: Prisma.FieldRef<"Tournament", 'String'>
  readonly description: Prisma.FieldRef<"Tournament", 'String'>
  readonly startTime: Prisma.FieldRef<"Tournament", 'DateTime'>
  readonly endTime: Prisma.FieldRef<"Tournament", 'DateTime'>
  readonly targetScore: Prisma.FieldRef<"Tournament", 'Int'>
  readonly status: Prisma.FieldRef<"Tournament", 'TournamentStatus'>
  readonly createdAt: Prisma.FieldRef<"Tournament", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Tournament", 'DateTime'>
  readonly createdByid: Prisma.FieldRef<"Tournament", 'String'>
  readonly userId: Prisma.FieldRef<"Tournament", 'String'>
}
    

// Custom InputTypes
/**
 * Tournament findUnique
 */
export type TournamentFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tournament
   */
  select?: Prisma.TournamentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tournament
   */
  omit?: Prisma.TournamentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentInclude<ExtArgs> | null
  /**
   * Filter, which Tournament to fetch.
   */
  where: Prisma.TournamentWhereUniqueInput
}

/**
 * Tournament findUniqueOrThrow
 */
export type TournamentFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tournament
   */
  select?: Prisma.TournamentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tournament
   */
  omit?: Prisma.TournamentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentInclude<ExtArgs> | null
  /**
   * Filter, which Tournament to fetch.
   */
  where: Prisma.TournamentWhereUniqueInput
}

/**
 * Tournament findFirst
 */
export type TournamentFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tournament
   */
  select?: Prisma.TournamentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tournament
   */
  omit?: Prisma.TournamentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentInclude<ExtArgs> | null
  /**
   * Filter, which Tournament to fetch.
   */
  where?: Prisma.TournamentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Tournaments to fetch.
   */
  orderBy?: Prisma.TournamentOrderByWithRelationInput | Prisma.TournamentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Tournaments.
   */
  cursor?: Prisma.TournamentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Tournaments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Tournaments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Tournaments.
   */
  distinct?: Prisma.TournamentScalarFieldEnum | Prisma.TournamentScalarFieldEnum[]
}

/**
 * Tournament findFirstOrThrow
 */
export type TournamentFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tournament
   */
  select?: Prisma.TournamentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tournament
   */
  omit?: Prisma.TournamentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentInclude<ExtArgs> | null
  /**
   * Filter, which Tournament to fetch.
   */
  where?: Prisma.TournamentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Tournaments to fetch.
   */
  orderBy?: Prisma.TournamentOrderByWithRelationInput | Prisma.TournamentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Tournaments.
   */
  cursor?: Prisma.TournamentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Tournaments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Tournaments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Tournaments.
   */
  distinct?: Prisma.TournamentScalarFieldEnum | Prisma.TournamentScalarFieldEnum[]
}

/**
 * Tournament findMany
 */
export type TournamentFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tournament
   */
  select?: Prisma.TournamentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tournament
   */
  omit?: Prisma.TournamentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentInclude<ExtArgs> | null
  /**
   * Filter, which Tournaments to fetch.
   */
  where?: Prisma.TournamentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Tournaments to fetch.
   */
  orderBy?: Prisma.TournamentOrderByWithRelationInput | Prisma.TournamentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Tournaments.
   */
  cursor?: Prisma.TournamentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Tournaments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Tournaments.
   */
  skip?: number
  distinct?: Prisma.TournamentScalarFieldEnum | Prisma.TournamentScalarFieldEnum[]
}

/**
 * Tournament create
 */
export type TournamentCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tournament
   */
  select?: Prisma.TournamentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tournament
   */
  omit?: Prisma.TournamentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentInclude<ExtArgs> | null
  /**
   * The data needed to create a Tournament.
   */
  data: Prisma.XOR<Prisma.TournamentCreateInput, Prisma.TournamentUncheckedCreateInput>
}

/**
 * Tournament createMany
 */
export type TournamentCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Tournaments.
   */
  data: Prisma.TournamentCreateManyInput | Prisma.TournamentCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Tournament createManyAndReturn
 */
export type TournamentCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tournament
   */
  select?: Prisma.TournamentSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Tournament
   */
  omit?: Prisma.TournamentOmit<ExtArgs> | null
  /**
   * The data used to create many Tournaments.
   */
  data: Prisma.TournamentCreateManyInput | Prisma.TournamentCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Tournament update
 */
export type TournamentUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tournament
   */
  select?: Prisma.TournamentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tournament
   */
  omit?: Prisma.TournamentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentInclude<ExtArgs> | null
  /**
   * The data needed to update a Tournament.
   */
  data: Prisma.XOR<Prisma.TournamentUpdateInput, Prisma.TournamentUncheckedUpdateInput>
  /**
   * Choose, which Tournament to update.
   */
  where: Prisma.TournamentWhereUniqueInput
}

/**
 * Tournament updateMany
 */
export type TournamentUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Tournaments.
   */
  data: Prisma.XOR<Prisma.TournamentUpdateManyMutationInput, Prisma.TournamentUncheckedUpdateManyInput>
  /**
   * Filter which Tournaments to update
   */
  where?: Prisma.TournamentWhereInput
  /**
   * Limit how many Tournaments to update.
   */
  limit?: number
}

/**
 * Tournament updateManyAndReturn
 */
export type TournamentUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tournament
   */
  select?: Prisma.TournamentSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Tournament
   */
  omit?: Prisma.TournamentOmit<ExtArgs> | null
  /**
   * The data used to update Tournaments.
   */
  data: Prisma.XOR<Prisma.TournamentUpdateManyMutationInput, Prisma.TournamentUncheckedUpdateManyInput>
  /**
   * Filter which Tournaments to update
   */
  where?: Prisma.TournamentWhereInput
  /**
   * Limit how many Tournaments to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Tournament upsert
 */
export type TournamentUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tournament
   */
  select?: Prisma.TournamentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tournament
   */
  omit?: Prisma.TournamentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentInclude<ExtArgs> | null
  /**
   * The filter to search for the Tournament to update in case it exists.
   */
  where: Prisma.TournamentWhereUniqueInput
  /**
   * In case the Tournament found by the `where` argument doesn't exist, create a new Tournament with this data.
   */
  create: Prisma.XOR<Prisma.TournamentCreateInput, Prisma.TournamentUncheckedCreateInput>
  /**
   * In case the Tournament was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TournamentUpdateInput, Prisma.TournamentUncheckedUpdateInput>
}

/**
 * Tournament delete
 */
export type TournamentDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tournament
   */
  select?: Prisma.TournamentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tournament
   */
  omit?: Prisma.TournamentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentInclude<ExtArgs> | null
  /**
   * Filter which Tournament to delete.
   */
  where: Prisma.TournamentWhereUniqueInput
}

/**
 * Tournament deleteMany
 */
export type TournamentDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Tournaments to delete
   */
  where?: Prisma.TournamentWhereInput
  /**
   * Limit how many Tournaments to delete.
   */
  limit?: number
}

/**
 * Tournament.user
 */
export type Tournament$userArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserProfile
   */
  select?: Prisma.UserProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserProfile
   */
  omit?: Prisma.UserProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserProfileInclude<ExtArgs> | null
  where?: Prisma.UserProfileWhereInput
}

/**
 * Tournament.participants
 */
export type Tournament$participantsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentParticipant
   */
  select?: Prisma.TournamentParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TournamentParticipant
   */
  omit?: Prisma.TournamentParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentParticipantInclude<ExtArgs> | null
  where?: Prisma.TournamentParticipantWhereInput
  orderBy?: Prisma.TournamentParticipantOrderByWithRelationInput | Prisma.TournamentParticipantOrderByWithRelationInput[]
  cursor?: Prisma.TournamentParticipantWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TournamentParticipantScalarFieldEnum | Prisma.TournamentParticipantScalarFieldEnum[]
}

/**
 * Tournament.rewards
 */
export type Tournament$rewardsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentReward
   */
  select?: Prisma.TournamentRewardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TournamentReward
   */
  omit?: Prisma.TournamentRewardOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentRewardInclude<ExtArgs> | null
  where?: Prisma.TournamentRewardWhereInput
  orderBy?: Prisma.TournamentRewardOrderByWithRelationInput | Prisma.TournamentRewardOrderByWithRelationInput[]
  cursor?: Prisma.TournamentRewardWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TournamentRewardScalarFieldEnum | Prisma.TournamentRewardScalarFieldEnum[]
}

/**
 * Tournament.tournamentGames
 */
export type Tournament$tournamentGamesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentGames
   */
  select?: Prisma.TournamentGamesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TournamentGames
   */
  omit?: Prisma.TournamentGamesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentGamesInclude<ExtArgs> | null
  where?: Prisma.TournamentGamesWhereInput
  orderBy?: Prisma.TournamentGamesOrderByWithRelationInput | Prisma.TournamentGamesOrderByWithRelationInput[]
  cursor?: Prisma.TournamentGamesWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TournamentGamesScalarFieldEnum | Prisma.TournamentGamesScalarFieldEnum[]
}

/**
 * Tournament without action
 */
export type TournamentDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tournament
   */
  select?: Prisma.TournamentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tournament
   */
  omit?: Prisma.TournamentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentInclude<ExtArgs> | null
}
