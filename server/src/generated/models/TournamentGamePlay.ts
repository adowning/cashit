
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `TournamentGamePlay` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model TournamentGamePlay
 * 
 */
export type TournamentGamePlayModel = runtime.Types.Result.DefaultSelection<Prisma.$TournamentGamePlayPayload>

export type AggregateTournamentGamePlay = {
  _count: TournamentGamePlayCountAggregateOutputType | null
  _avg: TournamentGamePlayAvgAggregateOutputType | null
  _sum: TournamentGamePlaySumAggregateOutputType | null
  _min: TournamentGamePlayMinAggregateOutputType | null
  _max: TournamentGamePlayMaxAggregateOutputType | null
}

export type TournamentGamePlayAvgAggregateOutputType = {
  pointsEarned: number | null
}

export type TournamentGamePlaySumAggregateOutputType = {
  pointsEarned: number | null
}

export type TournamentGamePlayMinAggregateOutputType = {
  id: string | null
  tournamentParticipantId: string | null
  gameId: string | null
  pointsEarned: number | null
  playedAt: Date | null
  gameSessionId: string | null
}

export type TournamentGamePlayMaxAggregateOutputType = {
  id: string | null
  tournamentParticipantId: string | null
  gameId: string | null
  pointsEarned: number | null
  playedAt: Date | null
  gameSessionId: string | null
}

export type TournamentGamePlayCountAggregateOutputType = {
  id: number
  tournamentParticipantId: number
  gameId: number
  pointsEarned: number
  playedAt: number
  gameSessionId: number
  _all: number
}


export type TournamentGamePlayAvgAggregateInputType = {
  pointsEarned?: true
}

export type TournamentGamePlaySumAggregateInputType = {
  pointsEarned?: true
}

export type TournamentGamePlayMinAggregateInputType = {
  id?: true
  tournamentParticipantId?: true
  gameId?: true
  pointsEarned?: true
  playedAt?: true
  gameSessionId?: true
}

export type TournamentGamePlayMaxAggregateInputType = {
  id?: true
  tournamentParticipantId?: true
  gameId?: true
  pointsEarned?: true
  playedAt?: true
  gameSessionId?: true
}

export type TournamentGamePlayCountAggregateInputType = {
  id?: true
  tournamentParticipantId?: true
  gameId?: true
  pointsEarned?: true
  playedAt?: true
  gameSessionId?: true
  _all?: true
}

export type TournamentGamePlayAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TournamentGamePlay to aggregate.
   */
  where?: Prisma.TournamentGamePlayWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TournamentGamePlays to fetch.
   */
  orderBy?: Prisma.TournamentGamePlayOrderByWithRelationInput | Prisma.TournamentGamePlayOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TournamentGamePlayWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TournamentGamePlays from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TournamentGamePlays.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned TournamentGamePlays
  **/
  _count?: true | TournamentGamePlayCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: TournamentGamePlayAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: TournamentGamePlaySumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TournamentGamePlayMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TournamentGamePlayMaxAggregateInputType
}

export type GetTournamentGamePlayAggregateType<T extends TournamentGamePlayAggregateArgs> = {
      [P in keyof T & keyof AggregateTournamentGamePlay]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTournamentGamePlay[P]>
    : Prisma.GetScalarType<T[P], AggregateTournamentGamePlay[P]>
}




export type TournamentGamePlayGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TournamentGamePlayWhereInput
  orderBy?: Prisma.TournamentGamePlayOrderByWithAggregationInput | Prisma.TournamentGamePlayOrderByWithAggregationInput[]
  by: Prisma.TournamentGamePlayScalarFieldEnum[] | Prisma.TournamentGamePlayScalarFieldEnum
  having?: Prisma.TournamentGamePlayScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TournamentGamePlayCountAggregateInputType | true
  _avg?: TournamentGamePlayAvgAggregateInputType
  _sum?: TournamentGamePlaySumAggregateInputType
  _min?: TournamentGamePlayMinAggregateInputType
  _max?: TournamentGamePlayMaxAggregateInputType
}

export type TournamentGamePlayGroupByOutputType = {
  id: string
  tournamentParticipantId: string
  gameId: string
  pointsEarned: number
  playedAt: Date
  gameSessionId: string | null
  _count: TournamentGamePlayCountAggregateOutputType | null
  _avg: TournamentGamePlayAvgAggregateOutputType | null
  _sum: TournamentGamePlaySumAggregateOutputType | null
  _min: TournamentGamePlayMinAggregateOutputType | null
  _max: TournamentGamePlayMaxAggregateOutputType | null
}

type GetTournamentGamePlayGroupByPayload<T extends TournamentGamePlayGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TournamentGamePlayGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TournamentGamePlayGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TournamentGamePlayGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TournamentGamePlayGroupByOutputType[P]>
      }
    >
  > 



export type TournamentGamePlayWhereInput = {
  AND?: Prisma.TournamentGamePlayWhereInput | Prisma.TournamentGamePlayWhereInput[]
  OR?: Prisma.TournamentGamePlayWhereInput[]
  NOT?: Prisma.TournamentGamePlayWhereInput | Prisma.TournamentGamePlayWhereInput[]
  id?: Prisma.StringFilter<"TournamentGamePlay"> | string
  tournamentParticipantId?: Prisma.StringFilter<"TournamentGamePlay"> | string
  gameId?: Prisma.StringFilter<"TournamentGamePlay"> | string
  pointsEarned?: Prisma.IntFilter<"TournamentGamePlay"> | number
  playedAt?: Prisma.DateTimeFilter<"TournamentGamePlay"> | Date | string
  gameSessionId?: Prisma.StringNullableFilter<"TournamentGamePlay"> | string | null
  tournamentParticipant?: Prisma.XOR<Prisma.TournamentParticipantScalarRelationFilter, Prisma.TournamentParticipantWhereInput>
}

export type TournamentGamePlayOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  tournamentParticipantId?: Prisma.SortOrder
  gameId?: Prisma.SortOrder
  pointsEarned?: Prisma.SortOrder
  playedAt?: Prisma.SortOrder
  gameSessionId?: Prisma.SortOrderInput | Prisma.SortOrder
  tournamentParticipant?: Prisma.TournamentParticipantOrderByWithRelationInput
}

export type TournamentGamePlayWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.TournamentGamePlayWhereInput | Prisma.TournamentGamePlayWhereInput[]
  OR?: Prisma.TournamentGamePlayWhereInput[]
  NOT?: Prisma.TournamentGamePlayWhereInput | Prisma.TournamentGamePlayWhereInput[]
  tournamentParticipantId?: Prisma.StringFilter<"TournamentGamePlay"> | string
  gameId?: Prisma.StringFilter<"TournamentGamePlay"> | string
  pointsEarned?: Prisma.IntFilter<"TournamentGamePlay"> | number
  playedAt?: Prisma.DateTimeFilter<"TournamentGamePlay"> | Date | string
  gameSessionId?: Prisma.StringNullableFilter<"TournamentGamePlay"> | string | null
  tournamentParticipant?: Prisma.XOR<Prisma.TournamentParticipantScalarRelationFilter, Prisma.TournamentParticipantWhereInput>
}, "id">

export type TournamentGamePlayOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  tournamentParticipantId?: Prisma.SortOrder
  gameId?: Prisma.SortOrder
  pointsEarned?: Prisma.SortOrder
  playedAt?: Prisma.SortOrder
  gameSessionId?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.TournamentGamePlayCountOrderByAggregateInput
  _avg?: Prisma.TournamentGamePlayAvgOrderByAggregateInput
  _max?: Prisma.TournamentGamePlayMaxOrderByAggregateInput
  _min?: Prisma.TournamentGamePlayMinOrderByAggregateInput
  _sum?: Prisma.TournamentGamePlaySumOrderByAggregateInput
}

export type TournamentGamePlayScalarWhereWithAggregatesInput = {
  AND?: Prisma.TournamentGamePlayScalarWhereWithAggregatesInput | Prisma.TournamentGamePlayScalarWhereWithAggregatesInput[]
  OR?: Prisma.TournamentGamePlayScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TournamentGamePlayScalarWhereWithAggregatesInput | Prisma.TournamentGamePlayScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"TournamentGamePlay"> | string
  tournamentParticipantId?: Prisma.StringWithAggregatesFilter<"TournamentGamePlay"> | string
  gameId?: Prisma.StringWithAggregatesFilter<"TournamentGamePlay"> | string
  pointsEarned?: Prisma.IntWithAggregatesFilter<"TournamentGamePlay"> | number
  playedAt?: Prisma.DateTimeWithAggregatesFilter<"TournamentGamePlay"> | Date | string
  gameSessionId?: Prisma.StringNullableWithAggregatesFilter<"TournamentGamePlay"> | string | null
}

export type TournamentGamePlayCreateInput = {
  id?: string
  gameId: string
  pointsEarned: number
  playedAt?: Date | string
  gameSessionId?: string | null
  tournamentParticipant: Prisma.TournamentParticipantCreateNestedOneWithoutGamePlaysInput
}

export type TournamentGamePlayUncheckedCreateInput = {
  id?: string
  tournamentParticipantId: string
  gameId: string
  pointsEarned: number
  playedAt?: Date | string
  gameSessionId?: string | null
}

export type TournamentGamePlayUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  gameId?: Prisma.StringFieldUpdateOperationsInput | string
  pointsEarned?: Prisma.IntFieldUpdateOperationsInput | number
  playedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  gameSessionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tournamentParticipant?: Prisma.TournamentParticipantUpdateOneRequiredWithoutGamePlaysNestedInput
}

export type TournamentGamePlayUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  tournamentParticipantId?: Prisma.StringFieldUpdateOperationsInput | string
  gameId?: Prisma.StringFieldUpdateOperationsInput | string
  pointsEarned?: Prisma.IntFieldUpdateOperationsInput | number
  playedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  gameSessionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type TournamentGamePlayCreateManyInput = {
  id?: string
  tournamentParticipantId: string
  gameId: string
  pointsEarned: number
  playedAt?: Date | string
  gameSessionId?: string | null
}

export type TournamentGamePlayUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  gameId?: Prisma.StringFieldUpdateOperationsInput | string
  pointsEarned?: Prisma.IntFieldUpdateOperationsInput | number
  playedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  gameSessionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type TournamentGamePlayUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  tournamentParticipantId?: Prisma.StringFieldUpdateOperationsInput | string
  gameId?: Prisma.StringFieldUpdateOperationsInput | string
  pointsEarned?: Prisma.IntFieldUpdateOperationsInput | number
  playedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  gameSessionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type TournamentGamePlayListRelationFilter = {
  every?: Prisma.TournamentGamePlayWhereInput
  some?: Prisma.TournamentGamePlayWhereInput
  none?: Prisma.TournamentGamePlayWhereInput
}

export type TournamentGamePlayOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type TournamentGamePlayCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  tournamentParticipantId?: Prisma.SortOrder
  gameId?: Prisma.SortOrder
  pointsEarned?: Prisma.SortOrder
  playedAt?: Prisma.SortOrder
  gameSessionId?: Prisma.SortOrder
}

export type TournamentGamePlayAvgOrderByAggregateInput = {
  pointsEarned?: Prisma.SortOrder
}

export type TournamentGamePlayMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  tournamentParticipantId?: Prisma.SortOrder
  gameId?: Prisma.SortOrder
  pointsEarned?: Prisma.SortOrder
  playedAt?: Prisma.SortOrder
  gameSessionId?: Prisma.SortOrder
}

export type TournamentGamePlayMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  tournamentParticipantId?: Prisma.SortOrder
  gameId?: Prisma.SortOrder
  pointsEarned?: Prisma.SortOrder
  playedAt?: Prisma.SortOrder
  gameSessionId?: Prisma.SortOrder
}

export type TournamentGamePlaySumOrderByAggregateInput = {
  pointsEarned?: Prisma.SortOrder
}

export type TournamentGamePlayCreateNestedManyWithoutTournamentParticipantInput = {
  create?: Prisma.XOR<Prisma.TournamentGamePlayCreateWithoutTournamentParticipantInput, Prisma.TournamentGamePlayUncheckedCreateWithoutTournamentParticipantInput> | Prisma.TournamentGamePlayCreateWithoutTournamentParticipantInput[] | Prisma.TournamentGamePlayUncheckedCreateWithoutTournamentParticipantInput[]
  connectOrCreate?: Prisma.TournamentGamePlayCreateOrConnectWithoutTournamentParticipantInput | Prisma.TournamentGamePlayCreateOrConnectWithoutTournamentParticipantInput[]
  createMany?: Prisma.TournamentGamePlayCreateManyTournamentParticipantInputEnvelope
  connect?: Prisma.TournamentGamePlayWhereUniqueInput | Prisma.TournamentGamePlayWhereUniqueInput[]
}

export type TournamentGamePlayUncheckedCreateNestedManyWithoutTournamentParticipantInput = {
  create?: Prisma.XOR<Prisma.TournamentGamePlayCreateWithoutTournamentParticipantInput, Prisma.TournamentGamePlayUncheckedCreateWithoutTournamentParticipantInput> | Prisma.TournamentGamePlayCreateWithoutTournamentParticipantInput[] | Prisma.TournamentGamePlayUncheckedCreateWithoutTournamentParticipantInput[]
  connectOrCreate?: Prisma.TournamentGamePlayCreateOrConnectWithoutTournamentParticipantInput | Prisma.TournamentGamePlayCreateOrConnectWithoutTournamentParticipantInput[]
  createMany?: Prisma.TournamentGamePlayCreateManyTournamentParticipantInputEnvelope
  connect?: Prisma.TournamentGamePlayWhereUniqueInput | Prisma.TournamentGamePlayWhereUniqueInput[]
}

export type TournamentGamePlayUpdateManyWithoutTournamentParticipantNestedInput = {
  create?: Prisma.XOR<Prisma.TournamentGamePlayCreateWithoutTournamentParticipantInput, Prisma.TournamentGamePlayUncheckedCreateWithoutTournamentParticipantInput> | Prisma.TournamentGamePlayCreateWithoutTournamentParticipantInput[] | Prisma.TournamentGamePlayUncheckedCreateWithoutTournamentParticipantInput[]
  connectOrCreate?: Prisma.TournamentGamePlayCreateOrConnectWithoutTournamentParticipantInput | Prisma.TournamentGamePlayCreateOrConnectWithoutTournamentParticipantInput[]
  upsert?: Prisma.TournamentGamePlayUpsertWithWhereUniqueWithoutTournamentParticipantInput | Prisma.TournamentGamePlayUpsertWithWhereUniqueWithoutTournamentParticipantInput[]
  createMany?: Prisma.TournamentGamePlayCreateManyTournamentParticipantInputEnvelope
  set?: Prisma.TournamentGamePlayWhereUniqueInput | Prisma.TournamentGamePlayWhereUniqueInput[]
  disconnect?: Prisma.TournamentGamePlayWhereUniqueInput | Prisma.TournamentGamePlayWhereUniqueInput[]
  delete?: Prisma.TournamentGamePlayWhereUniqueInput | Prisma.TournamentGamePlayWhereUniqueInput[]
  connect?: Prisma.TournamentGamePlayWhereUniqueInput | Prisma.TournamentGamePlayWhereUniqueInput[]
  update?: Prisma.TournamentGamePlayUpdateWithWhereUniqueWithoutTournamentParticipantInput | Prisma.TournamentGamePlayUpdateWithWhereUniqueWithoutTournamentParticipantInput[]
  updateMany?: Prisma.TournamentGamePlayUpdateManyWithWhereWithoutTournamentParticipantInput | Prisma.TournamentGamePlayUpdateManyWithWhereWithoutTournamentParticipantInput[]
  deleteMany?: Prisma.TournamentGamePlayScalarWhereInput | Prisma.TournamentGamePlayScalarWhereInput[]
}

export type TournamentGamePlayUncheckedUpdateManyWithoutTournamentParticipantNestedInput = {
  create?: Prisma.XOR<Prisma.TournamentGamePlayCreateWithoutTournamentParticipantInput, Prisma.TournamentGamePlayUncheckedCreateWithoutTournamentParticipantInput> | Prisma.TournamentGamePlayCreateWithoutTournamentParticipantInput[] | Prisma.TournamentGamePlayUncheckedCreateWithoutTournamentParticipantInput[]
  connectOrCreate?: Prisma.TournamentGamePlayCreateOrConnectWithoutTournamentParticipantInput | Prisma.TournamentGamePlayCreateOrConnectWithoutTournamentParticipantInput[]
  upsert?: Prisma.TournamentGamePlayUpsertWithWhereUniqueWithoutTournamentParticipantInput | Prisma.TournamentGamePlayUpsertWithWhereUniqueWithoutTournamentParticipantInput[]
  createMany?: Prisma.TournamentGamePlayCreateManyTournamentParticipantInputEnvelope
  set?: Prisma.TournamentGamePlayWhereUniqueInput | Prisma.TournamentGamePlayWhereUniqueInput[]
  disconnect?: Prisma.TournamentGamePlayWhereUniqueInput | Prisma.TournamentGamePlayWhereUniqueInput[]
  delete?: Prisma.TournamentGamePlayWhereUniqueInput | Prisma.TournamentGamePlayWhereUniqueInput[]
  connect?: Prisma.TournamentGamePlayWhereUniqueInput | Prisma.TournamentGamePlayWhereUniqueInput[]
  update?: Prisma.TournamentGamePlayUpdateWithWhereUniqueWithoutTournamentParticipantInput | Prisma.TournamentGamePlayUpdateWithWhereUniqueWithoutTournamentParticipantInput[]
  updateMany?: Prisma.TournamentGamePlayUpdateManyWithWhereWithoutTournamentParticipantInput | Prisma.TournamentGamePlayUpdateManyWithWhereWithoutTournamentParticipantInput[]
  deleteMany?: Prisma.TournamentGamePlayScalarWhereInput | Prisma.TournamentGamePlayScalarWhereInput[]
}

export type TournamentGamePlayCreateWithoutTournamentParticipantInput = {
  id?: string
  gameId: string
  pointsEarned: number
  playedAt?: Date | string
  gameSessionId?: string | null
}

export type TournamentGamePlayUncheckedCreateWithoutTournamentParticipantInput = {
  id?: string
  gameId: string
  pointsEarned: number
  playedAt?: Date | string
  gameSessionId?: string | null
}

export type TournamentGamePlayCreateOrConnectWithoutTournamentParticipantInput = {
  where: Prisma.TournamentGamePlayWhereUniqueInput
  create: Prisma.XOR<Prisma.TournamentGamePlayCreateWithoutTournamentParticipantInput, Prisma.TournamentGamePlayUncheckedCreateWithoutTournamentParticipantInput>
}

export type TournamentGamePlayCreateManyTournamentParticipantInputEnvelope = {
  data: Prisma.TournamentGamePlayCreateManyTournamentParticipantInput | Prisma.TournamentGamePlayCreateManyTournamentParticipantInput[]
  skipDuplicates?: boolean
}

export type TournamentGamePlayUpsertWithWhereUniqueWithoutTournamentParticipantInput = {
  where: Prisma.TournamentGamePlayWhereUniqueInput
  update: Prisma.XOR<Prisma.TournamentGamePlayUpdateWithoutTournamentParticipantInput, Prisma.TournamentGamePlayUncheckedUpdateWithoutTournamentParticipantInput>
  create: Prisma.XOR<Prisma.TournamentGamePlayCreateWithoutTournamentParticipantInput, Prisma.TournamentGamePlayUncheckedCreateWithoutTournamentParticipantInput>
}

export type TournamentGamePlayUpdateWithWhereUniqueWithoutTournamentParticipantInput = {
  where: Prisma.TournamentGamePlayWhereUniqueInput
  data: Prisma.XOR<Prisma.TournamentGamePlayUpdateWithoutTournamentParticipantInput, Prisma.TournamentGamePlayUncheckedUpdateWithoutTournamentParticipantInput>
}

export type TournamentGamePlayUpdateManyWithWhereWithoutTournamentParticipantInput = {
  where: Prisma.TournamentGamePlayScalarWhereInput
  data: Prisma.XOR<Prisma.TournamentGamePlayUpdateManyMutationInput, Prisma.TournamentGamePlayUncheckedUpdateManyWithoutTournamentParticipantInput>
}

export type TournamentGamePlayScalarWhereInput = {
  AND?: Prisma.TournamentGamePlayScalarWhereInput | Prisma.TournamentGamePlayScalarWhereInput[]
  OR?: Prisma.TournamentGamePlayScalarWhereInput[]
  NOT?: Prisma.TournamentGamePlayScalarWhereInput | Prisma.TournamentGamePlayScalarWhereInput[]
  id?: Prisma.StringFilter<"TournamentGamePlay"> | string
  tournamentParticipantId?: Prisma.StringFilter<"TournamentGamePlay"> | string
  gameId?: Prisma.StringFilter<"TournamentGamePlay"> | string
  pointsEarned?: Prisma.IntFilter<"TournamentGamePlay"> | number
  playedAt?: Prisma.DateTimeFilter<"TournamentGamePlay"> | Date | string
  gameSessionId?: Prisma.StringNullableFilter<"TournamentGamePlay"> | string | null
}

export type TournamentGamePlayCreateManyTournamentParticipantInput = {
  id?: string
  gameId: string
  pointsEarned: number
  playedAt?: Date | string
  gameSessionId?: string | null
}

export type TournamentGamePlayUpdateWithoutTournamentParticipantInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  gameId?: Prisma.StringFieldUpdateOperationsInput | string
  pointsEarned?: Prisma.IntFieldUpdateOperationsInput | number
  playedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  gameSessionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type TournamentGamePlayUncheckedUpdateWithoutTournamentParticipantInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  gameId?: Prisma.StringFieldUpdateOperationsInput | string
  pointsEarned?: Prisma.IntFieldUpdateOperationsInput | number
  playedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  gameSessionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type TournamentGamePlayUncheckedUpdateManyWithoutTournamentParticipantInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  gameId?: Prisma.StringFieldUpdateOperationsInput | string
  pointsEarned?: Prisma.IntFieldUpdateOperationsInput | number
  playedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  gameSessionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}



export type TournamentGamePlaySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  tournamentParticipantId?: boolean
  gameId?: boolean
  pointsEarned?: boolean
  playedAt?: boolean
  gameSessionId?: boolean
  tournamentParticipant?: boolean | Prisma.TournamentParticipantDefaultArgs<ExtArgs>
}, ExtArgs["result"]["tournamentGamePlay"]>

export type TournamentGamePlaySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  tournamentParticipantId?: boolean
  gameId?: boolean
  pointsEarned?: boolean
  playedAt?: boolean
  gameSessionId?: boolean
  tournamentParticipant?: boolean | Prisma.TournamentParticipantDefaultArgs<ExtArgs>
}, ExtArgs["result"]["tournamentGamePlay"]>

export type TournamentGamePlaySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  tournamentParticipantId?: boolean
  gameId?: boolean
  pointsEarned?: boolean
  playedAt?: boolean
  gameSessionId?: boolean
  tournamentParticipant?: boolean | Prisma.TournamentParticipantDefaultArgs<ExtArgs>
}, ExtArgs["result"]["tournamentGamePlay"]>

export type TournamentGamePlaySelectScalar = {
  id?: boolean
  tournamentParticipantId?: boolean
  gameId?: boolean
  pointsEarned?: boolean
  playedAt?: boolean
  gameSessionId?: boolean
}

export type TournamentGamePlayOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "tournamentParticipantId" | "gameId" | "pointsEarned" | "playedAt" | "gameSessionId", ExtArgs["result"]["tournamentGamePlay"]>
export type TournamentGamePlayInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  tournamentParticipant?: boolean | Prisma.TournamentParticipantDefaultArgs<ExtArgs>
}
export type TournamentGamePlayIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  tournamentParticipant?: boolean | Prisma.TournamentParticipantDefaultArgs<ExtArgs>
}
export type TournamentGamePlayIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  tournamentParticipant?: boolean | Prisma.TournamentParticipantDefaultArgs<ExtArgs>
}

export type $TournamentGamePlayPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "TournamentGamePlay"
  objects: {
    tournamentParticipant: Prisma.$TournamentParticipantPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    tournamentParticipantId: string
    gameId: string
    pointsEarned: number
    playedAt: Date
    gameSessionId: string | null
  }, ExtArgs["result"]["tournamentGamePlay"]>
  composites: {}
}

export type TournamentGamePlayGetPayload<S extends boolean | null | undefined | TournamentGamePlayDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TournamentGamePlayPayload, S>

export type TournamentGamePlayCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TournamentGamePlayFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TournamentGamePlayCountAggregateInputType | true
  }

export interface TournamentGamePlayDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TournamentGamePlay'], meta: { name: 'TournamentGamePlay' } }
  /**
   * Find zero or one TournamentGamePlay that matches the filter.
   * @param {TournamentGamePlayFindUniqueArgs} args - Arguments to find a TournamentGamePlay
   * @example
   * // Get one TournamentGamePlay
   * const tournamentGamePlay = await prisma.tournamentGamePlay.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TournamentGamePlayFindUniqueArgs>(args: Prisma.SelectSubset<T, TournamentGamePlayFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TournamentGamePlayClient<runtime.Types.Result.GetResult<Prisma.$TournamentGamePlayPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one TournamentGamePlay that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TournamentGamePlayFindUniqueOrThrowArgs} args - Arguments to find a TournamentGamePlay
   * @example
   * // Get one TournamentGamePlay
   * const tournamentGamePlay = await prisma.tournamentGamePlay.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TournamentGamePlayFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TournamentGamePlayFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TournamentGamePlayClient<runtime.Types.Result.GetResult<Prisma.$TournamentGamePlayPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TournamentGamePlay that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TournamentGamePlayFindFirstArgs} args - Arguments to find a TournamentGamePlay
   * @example
   * // Get one TournamentGamePlay
   * const tournamentGamePlay = await prisma.tournamentGamePlay.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TournamentGamePlayFindFirstArgs>(args?: Prisma.SelectSubset<T, TournamentGamePlayFindFirstArgs<ExtArgs>>): Prisma.Prisma__TournamentGamePlayClient<runtime.Types.Result.GetResult<Prisma.$TournamentGamePlayPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TournamentGamePlay that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TournamentGamePlayFindFirstOrThrowArgs} args - Arguments to find a TournamentGamePlay
   * @example
   * // Get one TournamentGamePlay
   * const tournamentGamePlay = await prisma.tournamentGamePlay.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TournamentGamePlayFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TournamentGamePlayFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TournamentGamePlayClient<runtime.Types.Result.GetResult<Prisma.$TournamentGamePlayPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more TournamentGamePlays that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TournamentGamePlayFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TournamentGamePlays
   * const tournamentGamePlays = await prisma.tournamentGamePlay.findMany()
   * 
   * // Get first 10 TournamentGamePlays
   * const tournamentGamePlays = await prisma.tournamentGamePlay.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const tournamentGamePlayWithIdOnly = await prisma.tournamentGamePlay.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TournamentGamePlayFindManyArgs>(args?: Prisma.SelectSubset<T, TournamentGamePlayFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TournamentGamePlayPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a TournamentGamePlay.
   * @param {TournamentGamePlayCreateArgs} args - Arguments to create a TournamentGamePlay.
   * @example
   * // Create one TournamentGamePlay
   * const TournamentGamePlay = await prisma.tournamentGamePlay.create({
   *   data: {
   *     // ... data to create a TournamentGamePlay
   *   }
   * })
   * 
   */
  create<T extends TournamentGamePlayCreateArgs>(args: Prisma.SelectSubset<T, TournamentGamePlayCreateArgs<ExtArgs>>): Prisma.Prisma__TournamentGamePlayClient<runtime.Types.Result.GetResult<Prisma.$TournamentGamePlayPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many TournamentGamePlays.
   * @param {TournamentGamePlayCreateManyArgs} args - Arguments to create many TournamentGamePlays.
   * @example
   * // Create many TournamentGamePlays
   * const tournamentGamePlay = await prisma.tournamentGamePlay.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TournamentGamePlayCreateManyArgs>(args?: Prisma.SelectSubset<T, TournamentGamePlayCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many TournamentGamePlays and returns the data saved in the database.
   * @param {TournamentGamePlayCreateManyAndReturnArgs} args - Arguments to create many TournamentGamePlays.
   * @example
   * // Create many TournamentGamePlays
   * const tournamentGamePlay = await prisma.tournamentGamePlay.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many TournamentGamePlays and only return the `id`
   * const tournamentGamePlayWithIdOnly = await prisma.tournamentGamePlay.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TournamentGamePlayCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TournamentGamePlayCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TournamentGamePlayPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a TournamentGamePlay.
   * @param {TournamentGamePlayDeleteArgs} args - Arguments to delete one TournamentGamePlay.
   * @example
   * // Delete one TournamentGamePlay
   * const TournamentGamePlay = await prisma.tournamentGamePlay.delete({
   *   where: {
   *     // ... filter to delete one TournamentGamePlay
   *   }
   * })
   * 
   */
  delete<T extends TournamentGamePlayDeleteArgs>(args: Prisma.SelectSubset<T, TournamentGamePlayDeleteArgs<ExtArgs>>): Prisma.Prisma__TournamentGamePlayClient<runtime.Types.Result.GetResult<Prisma.$TournamentGamePlayPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one TournamentGamePlay.
   * @param {TournamentGamePlayUpdateArgs} args - Arguments to update one TournamentGamePlay.
   * @example
   * // Update one TournamentGamePlay
   * const tournamentGamePlay = await prisma.tournamentGamePlay.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TournamentGamePlayUpdateArgs>(args: Prisma.SelectSubset<T, TournamentGamePlayUpdateArgs<ExtArgs>>): Prisma.Prisma__TournamentGamePlayClient<runtime.Types.Result.GetResult<Prisma.$TournamentGamePlayPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more TournamentGamePlays.
   * @param {TournamentGamePlayDeleteManyArgs} args - Arguments to filter TournamentGamePlays to delete.
   * @example
   * // Delete a few TournamentGamePlays
   * const { count } = await prisma.tournamentGamePlay.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TournamentGamePlayDeleteManyArgs>(args?: Prisma.SelectSubset<T, TournamentGamePlayDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TournamentGamePlays.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TournamentGamePlayUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TournamentGamePlays
   * const tournamentGamePlay = await prisma.tournamentGamePlay.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TournamentGamePlayUpdateManyArgs>(args: Prisma.SelectSubset<T, TournamentGamePlayUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TournamentGamePlays and returns the data updated in the database.
   * @param {TournamentGamePlayUpdateManyAndReturnArgs} args - Arguments to update many TournamentGamePlays.
   * @example
   * // Update many TournamentGamePlays
   * const tournamentGamePlay = await prisma.tournamentGamePlay.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more TournamentGamePlays and only return the `id`
   * const tournamentGamePlayWithIdOnly = await prisma.tournamentGamePlay.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TournamentGamePlayUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TournamentGamePlayUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TournamentGamePlayPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one TournamentGamePlay.
   * @param {TournamentGamePlayUpsertArgs} args - Arguments to update or create a TournamentGamePlay.
   * @example
   * // Update or create a TournamentGamePlay
   * const tournamentGamePlay = await prisma.tournamentGamePlay.upsert({
   *   create: {
   *     // ... data to create a TournamentGamePlay
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TournamentGamePlay we want to update
   *   }
   * })
   */
  upsert<T extends TournamentGamePlayUpsertArgs>(args: Prisma.SelectSubset<T, TournamentGamePlayUpsertArgs<ExtArgs>>): Prisma.Prisma__TournamentGamePlayClient<runtime.Types.Result.GetResult<Prisma.$TournamentGamePlayPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of TournamentGamePlays.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TournamentGamePlayCountArgs} args - Arguments to filter TournamentGamePlays to count.
   * @example
   * // Count the number of TournamentGamePlays
   * const count = await prisma.tournamentGamePlay.count({
   *   where: {
   *     // ... the filter for the TournamentGamePlays we want to count
   *   }
   * })
  **/
  count<T extends TournamentGamePlayCountArgs>(
    args?: Prisma.Subset<T, TournamentGamePlayCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TournamentGamePlayCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a TournamentGamePlay.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TournamentGamePlayAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TournamentGamePlayAggregateArgs>(args: Prisma.Subset<T, TournamentGamePlayAggregateArgs>): Prisma.PrismaPromise<GetTournamentGamePlayAggregateType<T>>

  /**
   * Group by TournamentGamePlay.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TournamentGamePlayGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TournamentGamePlayGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TournamentGamePlayGroupByArgs['orderBy'] }
      : { orderBy?: TournamentGamePlayGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TournamentGamePlayGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTournamentGamePlayGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the TournamentGamePlay model
 */
readonly fields: TournamentGamePlayFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TournamentGamePlay.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TournamentGamePlayClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  tournamentParticipant<T extends Prisma.TournamentParticipantDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TournamentParticipantDefaultArgs<ExtArgs>>): Prisma.Prisma__TournamentParticipantClient<runtime.Types.Result.GetResult<Prisma.$TournamentParticipantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the TournamentGamePlay model
 */
export interface TournamentGamePlayFieldRefs {
  readonly id: Prisma.FieldRef<"TournamentGamePlay", 'String'>
  readonly tournamentParticipantId: Prisma.FieldRef<"TournamentGamePlay", 'String'>
  readonly gameId: Prisma.FieldRef<"TournamentGamePlay", 'String'>
  readonly pointsEarned: Prisma.FieldRef<"TournamentGamePlay", 'Int'>
  readonly playedAt: Prisma.FieldRef<"TournamentGamePlay", 'DateTime'>
  readonly gameSessionId: Prisma.FieldRef<"TournamentGamePlay", 'String'>
}
    

// Custom InputTypes
/**
 * TournamentGamePlay findUnique
 */
export type TournamentGamePlayFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentGamePlay
   */
  select?: Prisma.TournamentGamePlaySelect<ExtArgs> | null
  /**
   * Omit specific fields from the TournamentGamePlay
   */
  omit?: Prisma.TournamentGamePlayOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentGamePlayInclude<ExtArgs> | null
  /**
   * Filter, which TournamentGamePlay to fetch.
   */
  where: Prisma.TournamentGamePlayWhereUniqueInput
}

/**
 * TournamentGamePlay findUniqueOrThrow
 */
export type TournamentGamePlayFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentGamePlay
   */
  select?: Prisma.TournamentGamePlaySelect<ExtArgs> | null
  /**
   * Omit specific fields from the TournamentGamePlay
   */
  omit?: Prisma.TournamentGamePlayOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentGamePlayInclude<ExtArgs> | null
  /**
   * Filter, which TournamentGamePlay to fetch.
   */
  where: Prisma.TournamentGamePlayWhereUniqueInput
}

/**
 * TournamentGamePlay findFirst
 */
export type TournamentGamePlayFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentGamePlay
   */
  select?: Prisma.TournamentGamePlaySelect<ExtArgs> | null
  /**
   * Omit specific fields from the TournamentGamePlay
   */
  omit?: Prisma.TournamentGamePlayOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentGamePlayInclude<ExtArgs> | null
  /**
   * Filter, which TournamentGamePlay to fetch.
   */
  where?: Prisma.TournamentGamePlayWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TournamentGamePlays to fetch.
   */
  orderBy?: Prisma.TournamentGamePlayOrderByWithRelationInput | Prisma.TournamentGamePlayOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TournamentGamePlays.
   */
  cursor?: Prisma.TournamentGamePlayWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TournamentGamePlays from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TournamentGamePlays.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TournamentGamePlays.
   */
  distinct?: Prisma.TournamentGamePlayScalarFieldEnum | Prisma.TournamentGamePlayScalarFieldEnum[]
}

/**
 * TournamentGamePlay findFirstOrThrow
 */
export type TournamentGamePlayFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentGamePlay
   */
  select?: Prisma.TournamentGamePlaySelect<ExtArgs> | null
  /**
   * Omit specific fields from the TournamentGamePlay
   */
  omit?: Prisma.TournamentGamePlayOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentGamePlayInclude<ExtArgs> | null
  /**
   * Filter, which TournamentGamePlay to fetch.
   */
  where?: Prisma.TournamentGamePlayWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TournamentGamePlays to fetch.
   */
  orderBy?: Prisma.TournamentGamePlayOrderByWithRelationInput | Prisma.TournamentGamePlayOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TournamentGamePlays.
   */
  cursor?: Prisma.TournamentGamePlayWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TournamentGamePlays from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TournamentGamePlays.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TournamentGamePlays.
   */
  distinct?: Prisma.TournamentGamePlayScalarFieldEnum | Prisma.TournamentGamePlayScalarFieldEnum[]
}

/**
 * TournamentGamePlay findMany
 */
export type TournamentGamePlayFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentGamePlay
   */
  select?: Prisma.TournamentGamePlaySelect<ExtArgs> | null
  /**
   * Omit specific fields from the TournamentGamePlay
   */
  omit?: Prisma.TournamentGamePlayOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentGamePlayInclude<ExtArgs> | null
  /**
   * Filter, which TournamentGamePlays to fetch.
   */
  where?: Prisma.TournamentGamePlayWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TournamentGamePlays to fetch.
   */
  orderBy?: Prisma.TournamentGamePlayOrderByWithRelationInput | Prisma.TournamentGamePlayOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing TournamentGamePlays.
   */
  cursor?: Prisma.TournamentGamePlayWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TournamentGamePlays from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TournamentGamePlays.
   */
  skip?: number
  distinct?: Prisma.TournamentGamePlayScalarFieldEnum | Prisma.TournamentGamePlayScalarFieldEnum[]
}

/**
 * TournamentGamePlay create
 */
export type TournamentGamePlayCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentGamePlay
   */
  select?: Prisma.TournamentGamePlaySelect<ExtArgs> | null
  /**
   * Omit specific fields from the TournamentGamePlay
   */
  omit?: Prisma.TournamentGamePlayOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentGamePlayInclude<ExtArgs> | null
  /**
   * The data needed to create a TournamentGamePlay.
   */
  data: Prisma.XOR<Prisma.TournamentGamePlayCreateInput, Prisma.TournamentGamePlayUncheckedCreateInput>
}

/**
 * TournamentGamePlay createMany
 */
export type TournamentGamePlayCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many TournamentGamePlays.
   */
  data: Prisma.TournamentGamePlayCreateManyInput | Prisma.TournamentGamePlayCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * TournamentGamePlay createManyAndReturn
 */
export type TournamentGamePlayCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentGamePlay
   */
  select?: Prisma.TournamentGamePlaySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TournamentGamePlay
   */
  omit?: Prisma.TournamentGamePlayOmit<ExtArgs> | null
  /**
   * The data used to create many TournamentGamePlays.
   */
  data: Prisma.TournamentGamePlayCreateManyInput | Prisma.TournamentGamePlayCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentGamePlayIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * TournamentGamePlay update
 */
export type TournamentGamePlayUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentGamePlay
   */
  select?: Prisma.TournamentGamePlaySelect<ExtArgs> | null
  /**
   * Omit specific fields from the TournamentGamePlay
   */
  omit?: Prisma.TournamentGamePlayOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentGamePlayInclude<ExtArgs> | null
  /**
   * The data needed to update a TournamentGamePlay.
   */
  data: Prisma.XOR<Prisma.TournamentGamePlayUpdateInput, Prisma.TournamentGamePlayUncheckedUpdateInput>
  /**
   * Choose, which TournamentGamePlay to update.
   */
  where: Prisma.TournamentGamePlayWhereUniqueInput
}

/**
 * TournamentGamePlay updateMany
 */
export type TournamentGamePlayUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update TournamentGamePlays.
   */
  data: Prisma.XOR<Prisma.TournamentGamePlayUpdateManyMutationInput, Prisma.TournamentGamePlayUncheckedUpdateManyInput>
  /**
   * Filter which TournamentGamePlays to update
   */
  where?: Prisma.TournamentGamePlayWhereInput
  /**
   * Limit how many TournamentGamePlays to update.
   */
  limit?: number
}

/**
 * TournamentGamePlay updateManyAndReturn
 */
export type TournamentGamePlayUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentGamePlay
   */
  select?: Prisma.TournamentGamePlaySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TournamentGamePlay
   */
  omit?: Prisma.TournamentGamePlayOmit<ExtArgs> | null
  /**
   * The data used to update TournamentGamePlays.
   */
  data: Prisma.XOR<Prisma.TournamentGamePlayUpdateManyMutationInput, Prisma.TournamentGamePlayUncheckedUpdateManyInput>
  /**
   * Filter which TournamentGamePlays to update
   */
  where?: Prisma.TournamentGamePlayWhereInput
  /**
   * Limit how many TournamentGamePlays to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentGamePlayIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * TournamentGamePlay upsert
 */
export type TournamentGamePlayUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentGamePlay
   */
  select?: Prisma.TournamentGamePlaySelect<ExtArgs> | null
  /**
   * Omit specific fields from the TournamentGamePlay
   */
  omit?: Prisma.TournamentGamePlayOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentGamePlayInclude<ExtArgs> | null
  /**
   * The filter to search for the TournamentGamePlay to update in case it exists.
   */
  where: Prisma.TournamentGamePlayWhereUniqueInput
  /**
   * In case the TournamentGamePlay found by the `where` argument doesn't exist, create a new TournamentGamePlay with this data.
   */
  create: Prisma.XOR<Prisma.TournamentGamePlayCreateInput, Prisma.TournamentGamePlayUncheckedCreateInput>
  /**
   * In case the TournamentGamePlay was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TournamentGamePlayUpdateInput, Prisma.TournamentGamePlayUncheckedUpdateInput>
}

/**
 * TournamentGamePlay delete
 */
export type TournamentGamePlayDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentGamePlay
   */
  select?: Prisma.TournamentGamePlaySelect<ExtArgs> | null
  /**
   * Omit specific fields from the TournamentGamePlay
   */
  omit?: Prisma.TournamentGamePlayOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentGamePlayInclude<ExtArgs> | null
  /**
   * Filter which TournamentGamePlay to delete.
   */
  where: Prisma.TournamentGamePlayWhereUniqueInput
}

/**
 * TournamentGamePlay deleteMany
 */
export type TournamentGamePlayDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TournamentGamePlays to delete
   */
  where?: Prisma.TournamentGamePlayWhereInput
  /**
   * Limit how many TournamentGamePlays to delete.
   */
  limit?: number
}

/**
 * TournamentGamePlay without action
 */
export type TournamentGamePlayDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentGamePlay
   */
  select?: Prisma.TournamentGamePlaySelect<ExtArgs> | null
  /**
   * Omit specific fields from the TournamentGamePlay
   */
  omit?: Prisma.TournamentGamePlayOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentGamePlayInclude<ExtArgs> | null
}
