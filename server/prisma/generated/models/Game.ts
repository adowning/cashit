
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Game` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Game
 * 
 */
export type GameModel = runtime.Types.Result.DefaultSelection<Prisma.$GamePayload>

export type AggregateGame = {
  _count: GameCountAggregateOutputType | null
  _avg: GameAvgAggregateOutputType | null
  _sum: GameSumAggregateOutputType | null
  _min: GameMinAggregateOutputType | null
  _max: GameMaxAggregateOutputType | null
}

export type GameAvgAggregateOutputType = {
  totalWagered: number | null
}

export type GameSumAggregateOutputType = {
  totalWagered: number | null
}

export type GameMinAggregateOutputType = {
  id: string | null
  name: string | null
  title: string | null
  description: string | null
  category: $Enums.GameCategory | null
  isActive: boolean | null
  thumbnailUrl: string | null
  bannerUrl: string | null
  createdAt: Date | null
  updatedAt: Date | null
  featured: boolean | null
  providerName: string | null
  totalWagered: number | null
  gameProviderId: string | null
  operatorId: string | null
}

export type GameMaxAggregateOutputType = {
  id: string | null
  name: string | null
  title: string | null
  description: string | null
  category: $Enums.GameCategory | null
  isActive: boolean | null
  thumbnailUrl: string | null
  bannerUrl: string | null
  createdAt: Date | null
  updatedAt: Date | null
  featured: boolean | null
  providerName: string | null
  totalWagered: number | null
  gameProviderId: string | null
  operatorId: string | null
}

export type GameCountAggregateOutputType = {
  id: number
  name: number
  title: number
  goldsvetData: number
  description: number
  supportedProviders: number
  category: number
  tags: number
  isActive: number
  thumbnailUrl: number
  bannerUrl: number
  meta: number
  createdAt: number
  updatedAt: number
  featured: number
  providerName: number
  totalWagered: number
  gameProviderId: number
  operatorId: number
  _all: number
}


export type GameAvgAggregateInputType = {
  totalWagered?: true
}

export type GameSumAggregateInputType = {
  totalWagered?: true
}

export type GameMinAggregateInputType = {
  id?: true
  name?: true
  title?: true
  description?: true
  category?: true
  isActive?: true
  thumbnailUrl?: true
  bannerUrl?: true
  createdAt?: true
  updatedAt?: true
  featured?: true
  providerName?: true
  totalWagered?: true
  gameProviderId?: true
  operatorId?: true
}

export type GameMaxAggregateInputType = {
  id?: true
  name?: true
  title?: true
  description?: true
  category?: true
  isActive?: true
  thumbnailUrl?: true
  bannerUrl?: true
  createdAt?: true
  updatedAt?: true
  featured?: true
  providerName?: true
  totalWagered?: true
  gameProviderId?: true
  operatorId?: true
}

export type GameCountAggregateInputType = {
  id?: true
  name?: true
  title?: true
  goldsvetData?: true
  description?: true
  supportedProviders?: true
  category?: true
  tags?: true
  isActive?: true
  thumbnailUrl?: true
  bannerUrl?: true
  meta?: true
  createdAt?: true
  updatedAt?: true
  featured?: true
  providerName?: true
  totalWagered?: true
  gameProviderId?: true
  operatorId?: true
  _all?: true
}

export type GameAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Game to aggregate.
   */
  where?: Prisma.GameWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Games to fetch.
   */
  orderBy?: Prisma.GameOrderByWithRelationInput | Prisma.GameOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.GameWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Games from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Games.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Games
  **/
  _count?: true | GameCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: GameAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: GameSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: GameMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: GameMaxAggregateInputType
}

export type GetGameAggregateType<T extends GameAggregateArgs> = {
      [P in keyof T & keyof AggregateGame]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateGame[P]>
    : Prisma.GetScalarType<T[P], AggregateGame[P]>
}




export type GameGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.GameWhereInput
  orderBy?: Prisma.GameOrderByWithAggregationInput | Prisma.GameOrderByWithAggregationInput[]
  by: Prisma.GameScalarFieldEnum[] | Prisma.GameScalarFieldEnum
  having?: Prisma.GameScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: GameCountAggregateInputType | true
  _avg?: GameAvgAggregateInputType
  _sum?: GameSumAggregateInputType
  _min?: GameMinAggregateInputType
  _max?: GameMaxAggregateInputType
}

export type GameGroupByOutputType = {
  id: string
  name: string
  title: string
  goldsvetData: runtime.JsonValue | null
  description: string | null
  supportedProviders: $Enums.GameProviderName[]
  category: $Enums.GameCategory
  tags: string[]
  isActive: boolean
  thumbnailUrl: string | null
  bannerUrl: string | null
  meta: runtime.JsonValue | null
  createdAt: Date
  updatedAt: Date
  featured: boolean
  providerName: string | null
  totalWagered: number
  gameProviderId: string | null
  operatorId: string | null
  _count: GameCountAggregateOutputType | null
  _avg: GameAvgAggregateOutputType | null
  _sum: GameSumAggregateOutputType | null
  _min: GameMinAggregateOutputType | null
  _max: GameMaxAggregateOutputType | null
}

type GetGameGroupByPayload<T extends GameGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<GameGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof GameGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], GameGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], GameGroupByOutputType[P]>
      }
    >
  > 



export type GameWhereInput = {
  AND?: Prisma.GameWhereInput | Prisma.GameWhereInput[]
  OR?: Prisma.GameWhereInput[]
  NOT?: Prisma.GameWhereInput | Prisma.GameWhereInput[]
  id?: Prisma.StringFilter<"Game"> | string
  name?: Prisma.StringFilter<"Game"> | string
  title?: Prisma.StringFilter<"Game"> | string
  goldsvetData?: Prisma.JsonNullableFilter<"Game">
  description?: Prisma.StringNullableFilter<"Game"> | string | null
  supportedProviders?: Prisma.EnumGameProviderNameNullableListFilter<"Game">
  category?: Prisma.EnumGameCategoryFilter<"Game"> | $Enums.GameCategory
  tags?: Prisma.StringNullableListFilter<"Game">
  isActive?: Prisma.BoolFilter<"Game"> | boolean
  thumbnailUrl?: Prisma.StringNullableFilter<"Game"> | string | null
  bannerUrl?: Prisma.StringNullableFilter<"Game"> | string | null
  meta?: Prisma.JsonNullableFilter<"Game">
  createdAt?: Prisma.DateTimeFilter<"Game"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Game"> | Date | string
  featured?: Prisma.BoolFilter<"Game"> | boolean
  providerName?: Prisma.StringNullableFilter<"Game"> | string | null
  totalWagered?: Prisma.IntFilter<"Game"> | number
  gameProviderId?: Prisma.StringNullableFilter<"Game"> | string | null
  operatorId?: Prisma.StringNullableFilter<"Game"> | string | null
  gameProvider?: Prisma.XOR<Prisma.GameProviderNullableScalarRelationFilter, Prisma.GameProviderWhereInput> | null
  gameSessions?: Prisma.GameSessionListRelationFilter
  gameLaunchLinks?: Prisma.GameLaunchLinkListRelationFilter
  operator?: Prisma.XOR<Prisma.OperatorNullableScalarRelationFilter, Prisma.OperatorWhereInput> | null
  TournamentGame?: Prisma.TournamentGameListRelationFilter
}

export type GameOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  title?: Prisma.SortOrder
  goldsvetData?: Prisma.SortOrderInput | Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  supportedProviders?: Prisma.SortOrder
  category?: Prisma.SortOrder
  tags?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  thumbnailUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  bannerUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  meta?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  featured?: Prisma.SortOrder
  providerName?: Prisma.SortOrderInput | Prisma.SortOrder
  totalWagered?: Prisma.SortOrder
  gameProviderId?: Prisma.SortOrderInput | Prisma.SortOrder
  operatorId?: Prisma.SortOrderInput | Prisma.SortOrder
  gameProvider?: Prisma.GameProviderOrderByWithRelationInput
  gameSessions?: Prisma.GameSessionOrderByRelationAggregateInput
  gameLaunchLinks?: Prisma.GameLaunchLinkOrderByRelationAggregateInput
  operator?: Prisma.OperatorOrderByWithRelationInput
  TournamentGame?: Prisma.TournamentGameOrderByRelationAggregateInput
}

export type GameWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.GameWhereInput | Prisma.GameWhereInput[]
  OR?: Prisma.GameWhereInput[]
  NOT?: Prisma.GameWhereInput | Prisma.GameWhereInput[]
  name?: Prisma.StringFilter<"Game"> | string
  title?: Prisma.StringFilter<"Game"> | string
  goldsvetData?: Prisma.JsonNullableFilter<"Game">
  description?: Prisma.StringNullableFilter<"Game"> | string | null
  supportedProviders?: Prisma.EnumGameProviderNameNullableListFilter<"Game">
  category?: Prisma.EnumGameCategoryFilter<"Game"> | $Enums.GameCategory
  tags?: Prisma.StringNullableListFilter<"Game">
  isActive?: Prisma.BoolFilter<"Game"> | boolean
  thumbnailUrl?: Prisma.StringNullableFilter<"Game"> | string | null
  bannerUrl?: Prisma.StringNullableFilter<"Game"> | string | null
  meta?: Prisma.JsonNullableFilter<"Game">
  createdAt?: Prisma.DateTimeFilter<"Game"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Game"> | Date | string
  featured?: Prisma.BoolFilter<"Game"> | boolean
  providerName?: Prisma.StringNullableFilter<"Game"> | string | null
  totalWagered?: Prisma.IntFilter<"Game"> | number
  gameProviderId?: Prisma.StringNullableFilter<"Game"> | string | null
  operatorId?: Prisma.StringNullableFilter<"Game"> | string | null
  gameProvider?: Prisma.XOR<Prisma.GameProviderNullableScalarRelationFilter, Prisma.GameProviderWhereInput> | null
  gameSessions?: Prisma.GameSessionListRelationFilter
  gameLaunchLinks?: Prisma.GameLaunchLinkListRelationFilter
  operator?: Prisma.XOR<Prisma.OperatorNullableScalarRelationFilter, Prisma.OperatorWhereInput> | null
  TournamentGame?: Prisma.TournamentGameListRelationFilter
}, "id">

export type GameOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  title?: Prisma.SortOrder
  goldsvetData?: Prisma.SortOrderInput | Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  supportedProviders?: Prisma.SortOrder
  category?: Prisma.SortOrder
  tags?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  thumbnailUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  bannerUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  meta?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  featured?: Prisma.SortOrder
  providerName?: Prisma.SortOrderInput | Prisma.SortOrder
  totalWagered?: Prisma.SortOrder
  gameProviderId?: Prisma.SortOrderInput | Prisma.SortOrder
  operatorId?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.GameCountOrderByAggregateInput
  _avg?: Prisma.GameAvgOrderByAggregateInput
  _max?: Prisma.GameMaxOrderByAggregateInput
  _min?: Prisma.GameMinOrderByAggregateInput
  _sum?: Prisma.GameSumOrderByAggregateInput
}

export type GameScalarWhereWithAggregatesInput = {
  AND?: Prisma.GameScalarWhereWithAggregatesInput | Prisma.GameScalarWhereWithAggregatesInput[]
  OR?: Prisma.GameScalarWhereWithAggregatesInput[]
  NOT?: Prisma.GameScalarWhereWithAggregatesInput | Prisma.GameScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Game"> | string
  name?: Prisma.StringWithAggregatesFilter<"Game"> | string
  title?: Prisma.StringWithAggregatesFilter<"Game"> | string
  goldsvetData?: Prisma.JsonNullableWithAggregatesFilter<"Game">
  description?: Prisma.StringNullableWithAggregatesFilter<"Game"> | string | null
  supportedProviders?: Prisma.EnumGameProviderNameNullableListFilter<"Game">
  category?: Prisma.EnumGameCategoryWithAggregatesFilter<"Game"> | $Enums.GameCategory
  tags?: Prisma.StringNullableListFilter<"Game">
  isActive?: Prisma.BoolWithAggregatesFilter<"Game"> | boolean
  thumbnailUrl?: Prisma.StringNullableWithAggregatesFilter<"Game"> | string | null
  bannerUrl?: Prisma.StringNullableWithAggregatesFilter<"Game"> | string | null
  meta?: Prisma.JsonNullableWithAggregatesFilter<"Game">
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Game"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Game"> | Date | string
  featured?: Prisma.BoolWithAggregatesFilter<"Game"> | boolean
  providerName?: Prisma.StringNullableWithAggregatesFilter<"Game"> | string | null
  totalWagered?: Prisma.IntWithAggregatesFilter<"Game"> | number
  gameProviderId?: Prisma.StringNullableWithAggregatesFilter<"Game"> | string | null
  operatorId?: Prisma.StringNullableWithAggregatesFilter<"Game"> | string | null
}

export type GameCreateInput = {
  id?: string
  name: string
  title: string
  goldsvetData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  description?: string | null
  supportedProviders?: Prisma.GameCreatesupportedProvidersInput | $Enums.GameProviderName[]
  category: $Enums.GameCategory
  tags?: Prisma.GameCreatetagsInput | string[]
  isActive?: boolean
  thumbnailUrl?: string | null
  bannerUrl?: string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
  featured?: boolean
  providerName?: string | null
  totalWagered?: number
  gameProvider?: Prisma.GameProviderCreateNestedOneWithoutGamesInput
  gameSessions?: Prisma.GameSessionCreateNestedManyWithoutGameInput
  gameLaunchLinks?: Prisma.GameLaunchLinkCreateNestedManyWithoutGameInput
  operator?: Prisma.OperatorCreateNestedOneWithoutGamesInput
  TournamentGame?: Prisma.TournamentGameCreateNestedManyWithoutGameInput
}

export type GameUncheckedCreateInput = {
  id?: string
  name: string
  title: string
  goldsvetData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  description?: string | null
  supportedProviders?: Prisma.GameCreatesupportedProvidersInput | $Enums.GameProviderName[]
  category: $Enums.GameCategory
  tags?: Prisma.GameCreatetagsInput | string[]
  isActive?: boolean
  thumbnailUrl?: string | null
  bannerUrl?: string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
  featured?: boolean
  providerName?: string | null
  totalWagered?: number
  gameProviderId?: string | null
  operatorId?: string | null
  gameSessions?: Prisma.GameSessionUncheckedCreateNestedManyWithoutGameInput
  gameLaunchLinks?: Prisma.GameLaunchLinkUncheckedCreateNestedManyWithoutGameInput
  TournamentGame?: Prisma.TournamentGameUncheckedCreateNestedManyWithoutGameInput
}

export type GameUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  goldsvetData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  supportedProviders?: Prisma.GameUpdatesupportedProvidersInput | $Enums.GameProviderName[]
  category?: Prisma.EnumGameCategoryFieldUpdateOperationsInput | $Enums.GameCategory
  tags?: Prisma.GameUpdatetagsInput | string[]
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  thumbnailUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bannerUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  featured?: Prisma.BoolFieldUpdateOperationsInput | boolean
  providerName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  totalWagered?: Prisma.IntFieldUpdateOperationsInput | number
  gameProvider?: Prisma.GameProviderUpdateOneWithoutGamesNestedInput
  gameSessions?: Prisma.GameSessionUpdateManyWithoutGameNestedInput
  gameLaunchLinks?: Prisma.GameLaunchLinkUpdateManyWithoutGameNestedInput
  operator?: Prisma.OperatorUpdateOneWithoutGamesNestedInput
  TournamentGame?: Prisma.TournamentGameUpdateManyWithoutGameNestedInput
}

export type GameUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  goldsvetData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  supportedProviders?: Prisma.GameUpdatesupportedProvidersInput | $Enums.GameProviderName[]
  category?: Prisma.EnumGameCategoryFieldUpdateOperationsInput | $Enums.GameCategory
  tags?: Prisma.GameUpdatetagsInput | string[]
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  thumbnailUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bannerUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  featured?: Prisma.BoolFieldUpdateOperationsInput | boolean
  providerName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  totalWagered?: Prisma.IntFieldUpdateOperationsInput | number
  gameProviderId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  operatorId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  gameSessions?: Prisma.GameSessionUncheckedUpdateManyWithoutGameNestedInput
  gameLaunchLinks?: Prisma.GameLaunchLinkUncheckedUpdateManyWithoutGameNestedInput
  TournamentGame?: Prisma.TournamentGameUncheckedUpdateManyWithoutGameNestedInput
}

export type GameCreateManyInput = {
  id?: string
  name: string
  title: string
  goldsvetData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  description?: string | null
  supportedProviders?: Prisma.GameCreatesupportedProvidersInput | $Enums.GameProviderName[]
  category: $Enums.GameCategory
  tags?: Prisma.GameCreatetagsInput | string[]
  isActive?: boolean
  thumbnailUrl?: string | null
  bannerUrl?: string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
  featured?: boolean
  providerName?: string | null
  totalWagered?: number
  gameProviderId?: string | null
  operatorId?: string | null
}

export type GameUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  goldsvetData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  supportedProviders?: Prisma.GameUpdatesupportedProvidersInput | $Enums.GameProviderName[]
  category?: Prisma.EnumGameCategoryFieldUpdateOperationsInput | $Enums.GameCategory
  tags?: Prisma.GameUpdatetagsInput | string[]
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  thumbnailUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bannerUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  featured?: Prisma.BoolFieldUpdateOperationsInput | boolean
  providerName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  totalWagered?: Prisma.IntFieldUpdateOperationsInput | number
}

export type GameUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  goldsvetData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  supportedProviders?: Prisma.GameUpdatesupportedProvidersInput | $Enums.GameProviderName[]
  category?: Prisma.EnumGameCategoryFieldUpdateOperationsInput | $Enums.GameCategory
  tags?: Prisma.GameUpdatetagsInput | string[]
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  thumbnailUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bannerUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  featured?: Prisma.BoolFieldUpdateOperationsInput | boolean
  providerName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  totalWagered?: Prisma.IntFieldUpdateOperationsInput | number
  gameProviderId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  operatorId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type EnumGameProviderNameNullableListFilter<$PrismaModel = never> = {
  equals?: $Enums.GameProviderName[] | Prisma.ListEnumGameProviderNameFieldRefInput<$PrismaModel> | null
  has?: $Enums.GameProviderName | Prisma.EnumGameProviderNameFieldRefInput<$PrismaModel> | null
  hasEvery?: $Enums.GameProviderName[] | Prisma.ListEnumGameProviderNameFieldRefInput<$PrismaModel>
  hasSome?: $Enums.GameProviderName[] | Prisma.ListEnumGameProviderNameFieldRefInput<$PrismaModel>
  isEmpty?: boolean
}

export type StringNullableListFilter<$PrismaModel = never> = {
  equals?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel> | null
  has?: string | Prisma.StringFieldRefInput<$PrismaModel> | null
  hasEvery?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel>
  hasSome?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel>
  isEmpty?: boolean
}

export type GameCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  title?: Prisma.SortOrder
  goldsvetData?: Prisma.SortOrder
  description?: Prisma.SortOrder
  supportedProviders?: Prisma.SortOrder
  category?: Prisma.SortOrder
  tags?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  thumbnailUrl?: Prisma.SortOrder
  bannerUrl?: Prisma.SortOrder
  meta?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  featured?: Prisma.SortOrder
  providerName?: Prisma.SortOrder
  totalWagered?: Prisma.SortOrder
  gameProviderId?: Prisma.SortOrder
  operatorId?: Prisma.SortOrder
}

export type GameAvgOrderByAggregateInput = {
  totalWagered?: Prisma.SortOrder
}

export type GameMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  category?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  thumbnailUrl?: Prisma.SortOrder
  bannerUrl?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  featured?: Prisma.SortOrder
  providerName?: Prisma.SortOrder
  totalWagered?: Prisma.SortOrder
  gameProviderId?: Prisma.SortOrder
  operatorId?: Prisma.SortOrder
}

export type GameMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  category?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  thumbnailUrl?: Prisma.SortOrder
  bannerUrl?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  featured?: Prisma.SortOrder
  providerName?: Prisma.SortOrder
  totalWagered?: Prisma.SortOrder
  gameProviderId?: Prisma.SortOrder
  operatorId?: Prisma.SortOrder
}

export type GameSumOrderByAggregateInput = {
  totalWagered?: Prisma.SortOrder
}

export type GameScalarRelationFilter = {
  is?: Prisma.GameWhereInput
  isNot?: Prisma.GameWhereInput
}

export type GameListRelationFilter = {
  every?: Prisma.GameWhereInput
  some?: Prisma.GameWhereInput
  none?: Prisma.GameWhereInput
}

export type GameOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type GameCreatesupportedProvidersInput = {
  set: $Enums.GameProviderName[]
}

export type GameCreatetagsInput = {
  set: string[]
}

export type GameUpdatesupportedProvidersInput = {
  set?: $Enums.GameProviderName[]
  push?: $Enums.GameProviderName | $Enums.GameProviderName[]
}

export type EnumGameCategoryFieldUpdateOperationsInput = {
  set?: $Enums.GameCategory
}

export type GameUpdatetagsInput = {
  set?: string[]
  push?: string | string[]
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type GameCreateNestedOneWithoutGameSessionsInput = {
  create?: Prisma.XOR<Prisma.GameCreateWithoutGameSessionsInput, Prisma.GameUncheckedCreateWithoutGameSessionsInput>
  connectOrCreate?: Prisma.GameCreateOrConnectWithoutGameSessionsInput
  connect?: Prisma.GameWhereUniqueInput
}

export type GameUpdateOneRequiredWithoutGameSessionsNestedInput = {
  create?: Prisma.XOR<Prisma.GameCreateWithoutGameSessionsInput, Prisma.GameUncheckedCreateWithoutGameSessionsInput>
  connectOrCreate?: Prisma.GameCreateOrConnectWithoutGameSessionsInput
  upsert?: Prisma.GameUpsertWithoutGameSessionsInput
  connect?: Prisma.GameWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.GameUpdateToOneWithWhereWithoutGameSessionsInput, Prisma.GameUpdateWithoutGameSessionsInput>, Prisma.GameUncheckedUpdateWithoutGameSessionsInput>
}

export type GameCreateNestedManyWithoutGameProviderInput = {
  create?: Prisma.XOR<Prisma.GameCreateWithoutGameProviderInput, Prisma.GameUncheckedCreateWithoutGameProviderInput> | Prisma.GameCreateWithoutGameProviderInput[] | Prisma.GameUncheckedCreateWithoutGameProviderInput[]
  connectOrCreate?: Prisma.GameCreateOrConnectWithoutGameProviderInput | Prisma.GameCreateOrConnectWithoutGameProviderInput[]
  createMany?: Prisma.GameCreateManyGameProviderInputEnvelope
  connect?: Prisma.GameWhereUniqueInput | Prisma.GameWhereUniqueInput[]
}

export type GameUncheckedCreateNestedManyWithoutGameProviderInput = {
  create?: Prisma.XOR<Prisma.GameCreateWithoutGameProviderInput, Prisma.GameUncheckedCreateWithoutGameProviderInput> | Prisma.GameCreateWithoutGameProviderInput[] | Prisma.GameUncheckedCreateWithoutGameProviderInput[]
  connectOrCreate?: Prisma.GameCreateOrConnectWithoutGameProviderInput | Prisma.GameCreateOrConnectWithoutGameProviderInput[]
  createMany?: Prisma.GameCreateManyGameProviderInputEnvelope
  connect?: Prisma.GameWhereUniqueInput | Prisma.GameWhereUniqueInput[]
}

export type GameUpdateManyWithoutGameProviderNestedInput = {
  create?: Prisma.XOR<Prisma.GameCreateWithoutGameProviderInput, Prisma.GameUncheckedCreateWithoutGameProviderInput> | Prisma.GameCreateWithoutGameProviderInput[] | Prisma.GameUncheckedCreateWithoutGameProviderInput[]
  connectOrCreate?: Prisma.GameCreateOrConnectWithoutGameProviderInput | Prisma.GameCreateOrConnectWithoutGameProviderInput[]
  upsert?: Prisma.GameUpsertWithWhereUniqueWithoutGameProviderInput | Prisma.GameUpsertWithWhereUniqueWithoutGameProviderInput[]
  createMany?: Prisma.GameCreateManyGameProviderInputEnvelope
  set?: Prisma.GameWhereUniqueInput | Prisma.GameWhereUniqueInput[]
  disconnect?: Prisma.GameWhereUniqueInput | Prisma.GameWhereUniqueInput[]
  delete?: Prisma.GameWhereUniqueInput | Prisma.GameWhereUniqueInput[]
  connect?: Prisma.GameWhereUniqueInput | Prisma.GameWhereUniqueInput[]
  update?: Prisma.GameUpdateWithWhereUniqueWithoutGameProviderInput | Prisma.GameUpdateWithWhereUniqueWithoutGameProviderInput[]
  updateMany?: Prisma.GameUpdateManyWithWhereWithoutGameProviderInput | Prisma.GameUpdateManyWithWhereWithoutGameProviderInput[]
  deleteMany?: Prisma.GameScalarWhereInput | Prisma.GameScalarWhereInput[]
}

export type GameUncheckedUpdateManyWithoutGameProviderNestedInput = {
  create?: Prisma.XOR<Prisma.GameCreateWithoutGameProviderInput, Prisma.GameUncheckedCreateWithoutGameProviderInput> | Prisma.GameCreateWithoutGameProviderInput[] | Prisma.GameUncheckedCreateWithoutGameProviderInput[]
  connectOrCreate?: Prisma.GameCreateOrConnectWithoutGameProviderInput | Prisma.GameCreateOrConnectWithoutGameProviderInput[]
  upsert?: Prisma.GameUpsertWithWhereUniqueWithoutGameProviderInput | Prisma.GameUpsertWithWhereUniqueWithoutGameProviderInput[]
  createMany?: Prisma.GameCreateManyGameProviderInputEnvelope
  set?: Prisma.GameWhereUniqueInput | Prisma.GameWhereUniqueInput[]
  disconnect?: Prisma.GameWhereUniqueInput | Prisma.GameWhereUniqueInput[]
  delete?: Prisma.GameWhereUniqueInput | Prisma.GameWhereUniqueInput[]
  connect?: Prisma.GameWhereUniqueInput | Prisma.GameWhereUniqueInput[]
  update?: Prisma.GameUpdateWithWhereUniqueWithoutGameProviderInput | Prisma.GameUpdateWithWhereUniqueWithoutGameProviderInput[]
  updateMany?: Prisma.GameUpdateManyWithWhereWithoutGameProviderInput | Prisma.GameUpdateManyWithWhereWithoutGameProviderInput[]
  deleteMany?: Prisma.GameScalarWhereInput | Prisma.GameScalarWhereInput[]
}

export type GameCreateNestedOneWithoutGameLaunchLinksInput = {
  create?: Prisma.XOR<Prisma.GameCreateWithoutGameLaunchLinksInput, Prisma.GameUncheckedCreateWithoutGameLaunchLinksInput>
  connectOrCreate?: Prisma.GameCreateOrConnectWithoutGameLaunchLinksInput
  connect?: Prisma.GameWhereUniqueInput
}

export type GameUpdateOneRequiredWithoutGameLaunchLinksNestedInput = {
  create?: Prisma.XOR<Prisma.GameCreateWithoutGameLaunchLinksInput, Prisma.GameUncheckedCreateWithoutGameLaunchLinksInput>
  connectOrCreate?: Prisma.GameCreateOrConnectWithoutGameLaunchLinksInput
  upsert?: Prisma.GameUpsertWithoutGameLaunchLinksInput
  connect?: Prisma.GameWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.GameUpdateToOneWithWhereWithoutGameLaunchLinksInput, Prisma.GameUpdateWithoutGameLaunchLinksInput>, Prisma.GameUncheckedUpdateWithoutGameLaunchLinksInput>
}

export type GameCreateNestedManyWithoutOperatorInput = {
  create?: Prisma.XOR<Prisma.GameCreateWithoutOperatorInput, Prisma.GameUncheckedCreateWithoutOperatorInput> | Prisma.GameCreateWithoutOperatorInput[] | Prisma.GameUncheckedCreateWithoutOperatorInput[]
  connectOrCreate?: Prisma.GameCreateOrConnectWithoutOperatorInput | Prisma.GameCreateOrConnectWithoutOperatorInput[]
  createMany?: Prisma.GameCreateManyOperatorInputEnvelope
  connect?: Prisma.GameWhereUniqueInput | Prisma.GameWhereUniqueInput[]
}

export type GameUncheckedCreateNestedManyWithoutOperatorInput = {
  create?: Prisma.XOR<Prisma.GameCreateWithoutOperatorInput, Prisma.GameUncheckedCreateWithoutOperatorInput> | Prisma.GameCreateWithoutOperatorInput[] | Prisma.GameUncheckedCreateWithoutOperatorInput[]
  connectOrCreate?: Prisma.GameCreateOrConnectWithoutOperatorInput | Prisma.GameCreateOrConnectWithoutOperatorInput[]
  createMany?: Prisma.GameCreateManyOperatorInputEnvelope
  connect?: Prisma.GameWhereUniqueInput | Prisma.GameWhereUniqueInput[]
}

export type GameUpdateManyWithoutOperatorNestedInput = {
  create?: Prisma.XOR<Prisma.GameCreateWithoutOperatorInput, Prisma.GameUncheckedCreateWithoutOperatorInput> | Prisma.GameCreateWithoutOperatorInput[] | Prisma.GameUncheckedCreateWithoutOperatorInput[]
  connectOrCreate?: Prisma.GameCreateOrConnectWithoutOperatorInput | Prisma.GameCreateOrConnectWithoutOperatorInput[]
  upsert?: Prisma.GameUpsertWithWhereUniqueWithoutOperatorInput | Prisma.GameUpsertWithWhereUniqueWithoutOperatorInput[]
  createMany?: Prisma.GameCreateManyOperatorInputEnvelope
  set?: Prisma.GameWhereUniqueInput | Prisma.GameWhereUniqueInput[]
  disconnect?: Prisma.GameWhereUniqueInput | Prisma.GameWhereUniqueInput[]
  delete?: Prisma.GameWhereUniqueInput | Prisma.GameWhereUniqueInput[]
  connect?: Prisma.GameWhereUniqueInput | Prisma.GameWhereUniqueInput[]
  update?: Prisma.GameUpdateWithWhereUniqueWithoutOperatorInput | Prisma.GameUpdateWithWhereUniqueWithoutOperatorInput[]
  updateMany?: Prisma.GameUpdateManyWithWhereWithoutOperatorInput | Prisma.GameUpdateManyWithWhereWithoutOperatorInput[]
  deleteMany?: Prisma.GameScalarWhereInput | Prisma.GameScalarWhereInput[]
}

export type GameUncheckedUpdateManyWithoutOperatorNestedInput = {
  create?: Prisma.XOR<Prisma.GameCreateWithoutOperatorInput, Prisma.GameUncheckedCreateWithoutOperatorInput> | Prisma.GameCreateWithoutOperatorInput[] | Prisma.GameUncheckedCreateWithoutOperatorInput[]
  connectOrCreate?: Prisma.GameCreateOrConnectWithoutOperatorInput | Prisma.GameCreateOrConnectWithoutOperatorInput[]
  upsert?: Prisma.GameUpsertWithWhereUniqueWithoutOperatorInput | Prisma.GameUpsertWithWhereUniqueWithoutOperatorInput[]
  createMany?: Prisma.GameCreateManyOperatorInputEnvelope
  set?: Prisma.GameWhereUniqueInput | Prisma.GameWhereUniqueInput[]
  disconnect?: Prisma.GameWhereUniqueInput | Prisma.GameWhereUniqueInput[]
  delete?: Prisma.GameWhereUniqueInput | Prisma.GameWhereUniqueInput[]
  connect?: Prisma.GameWhereUniqueInput | Prisma.GameWhereUniqueInput[]
  update?: Prisma.GameUpdateWithWhereUniqueWithoutOperatorInput | Prisma.GameUpdateWithWhereUniqueWithoutOperatorInput[]
  updateMany?: Prisma.GameUpdateManyWithWhereWithoutOperatorInput | Prisma.GameUpdateManyWithWhereWithoutOperatorInput[]
  deleteMany?: Prisma.GameScalarWhereInput | Prisma.GameScalarWhereInput[]
}

export type GameCreateNestedOneWithoutTournamentGameInput = {
  create?: Prisma.XOR<Prisma.GameCreateWithoutTournamentGameInput, Prisma.GameUncheckedCreateWithoutTournamentGameInput>
  connectOrCreate?: Prisma.GameCreateOrConnectWithoutTournamentGameInput
  connect?: Prisma.GameWhereUniqueInput
}

export type GameUpdateOneRequiredWithoutTournamentGameNestedInput = {
  create?: Prisma.XOR<Prisma.GameCreateWithoutTournamentGameInput, Prisma.GameUncheckedCreateWithoutTournamentGameInput>
  connectOrCreate?: Prisma.GameCreateOrConnectWithoutTournamentGameInput
  upsert?: Prisma.GameUpsertWithoutTournamentGameInput
  connect?: Prisma.GameWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.GameUpdateToOneWithWhereWithoutTournamentGameInput, Prisma.GameUpdateWithoutTournamentGameInput>, Prisma.GameUncheckedUpdateWithoutTournamentGameInput>
}

export type GameCreateWithoutGameSessionsInput = {
  id?: string
  name: string
  title: string
  goldsvetData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  description?: string | null
  supportedProviders?: Prisma.GameCreatesupportedProvidersInput | $Enums.GameProviderName[]
  category: $Enums.GameCategory
  tags?: Prisma.GameCreatetagsInput | string[]
  isActive?: boolean
  thumbnailUrl?: string | null
  bannerUrl?: string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
  featured?: boolean
  providerName?: string | null
  totalWagered?: number
  gameProvider?: Prisma.GameProviderCreateNestedOneWithoutGamesInput
  gameLaunchLinks?: Prisma.GameLaunchLinkCreateNestedManyWithoutGameInput
  operator?: Prisma.OperatorCreateNestedOneWithoutGamesInput
  TournamentGame?: Prisma.TournamentGameCreateNestedManyWithoutGameInput
}

export type GameUncheckedCreateWithoutGameSessionsInput = {
  id?: string
  name: string
  title: string
  goldsvetData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  description?: string | null
  supportedProviders?: Prisma.GameCreatesupportedProvidersInput | $Enums.GameProviderName[]
  category: $Enums.GameCategory
  tags?: Prisma.GameCreatetagsInput | string[]
  isActive?: boolean
  thumbnailUrl?: string | null
  bannerUrl?: string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
  featured?: boolean
  providerName?: string | null
  totalWagered?: number
  gameProviderId?: string | null
  operatorId?: string | null
  gameLaunchLinks?: Prisma.GameLaunchLinkUncheckedCreateNestedManyWithoutGameInput
  TournamentGame?: Prisma.TournamentGameUncheckedCreateNestedManyWithoutGameInput
}

export type GameCreateOrConnectWithoutGameSessionsInput = {
  where: Prisma.GameWhereUniqueInput
  create: Prisma.XOR<Prisma.GameCreateWithoutGameSessionsInput, Prisma.GameUncheckedCreateWithoutGameSessionsInput>
}

export type GameUpsertWithoutGameSessionsInput = {
  update: Prisma.XOR<Prisma.GameUpdateWithoutGameSessionsInput, Prisma.GameUncheckedUpdateWithoutGameSessionsInput>
  create: Prisma.XOR<Prisma.GameCreateWithoutGameSessionsInput, Prisma.GameUncheckedCreateWithoutGameSessionsInput>
  where?: Prisma.GameWhereInput
}

export type GameUpdateToOneWithWhereWithoutGameSessionsInput = {
  where?: Prisma.GameWhereInput
  data: Prisma.XOR<Prisma.GameUpdateWithoutGameSessionsInput, Prisma.GameUncheckedUpdateWithoutGameSessionsInput>
}

export type GameUpdateWithoutGameSessionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  goldsvetData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  supportedProviders?: Prisma.GameUpdatesupportedProvidersInput | $Enums.GameProviderName[]
  category?: Prisma.EnumGameCategoryFieldUpdateOperationsInput | $Enums.GameCategory
  tags?: Prisma.GameUpdatetagsInput | string[]
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  thumbnailUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bannerUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  featured?: Prisma.BoolFieldUpdateOperationsInput | boolean
  providerName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  totalWagered?: Prisma.IntFieldUpdateOperationsInput | number
  gameProvider?: Prisma.GameProviderUpdateOneWithoutGamesNestedInput
  gameLaunchLinks?: Prisma.GameLaunchLinkUpdateManyWithoutGameNestedInput
  operator?: Prisma.OperatorUpdateOneWithoutGamesNestedInput
  TournamentGame?: Prisma.TournamentGameUpdateManyWithoutGameNestedInput
}

export type GameUncheckedUpdateWithoutGameSessionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  goldsvetData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  supportedProviders?: Prisma.GameUpdatesupportedProvidersInput | $Enums.GameProviderName[]
  category?: Prisma.EnumGameCategoryFieldUpdateOperationsInput | $Enums.GameCategory
  tags?: Prisma.GameUpdatetagsInput | string[]
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  thumbnailUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bannerUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  featured?: Prisma.BoolFieldUpdateOperationsInput | boolean
  providerName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  totalWagered?: Prisma.IntFieldUpdateOperationsInput | number
  gameProviderId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  operatorId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  gameLaunchLinks?: Prisma.GameLaunchLinkUncheckedUpdateManyWithoutGameNestedInput
  TournamentGame?: Prisma.TournamentGameUncheckedUpdateManyWithoutGameNestedInput
}

export type GameCreateWithoutGameProviderInput = {
  id?: string
  name: string
  title: string
  goldsvetData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  description?: string | null
  supportedProviders?: Prisma.GameCreatesupportedProvidersInput | $Enums.GameProviderName[]
  category: $Enums.GameCategory
  tags?: Prisma.GameCreatetagsInput | string[]
  isActive?: boolean
  thumbnailUrl?: string | null
  bannerUrl?: string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
  featured?: boolean
  providerName?: string | null
  totalWagered?: number
  gameSessions?: Prisma.GameSessionCreateNestedManyWithoutGameInput
  gameLaunchLinks?: Prisma.GameLaunchLinkCreateNestedManyWithoutGameInput
  operator?: Prisma.OperatorCreateNestedOneWithoutGamesInput
  TournamentGame?: Prisma.TournamentGameCreateNestedManyWithoutGameInput
}

export type GameUncheckedCreateWithoutGameProviderInput = {
  id?: string
  name: string
  title: string
  goldsvetData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  description?: string | null
  supportedProviders?: Prisma.GameCreatesupportedProvidersInput | $Enums.GameProviderName[]
  category: $Enums.GameCategory
  tags?: Prisma.GameCreatetagsInput | string[]
  isActive?: boolean
  thumbnailUrl?: string | null
  bannerUrl?: string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
  featured?: boolean
  providerName?: string | null
  totalWagered?: number
  operatorId?: string | null
  gameSessions?: Prisma.GameSessionUncheckedCreateNestedManyWithoutGameInput
  gameLaunchLinks?: Prisma.GameLaunchLinkUncheckedCreateNestedManyWithoutGameInput
  TournamentGame?: Prisma.TournamentGameUncheckedCreateNestedManyWithoutGameInput
}

export type GameCreateOrConnectWithoutGameProviderInput = {
  where: Prisma.GameWhereUniqueInput
  create: Prisma.XOR<Prisma.GameCreateWithoutGameProviderInput, Prisma.GameUncheckedCreateWithoutGameProviderInput>
}

export type GameCreateManyGameProviderInputEnvelope = {
  data: Prisma.GameCreateManyGameProviderInput | Prisma.GameCreateManyGameProviderInput[]
  skipDuplicates?: boolean
}

export type GameUpsertWithWhereUniqueWithoutGameProviderInput = {
  where: Prisma.GameWhereUniqueInput
  update: Prisma.XOR<Prisma.GameUpdateWithoutGameProviderInput, Prisma.GameUncheckedUpdateWithoutGameProviderInput>
  create: Prisma.XOR<Prisma.GameCreateWithoutGameProviderInput, Prisma.GameUncheckedCreateWithoutGameProviderInput>
}

export type GameUpdateWithWhereUniqueWithoutGameProviderInput = {
  where: Prisma.GameWhereUniqueInput
  data: Prisma.XOR<Prisma.GameUpdateWithoutGameProviderInput, Prisma.GameUncheckedUpdateWithoutGameProviderInput>
}

export type GameUpdateManyWithWhereWithoutGameProviderInput = {
  where: Prisma.GameScalarWhereInput
  data: Prisma.XOR<Prisma.GameUpdateManyMutationInput, Prisma.GameUncheckedUpdateManyWithoutGameProviderInput>
}

export type GameScalarWhereInput = {
  AND?: Prisma.GameScalarWhereInput | Prisma.GameScalarWhereInput[]
  OR?: Prisma.GameScalarWhereInput[]
  NOT?: Prisma.GameScalarWhereInput | Prisma.GameScalarWhereInput[]
  id?: Prisma.StringFilter<"Game"> | string
  name?: Prisma.StringFilter<"Game"> | string
  title?: Prisma.StringFilter<"Game"> | string
  goldsvetData?: Prisma.JsonNullableFilter<"Game">
  description?: Prisma.StringNullableFilter<"Game"> | string | null
  supportedProviders?: Prisma.EnumGameProviderNameNullableListFilter<"Game">
  category?: Prisma.EnumGameCategoryFilter<"Game"> | $Enums.GameCategory
  tags?: Prisma.StringNullableListFilter<"Game">
  isActive?: Prisma.BoolFilter<"Game"> | boolean
  thumbnailUrl?: Prisma.StringNullableFilter<"Game"> | string | null
  bannerUrl?: Prisma.StringNullableFilter<"Game"> | string | null
  meta?: Prisma.JsonNullableFilter<"Game">
  createdAt?: Prisma.DateTimeFilter<"Game"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Game"> | Date | string
  featured?: Prisma.BoolFilter<"Game"> | boolean
  providerName?: Prisma.StringNullableFilter<"Game"> | string | null
  totalWagered?: Prisma.IntFilter<"Game"> | number
  gameProviderId?: Prisma.StringNullableFilter<"Game"> | string | null
  operatorId?: Prisma.StringNullableFilter<"Game"> | string | null
}

export type GameCreateWithoutGameLaunchLinksInput = {
  id?: string
  name: string
  title: string
  goldsvetData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  description?: string | null
  supportedProviders?: Prisma.GameCreatesupportedProvidersInput | $Enums.GameProviderName[]
  category: $Enums.GameCategory
  tags?: Prisma.GameCreatetagsInput | string[]
  isActive?: boolean
  thumbnailUrl?: string | null
  bannerUrl?: string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
  featured?: boolean
  providerName?: string | null
  totalWagered?: number
  gameProvider?: Prisma.GameProviderCreateNestedOneWithoutGamesInput
  gameSessions?: Prisma.GameSessionCreateNestedManyWithoutGameInput
  operator?: Prisma.OperatorCreateNestedOneWithoutGamesInput
  TournamentGame?: Prisma.TournamentGameCreateNestedManyWithoutGameInput
}

export type GameUncheckedCreateWithoutGameLaunchLinksInput = {
  id?: string
  name: string
  title: string
  goldsvetData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  description?: string | null
  supportedProviders?: Prisma.GameCreatesupportedProvidersInput | $Enums.GameProviderName[]
  category: $Enums.GameCategory
  tags?: Prisma.GameCreatetagsInput | string[]
  isActive?: boolean
  thumbnailUrl?: string | null
  bannerUrl?: string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
  featured?: boolean
  providerName?: string | null
  totalWagered?: number
  gameProviderId?: string | null
  operatorId?: string | null
  gameSessions?: Prisma.GameSessionUncheckedCreateNestedManyWithoutGameInput
  TournamentGame?: Prisma.TournamentGameUncheckedCreateNestedManyWithoutGameInput
}

export type GameCreateOrConnectWithoutGameLaunchLinksInput = {
  where: Prisma.GameWhereUniqueInput
  create: Prisma.XOR<Prisma.GameCreateWithoutGameLaunchLinksInput, Prisma.GameUncheckedCreateWithoutGameLaunchLinksInput>
}

export type GameUpsertWithoutGameLaunchLinksInput = {
  update: Prisma.XOR<Prisma.GameUpdateWithoutGameLaunchLinksInput, Prisma.GameUncheckedUpdateWithoutGameLaunchLinksInput>
  create: Prisma.XOR<Prisma.GameCreateWithoutGameLaunchLinksInput, Prisma.GameUncheckedCreateWithoutGameLaunchLinksInput>
  where?: Prisma.GameWhereInput
}

export type GameUpdateToOneWithWhereWithoutGameLaunchLinksInput = {
  where?: Prisma.GameWhereInput
  data: Prisma.XOR<Prisma.GameUpdateWithoutGameLaunchLinksInput, Prisma.GameUncheckedUpdateWithoutGameLaunchLinksInput>
}

export type GameUpdateWithoutGameLaunchLinksInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  goldsvetData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  supportedProviders?: Prisma.GameUpdatesupportedProvidersInput | $Enums.GameProviderName[]
  category?: Prisma.EnumGameCategoryFieldUpdateOperationsInput | $Enums.GameCategory
  tags?: Prisma.GameUpdatetagsInput | string[]
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  thumbnailUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bannerUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  featured?: Prisma.BoolFieldUpdateOperationsInput | boolean
  providerName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  totalWagered?: Prisma.IntFieldUpdateOperationsInput | number
  gameProvider?: Prisma.GameProviderUpdateOneWithoutGamesNestedInput
  gameSessions?: Prisma.GameSessionUpdateManyWithoutGameNestedInput
  operator?: Prisma.OperatorUpdateOneWithoutGamesNestedInput
  TournamentGame?: Prisma.TournamentGameUpdateManyWithoutGameNestedInput
}

export type GameUncheckedUpdateWithoutGameLaunchLinksInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  goldsvetData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  supportedProviders?: Prisma.GameUpdatesupportedProvidersInput | $Enums.GameProviderName[]
  category?: Prisma.EnumGameCategoryFieldUpdateOperationsInput | $Enums.GameCategory
  tags?: Prisma.GameUpdatetagsInput | string[]
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  thumbnailUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bannerUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  featured?: Prisma.BoolFieldUpdateOperationsInput | boolean
  providerName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  totalWagered?: Prisma.IntFieldUpdateOperationsInput | number
  gameProviderId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  operatorId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  gameSessions?: Prisma.GameSessionUncheckedUpdateManyWithoutGameNestedInput
  TournamentGame?: Prisma.TournamentGameUncheckedUpdateManyWithoutGameNestedInput
}

export type GameCreateWithoutOperatorInput = {
  id?: string
  name: string
  title: string
  goldsvetData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  description?: string | null
  supportedProviders?: Prisma.GameCreatesupportedProvidersInput | $Enums.GameProviderName[]
  category: $Enums.GameCategory
  tags?: Prisma.GameCreatetagsInput | string[]
  isActive?: boolean
  thumbnailUrl?: string | null
  bannerUrl?: string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
  featured?: boolean
  providerName?: string | null
  totalWagered?: number
  gameProvider?: Prisma.GameProviderCreateNestedOneWithoutGamesInput
  gameSessions?: Prisma.GameSessionCreateNestedManyWithoutGameInput
  gameLaunchLinks?: Prisma.GameLaunchLinkCreateNestedManyWithoutGameInput
  TournamentGame?: Prisma.TournamentGameCreateNestedManyWithoutGameInput
}

export type GameUncheckedCreateWithoutOperatorInput = {
  id?: string
  name: string
  title: string
  goldsvetData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  description?: string | null
  supportedProviders?: Prisma.GameCreatesupportedProvidersInput | $Enums.GameProviderName[]
  category: $Enums.GameCategory
  tags?: Prisma.GameCreatetagsInput | string[]
  isActive?: boolean
  thumbnailUrl?: string | null
  bannerUrl?: string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
  featured?: boolean
  providerName?: string | null
  totalWagered?: number
  gameProviderId?: string | null
  gameSessions?: Prisma.GameSessionUncheckedCreateNestedManyWithoutGameInput
  gameLaunchLinks?: Prisma.GameLaunchLinkUncheckedCreateNestedManyWithoutGameInput
  TournamentGame?: Prisma.TournamentGameUncheckedCreateNestedManyWithoutGameInput
}

export type GameCreateOrConnectWithoutOperatorInput = {
  where: Prisma.GameWhereUniqueInput
  create: Prisma.XOR<Prisma.GameCreateWithoutOperatorInput, Prisma.GameUncheckedCreateWithoutOperatorInput>
}

export type GameCreateManyOperatorInputEnvelope = {
  data: Prisma.GameCreateManyOperatorInput | Prisma.GameCreateManyOperatorInput[]
  skipDuplicates?: boolean
}

export type GameUpsertWithWhereUniqueWithoutOperatorInput = {
  where: Prisma.GameWhereUniqueInput
  update: Prisma.XOR<Prisma.GameUpdateWithoutOperatorInput, Prisma.GameUncheckedUpdateWithoutOperatorInput>
  create: Prisma.XOR<Prisma.GameCreateWithoutOperatorInput, Prisma.GameUncheckedCreateWithoutOperatorInput>
}

export type GameUpdateWithWhereUniqueWithoutOperatorInput = {
  where: Prisma.GameWhereUniqueInput
  data: Prisma.XOR<Prisma.GameUpdateWithoutOperatorInput, Prisma.GameUncheckedUpdateWithoutOperatorInput>
}

export type GameUpdateManyWithWhereWithoutOperatorInput = {
  where: Prisma.GameScalarWhereInput
  data: Prisma.XOR<Prisma.GameUpdateManyMutationInput, Prisma.GameUncheckedUpdateManyWithoutOperatorInput>
}

export type GameCreateWithoutTournamentGameInput = {
  id?: string
  name: string
  title: string
  goldsvetData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  description?: string | null
  supportedProviders?: Prisma.GameCreatesupportedProvidersInput | $Enums.GameProviderName[]
  category: $Enums.GameCategory
  tags?: Prisma.GameCreatetagsInput | string[]
  isActive?: boolean
  thumbnailUrl?: string | null
  bannerUrl?: string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
  featured?: boolean
  providerName?: string | null
  totalWagered?: number
  gameProvider?: Prisma.GameProviderCreateNestedOneWithoutGamesInput
  gameSessions?: Prisma.GameSessionCreateNestedManyWithoutGameInput
  gameLaunchLinks?: Prisma.GameLaunchLinkCreateNestedManyWithoutGameInput
  operator?: Prisma.OperatorCreateNestedOneWithoutGamesInput
}

export type GameUncheckedCreateWithoutTournamentGameInput = {
  id?: string
  name: string
  title: string
  goldsvetData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  description?: string | null
  supportedProviders?: Prisma.GameCreatesupportedProvidersInput | $Enums.GameProviderName[]
  category: $Enums.GameCategory
  tags?: Prisma.GameCreatetagsInput | string[]
  isActive?: boolean
  thumbnailUrl?: string | null
  bannerUrl?: string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
  featured?: boolean
  providerName?: string | null
  totalWagered?: number
  gameProviderId?: string | null
  operatorId?: string | null
  gameSessions?: Prisma.GameSessionUncheckedCreateNestedManyWithoutGameInput
  gameLaunchLinks?: Prisma.GameLaunchLinkUncheckedCreateNestedManyWithoutGameInput
}

export type GameCreateOrConnectWithoutTournamentGameInput = {
  where: Prisma.GameWhereUniqueInput
  create: Prisma.XOR<Prisma.GameCreateWithoutTournamentGameInput, Prisma.GameUncheckedCreateWithoutTournamentGameInput>
}

export type GameUpsertWithoutTournamentGameInput = {
  update: Prisma.XOR<Prisma.GameUpdateWithoutTournamentGameInput, Prisma.GameUncheckedUpdateWithoutTournamentGameInput>
  create: Prisma.XOR<Prisma.GameCreateWithoutTournamentGameInput, Prisma.GameUncheckedCreateWithoutTournamentGameInput>
  where?: Prisma.GameWhereInput
}

export type GameUpdateToOneWithWhereWithoutTournamentGameInput = {
  where?: Prisma.GameWhereInput
  data: Prisma.XOR<Prisma.GameUpdateWithoutTournamentGameInput, Prisma.GameUncheckedUpdateWithoutTournamentGameInput>
}

export type GameUpdateWithoutTournamentGameInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  goldsvetData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  supportedProviders?: Prisma.GameUpdatesupportedProvidersInput | $Enums.GameProviderName[]
  category?: Prisma.EnumGameCategoryFieldUpdateOperationsInput | $Enums.GameCategory
  tags?: Prisma.GameUpdatetagsInput | string[]
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  thumbnailUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bannerUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  featured?: Prisma.BoolFieldUpdateOperationsInput | boolean
  providerName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  totalWagered?: Prisma.IntFieldUpdateOperationsInput | number
  gameProvider?: Prisma.GameProviderUpdateOneWithoutGamesNestedInput
  gameSessions?: Prisma.GameSessionUpdateManyWithoutGameNestedInput
  gameLaunchLinks?: Prisma.GameLaunchLinkUpdateManyWithoutGameNestedInput
  operator?: Prisma.OperatorUpdateOneWithoutGamesNestedInput
}

export type GameUncheckedUpdateWithoutTournamentGameInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  goldsvetData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  supportedProviders?: Prisma.GameUpdatesupportedProvidersInput | $Enums.GameProviderName[]
  category?: Prisma.EnumGameCategoryFieldUpdateOperationsInput | $Enums.GameCategory
  tags?: Prisma.GameUpdatetagsInput | string[]
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  thumbnailUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bannerUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  featured?: Prisma.BoolFieldUpdateOperationsInput | boolean
  providerName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  totalWagered?: Prisma.IntFieldUpdateOperationsInput | number
  gameProviderId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  operatorId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  gameSessions?: Prisma.GameSessionUncheckedUpdateManyWithoutGameNestedInput
  gameLaunchLinks?: Prisma.GameLaunchLinkUncheckedUpdateManyWithoutGameNestedInput
}

export type GameCreateManyGameProviderInput = {
  id?: string
  name: string
  title: string
  goldsvetData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  description?: string | null
  supportedProviders?: Prisma.GameCreatesupportedProvidersInput | $Enums.GameProviderName[]
  category: $Enums.GameCategory
  tags?: Prisma.GameCreatetagsInput | string[]
  isActive?: boolean
  thumbnailUrl?: string | null
  bannerUrl?: string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
  featured?: boolean
  providerName?: string | null
  totalWagered?: number
  operatorId?: string | null
}

export type GameUpdateWithoutGameProviderInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  goldsvetData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  supportedProviders?: Prisma.GameUpdatesupportedProvidersInput | $Enums.GameProviderName[]
  category?: Prisma.EnumGameCategoryFieldUpdateOperationsInput | $Enums.GameCategory
  tags?: Prisma.GameUpdatetagsInput | string[]
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  thumbnailUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bannerUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  featured?: Prisma.BoolFieldUpdateOperationsInput | boolean
  providerName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  totalWagered?: Prisma.IntFieldUpdateOperationsInput | number
  gameSessions?: Prisma.GameSessionUpdateManyWithoutGameNestedInput
  gameLaunchLinks?: Prisma.GameLaunchLinkUpdateManyWithoutGameNestedInput
  operator?: Prisma.OperatorUpdateOneWithoutGamesNestedInput
  TournamentGame?: Prisma.TournamentGameUpdateManyWithoutGameNestedInput
}

export type GameUncheckedUpdateWithoutGameProviderInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  goldsvetData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  supportedProviders?: Prisma.GameUpdatesupportedProvidersInput | $Enums.GameProviderName[]
  category?: Prisma.EnumGameCategoryFieldUpdateOperationsInput | $Enums.GameCategory
  tags?: Prisma.GameUpdatetagsInput | string[]
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  thumbnailUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bannerUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  featured?: Prisma.BoolFieldUpdateOperationsInput | boolean
  providerName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  totalWagered?: Prisma.IntFieldUpdateOperationsInput | number
  operatorId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  gameSessions?: Prisma.GameSessionUncheckedUpdateManyWithoutGameNestedInput
  gameLaunchLinks?: Prisma.GameLaunchLinkUncheckedUpdateManyWithoutGameNestedInput
  TournamentGame?: Prisma.TournamentGameUncheckedUpdateManyWithoutGameNestedInput
}

export type GameUncheckedUpdateManyWithoutGameProviderInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  goldsvetData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  supportedProviders?: Prisma.GameUpdatesupportedProvidersInput | $Enums.GameProviderName[]
  category?: Prisma.EnumGameCategoryFieldUpdateOperationsInput | $Enums.GameCategory
  tags?: Prisma.GameUpdatetagsInput | string[]
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  thumbnailUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bannerUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  featured?: Prisma.BoolFieldUpdateOperationsInput | boolean
  providerName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  totalWagered?: Prisma.IntFieldUpdateOperationsInput | number
  operatorId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type GameCreateManyOperatorInput = {
  id?: string
  name: string
  title: string
  goldsvetData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  description?: string | null
  supportedProviders?: Prisma.GameCreatesupportedProvidersInput | $Enums.GameProviderName[]
  category: $Enums.GameCategory
  tags?: Prisma.GameCreatetagsInput | string[]
  isActive?: boolean
  thumbnailUrl?: string | null
  bannerUrl?: string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
  featured?: boolean
  providerName?: string | null
  totalWagered?: number
  gameProviderId?: string | null
}

export type GameUpdateWithoutOperatorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  goldsvetData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  supportedProviders?: Prisma.GameUpdatesupportedProvidersInput | $Enums.GameProviderName[]
  category?: Prisma.EnumGameCategoryFieldUpdateOperationsInput | $Enums.GameCategory
  tags?: Prisma.GameUpdatetagsInput | string[]
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  thumbnailUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bannerUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  featured?: Prisma.BoolFieldUpdateOperationsInput | boolean
  providerName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  totalWagered?: Prisma.IntFieldUpdateOperationsInput | number
  gameProvider?: Prisma.GameProviderUpdateOneWithoutGamesNestedInput
  gameSessions?: Prisma.GameSessionUpdateManyWithoutGameNestedInput
  gameLaunchLinks?: Prisma.GameLaunchLinkUpdateManyWithoutGameNestedInput
  TournamentGame?: Prisma.TournamentGameUpdateManyWithoutGameNestedInput
}

export type GameUncheckedUpdateWithoutOperatorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  goldsvetData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  supportedProviders?: Prisma.GameUpdatesupportedProvidersInput | $Enums.GameProviderName[]
  category?: Prisma.EnumGameCategoryFieldUpdateOperationsInput | $Enums.GameCategory
  tags?: Prisma.GameUpdatetagsInput | string[]
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  thumbnailUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bannerUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  featured?: Prisma.BoolFieldUpdateOperationsInput | boolean
  providerName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  totalWagered?: Prisma.IntFieldUpdateOperationsInput | number
  gameProviderId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  gameSessions?: Prisma.GameSessionUncheckedUpdateManyWithoutGameNestedInput
  gameLaunchLinks?: Prisma.GameLaunchLinkUncheckedUpdateManyWithoutGameNestedInput
  TournamentGame?: Prisma.TournamentGameUncheckedUpdateManyWithoutGameNestedInput
}

export type GameUncheckedUpdateManyWithoutOperatorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  goldsvetData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  supportedProviders?: Prisma.GameUpdatesupportedProvidersInput | $Enums.GameProviderName[]
  category?: Prisma.EnumGameCategoryFieldUpdateOperationsInput | $Enums.GameCategory
  tags?: Prisma.GameUpdatetagsInput | string[]
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  thumbnailUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bannerUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  meta?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  featured?: Prisma.BoolFieldUpdateOperationsInput | boolean
  providerName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  totalWagered?: Prisma.IntFieldUpdateOperationsInput | number
  gameProviderId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}


/**
 * Count Type GameCountOutputType
 */

export type GameCountOutputType = {
  gameSessions: number
  gameLaunchLinks: number
  TournamentGame: number
}

export type GameCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  gameSessions?: boolean | GameCountOutputTypeCountGameSessionsArgs
  gameLaunchLinks?: boolean | GameCountOutputTypeCountGameLaunchLinksArgs
  TournamentGame?: boolean | GameCountOutputTypeCountTournamentGameArgs
}

/**
 * GameCountOutputType without action
 */
export type GameCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameCountOutputType
   */
  select?: Prisma.GameCountOutputTypeSelect<ExtArgs> | null
}

/**
 * GameCountOutputType without action
 */
export type GameCountOutputTypeCountGameSessionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.GameSessionWhereInput
}

/**
 * GameCountOutputType without action
 */
export type GameCountOutputTypeCountGameLaunchLinksArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.GameLaunchLinkWhereInput
}

/**
 * GameCountOutputType without action
 */
export type GameCountOutputTypeCountTournamentGameArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TournamentGameWhereInput
}


export type GameSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  title?: boolean
  goldsvetData?: boolean
  description?: boolean
  supportedProviders?: boolean
  category?: boolean
  tags?: boolean
  isActive?: boolean
  thumbnailUrl?: boolean
  bannerUrl?: boolean
  meta?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  featured?: boolean
  providerName?: boolean
  totalWagered?: boolean
  gameProviderId?: boolean
  operatorId?: boolean
  gameProvider?: boolean | Prisma.Game$gameProviderArgs<ExtArgs>
  gameSessions?: boolean | Prisma.Game$gameSessionsArgs<ExtArgs>
  gameLaunchLinks?: boolean | Prisma.Game$gameLaunchLinksArgs<ExtArgs>
  operator?: boolean | Prisma.Game$operatorArgs<ExtArgs>
  TournamentGame?: boolean | Prisma.Game$TournamentGameArgs<ExtArgs>
  _count?: boolean | Prisma.GameCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["game"]>

export type GameSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  title?: boolean
  goldsvetData?: boolean
  description?: boolean
  supportedProviders?: boolean
  category?: boolean
  tags?: boolean
  isActive?: boolean
  thumbnailUrl?: boolean
  bannerUrl?: boolean
  meta?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  featured?: boolean
  providerName?: boolean
  totalWagered?: boolean
  gameProviderId?: boolean
  operatorId?: boolean
  gameProvider?: boolean | Prisma.Game$gameProviderArgs<ExtArgs>
  operator?: boolean | Prisma.Game$operatorArgs<ExtArgs>
}, ExtArgs["result"]["game"]>

export type GameSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  title?: boolean
  goldsvetData?: boolean
  description?: boolean
  supportedProviders?: boolean
  category?: boolean
  tags?: boolean
  isActive?: boolean
  thumbnailUrl?: boolean
  bannerUrl?: boolean
  meta?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  featured?: boolean
  providerName?: boolean
  totalWagered?: boolean
  gameProviderId?: boolean
  operatorId?: boolean
  gameProvider?: boolean | Prisma.Game$gameProviderArgs<ExtArgs>
  operator?: boolean | Prisma.Game$operatorArgs<ExtArgs>
}, ExtArgs["result"]["game"]>

export type GameSelectScalar = {
  id?: boolean
  name?: boolean
  title?: boolean
  goldsvetData?: boolean
  description?: boolean
  supportedProviders?: boolean
  category?: boolean
  tags?: boolean
  isActive?: boolean
  thumbnailUrl?: boolean
  bannerUrl?: boolean
  meta?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  featured?: boolean
  providerName?: boolean
  totalWagered?: boolean
  gameProviderId?: boolean
  operatorId?: boolean
}

export type GameOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "title" | "goldsvetData" | "description" | "supportedProviders" | "category" | "tags" | "isActive" | "thumbnailUrl" | "bannerUrl" | "meta" | "createdAt" | "updatedAt" | "featured" | "providerName" | "totalWagered" | "gameProviderId" | "operatorId", ExtArgs["result"]["game"]>
export type GameInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  gameProvider?: boolean | Prisma.Game$gameProviderArgs<ExtArgs>
  gameSessions?: boolean | Prisma.Game$gameSessionsArgs<ExtArgs>
  gameLaunchLinks?: boolean | Prisma.Game$gameLaunchLinksArgs<ExtArgs>
  operator?: boolean | Prisma.Game$operatorArgs<ExtArgs>
  TournamentGame?: boolean | Prisma.Game$TournamentGameArgs<ExtArgs>
  _count?: boolean | Prisma.GameCountOutputTypeDefaultArgs<ExtArgs>
}
export type GameIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  gameProvider?: boolean | Prisma.Game$gameProviderArgs<ExtArgs>
  operator?: boolean | Prisma.Game$operatorArgs<ExtArgs>
}
export type GameIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  gameProvider?: boolean | Prisma.Game$gameProviderArgs<ExtArgs>
  operator?: boolean | Prisma.Game$operatorArgs<ExtArgs>
}

export type $GamePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Game"
  objects: {
    gameProvider: Prisma.$GameProviderPayload<ExtArgs> | null
    gameSessions: Prisma.$GameSessionPayload<ExtArgs>[]
    gameLaunchLinks: Prisma.$GameLaunchLinkPayload<ExtArgs>[]
    operator: Prisma.$OperatorPayload<ExtArgs> | null
    TournamentGame: Prisma.$TournamentGamePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    title: string
    goldsvetData: runtime.JsonValue | null
    description: string | null
    supportedProviders: $Enums.GameProviderName[]
    category: $Enums.GameCategory
    tags: string[]
    isActive: boolean
    thumbnailUrl: string | null
    bannerUrl: string | null
    meta: runtime.JsonValue | null
    createdAt: Date
    updatedAt: Date
    featured: boolean
    providerName: string | null
    totalWagered: number
    gameProviderId: string | null
    operatorId: string | null
  }, ExtArgs["result"]["game"]>
  composites: {}
}

export type GameGetPayload<S extends boolean | null | undefined | GameDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$GamePayload, S>

export type GameCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<GameFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: GameCountAggregateInputType | true
  }

export interface GameDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Game'], meta: { name: 'Game' } }
  /**
   * Find zero or one Game that matches the filter.
   * @param {GameFindUniqueArgs} args - Arguments to find a Game
   * @example
   * // Get one Game
   * const game = await prisma.game.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends GameFindUniqueArgs>(args: Prisma.SelectSubset<T, GameFindUniqueArgs<ExtArgs>>): Prisma.Prisma__GameClient<runtime.Types.Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Game that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {GameFindUniqueOrThrowArgs} args - Arguments to find a Game
   * @example
   * // Get one Game
   * const game = await prisma.game.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends GameFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, GameFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__GameClient<runtime.Types.Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Game that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameFindFirstArgs} args - Arguments to find a Game
   * @example
   * // Get one Game
   * const game = await prisma.game.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends GameFindFirstArgs>(args?: Prisma.SelectSubset<T, GameFindFirstArgs<ExtArgs>>): Prisma.Prisma__GameClient<runtime.Types.Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Game that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameFindFirstOrThrowArgs} args - Arguments to find a Game
   * @example
   * // Get one Game
   * const game = await prisma.game.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends GameFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, GameFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__GameClient<runtime.Types.Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Games that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Games
   * const games = await prisma.game.findMany()
   * 
   * // Get first 10 Games
   * const games = await prisma.game.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const gameWithIdOnly = await prisma.game.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends GameFindManyArgs>(args?: Prisma.SelectSubset<T, GameFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Game.
   * @param {GameCreateArgs} args - Arguments to create a Game.
   * @example
   * // Create one Game
   * const Game = await prisma.game.create({
   *   data: {
   *     // ... data to create a Game
   *   }
   * })
   * 
   */
  create<T extends GameCreateArgs>(args: Prisma.SelectSubset<T, GameCreateArgs<ExtArgs>>): Prisma.Prisma__GameClient<runtime.Types.Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Games.
   * @param {GameCreateManyArgs} args - Arguments to create many Games.
   * @example
   * // Create many Games
   * const game = await prisma.game.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends GameCreateManyArgs>(args?: Prisma.SelectSubset<T, GameCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Games and returns the data saved in the database.
   * @param {GameCreateManyAndReturnArgs} args - Arguments to create many Games.
   * @example
   * // Create many Games
   * const game = await prisma.game.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Games and only return the `id`
   * const gameWithIdOnly = await prisma.game.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends GameCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, GameCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Game.
   * @param {GameDeleteArgs} args - Arguments to delete one Game.
   * @example
   * // Delete one Game
   * const Game = await prisma.game.delete({
   *   where: {
   *     // ... filter to delete one Game
   *   }
   * })
   * 
   */
  delete<T extends GameDeleteArgs>(args: Prisma.SelectSubset<T, GameDeleteArgs<ExtArgs>>): Prisma.Prisma__GameClient<runtime.Types.Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Game.
   * @param {GameUpdateArgs} args - Arguments to update one Game.
   * @example
   * // Update one Game
   * const game = await prisma.game.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends GameUpdateArgs>(args: Prisma.SelectSubset<T, GameUpdateArgs<ExtArgs>>): Prisma.Prisma__GameClient<runtime.Types.Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Games.
   * @param {GameDeleteManyArgs} args - Arguments to filter Games to delete.
   * @example
   * // Delete a few Games
   * const { count } = await prisma.game.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends GameDeleteManyArgs>(args?: Prisma.SelectSubset<T, GameDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Games.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Games
   * const game = await prisma.game.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends GameUpdateManyArgs>(args: Prisma.SelectSubset<T, GameUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Games and returns the data updated in the database.
   * @param {GameUpdateManyAndReturnArgs} args - Arguments to update many Games.
   * @example
   * // Update many Games
   * const game = await prisma.game.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Games and only return the `id`
   * const gameWithIdOnly = await prisma.game.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends GameUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, GameUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Game.
   * @param {GameUpsertArgs} args - Arguments to update or create a Game.
   * @example
   * // Update or create a Game
   * const game = await prisma.game.upsert({
   *   create: {
   *     // ... data to create a Game
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Game we want to update
   *   }
   * })
   */
  upsert<T extends GameUpsertArgs>(args: Prisma.SelectSubset<T, GameUpsertArgs<ExtArgs>>): Prisma.Prisma__GameClient<runtime.Types.Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Games.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameCountArgs} args - Arguments to filter Games to count.
   * @example
   * // Count the number of Games
   * const count = await prisma.game.count({
   *   where: {
   *     // ... the filter for the Games we want to count
   *   }
   * })
  **/
  count<T extends GameCountArgs>(
    args?: Prisma.Subset<T, GameCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], GameCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Game.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends GameAggregateArgs>(args: Prisma.Subset<T, GameAggregateArgs>): Prisma.PrismaPromise<GetGameAggregateType<T>>

  /**
   * Group by Game.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends GameGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: GameGroupByArgs['orderBy'] }
      : { orderBy?: GameGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, GameGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Game model
 */
readonly fields: GameFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Game.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__GameClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  gameProvider<T extends Prisma.Game$gameProviderArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Game$gameProviderArgs<ExtArgs>>): Prisma.Prisma__GameProviderClient<runtime.Types.Result.GetResult<Prisma.$GameProviderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  gameSessions<T extends Prisma.Game$gameSessionsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Game$gameSessionsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  gameLaunchLinks<T extends Prisma.Game$gameLaunchLinksArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Game$gameLaunchLinksArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GameLaunchLinkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  operator<T extends Prisma.Game$operatorArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Game$operatorArgs<ExtArgs>>): Prisma.Prisma__OperatorClient<runtime.Types.Result.GetResult<Prisma.$OperatorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  TournamentGame<T extends Prisma.Game$TournamentGameArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Game$TournamentGameArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TournamentGamePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Game model
 */
export interface GameFieldRefs {
  readonly id: Prisma.FieldRef<"Game", 'String'>
  readonly name: Prisma.FieldRef<"Game", 'String'>
  readonly title: Prisma.FieldRef<"Game", 'String'>
  readonly goldsvetData: Prisma.FieldRef<"Game", 'Json'>
  readonly description: Prisma.FieldRef<"Game", 'String'>
  readonly supportedProviders: Prisma.FieldRef<"Game", 'GameProviderName[]'>
  readonly category: Prisma.FieldRef<"Game", 'GameCategory'>
  readonly tags: Prisma.FieldRef<"Game", 'String[]'>
  readonly isActive: Prisma.FieldRef<"Game", 'Boolean'>
  readonly thumbnailUrl: Prisma.FieldRef<"Game", 'String'>
  readonly bannerUrl: Prisma.FieldRef<"Game", 'String'>
  readonly meta: Prisma.FieldRef<"Game", 'Json'>
  readonly createdAt: Prisma.FieldRef<"Game", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Game", 'DateTime'>
  readonly featured: Prisma.FieldRef<"Game", 'Boolean'>
  readonly providerName: Prisma.FieldRef<"Game", 'String'>
  readonly totalWagered: Prisma.FieldRef<"Game", 'Int'>
  readonly gameProviderId: Prisma.FieldRef<"Game", 'String'>
  readonly operatorId: Prisma.FieldRef<"Game", 'String'>
}
    

// Custom InputTypes
/**
 * Game findUnique
 */
export type GameFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Game
   */
  select?: Prisma.GameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Game
   */
  omit?: Prisma.GameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameInclude<ExtArgs> | null
  /**
   * Filter, which Game to fetch.
   */
  where: Prisma.GameWhereUniqueInput
}

/**
 * Game findUniqueOrThrow
 */
export type GameFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Game
   */
  select?: Prisma.GameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Game
   */
  omit?: Prisma.GameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameInclude<ExtArgs> | null
  /**
   * Filter, which Game to fetch.
   */
  where: Prisma.GameWhereUniqueInput
}

/**
 * Game findFirst
 */
export type GameFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Game
   */
  select?: Prisma.GameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Game
   */
  omit?: Prisma.GameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameInclude<ExtArgs> | null
  /**
   * Filter, which Game to fetch.
   */
  where?: Prisma.GameWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Games to fetch.
   */
  orderBy?: Prisma.GameOrderByWithRelationInput | Prisma.GameOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Games.
   */
  cursor?: Prisma.GameWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Games from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Games.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Games.
   */
  distinct?: Prisma.GameScalarFieldEnum | Prisma.GameScalarFieldEnum[]
}

/**
 * Game findFirstOrThrow
 */
export type GameFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Game
   */
  select?: Prisma.GameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Game
   */
  omit?: Prisma.GameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameInclude<ExtArgs> | null
  /**
   * Filter, which Game to fetch.
   */
  where?: Prisma.GameWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Games to fetch.
   */
  orderBy?: Prisma.GameOrderByWithRelationInput | Prisma.GameOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Games.
   */
  cursor?: Prisma.GameWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Games from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Games.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Games.
   */
  distinct?: Prisma.GameScalarFieldEnum | Prisma.GameScalarFieldEnum[]
}

/**
 * Game findMany
 */
export type GameFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Game
   */
  select?: Prisma.GameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Game
   */
  omit?: Prisma.GameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameInclude<ExtArgs> | null
  /**
   * Filter, which Games to fetch.
   */
  where?: Prisma.GameWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Games to fetch.
   */
  orderBy?: Prisma.GameOrderByWithRelationInput | Prisma.GameOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Games.
   */
  cursor?: Prisma.GameWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Games from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Games.
   */
  skip?: number
  distinct?: Prisma.GameScalarFieldEnum | Prisma.GameScalarFieldEnum[]
}

/**
 * Game create
 */
export type GameCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Game
   */
  select?: Prisma.GameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Game
   */
  omit?: Prisma.GameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameInclude<ExtArgs> | null
  /**
   * The data needed to create a Game.
   */
  data: Prisma.XOR<Prisma.GameCreateInput, Prisma.GameUncheckedCreateInput>
}

/**
 * Game createMany
 */
export type GameCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Games.
   */
  data: Prisma.GameCreateManyInput | Prisma.GameCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Game createManyAndReturn
 */
export type GameCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Game
   */
  select?: Prisma.GameSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Game
   */
  omit?: Prisma.GameOmit<ExtArgs> | null
  /**
   * The data used to create many Games.
   */
  data: Prisma.GameCreateManyInput | Prisma.GameCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Game update
 */
export type GameUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Game
   */
  select?: Prisma.GameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Game
   */
  omit?: Prisma.GameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameInclude<ExtArgs> | null
  /**
   * The data needed to update a Game.
   */
  data: Prisma.XOR<Prisma.GameUpdateInput, Prisma.GameUncheckedUpdateInput>
  /**
   * Choose, which Game to update.
   */
  where: Prisma.GameWhereUniqueInput
}

/**
 * Game updateMany
 */
export type GameUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Games.
   */
  data: Prisma.XOR<Prisma.GameUpdateManyMutationInput, Prisma.GameUncheckedUpdateManyInput>
  /**
   * Filter which Games to update
   */
  where?: Prisma.GameWhereInput
  /**
   * Limit how many Games to update.
   */
  limit?: number
}

/**
 * Game updateManyAndReturn
 */
export type GameUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Game
   */
  select?: Prisma.GameSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Game
   */
  omit?: Prisma.GameOmit<ExtArgs> | null
  /**
   * The data used to update Games.
   */
  data: Prisma.XOR<Prisma.GameUpdateManyMutationInput, Prisma.GameUncheckedUpdateManyInput>
  /**
   * Filter which Games to update
   */
  where?: Prisma.GameWhereInput
  /**
   * Limit how many Games to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Game upsert
 */
export type GameUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Game
   */
  select?: Prisma.GameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Game
   */
  omit?: Prisma.GameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameInclude<ExtArgs> | null
  /**
   * The filter to search for the Game to update in case it exists.
   */
  where: Prisma.GameWhereUniqueInput
  /**
   * In case the Game found by the `where` argument doesn't exist, create a new Game with this data.
   */
  create: Prisma.XOR<Prisma.GameCreateInput, Prisma.GameUncheckedCreateInput>
  /**
   * In case the Game was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.GameUpdateInput, Prisma.GameUncheckedUpdateInput>
}

/**
 * Game delete
 */
export type GameDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Game
   */
  select?: Prisma.GameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Game
   */
  omit?: Prisma.GameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameInclude<ExtArgs> | null
  /**
   * Filter which Game to delete.
   */
  where: Prisma.GameWhereUniqueInput
}

/**
 * Game deleteMany
 */
export type GameDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Games to delete
   */
  where?: Prisma.GameWhereInput
  /**
   * Limit how many Games to delete.
   */
  limit?: number
}

/**
 * Game.gameProvider
 */
export type Game$gameProviderArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameProvider
   */
  select?: Prisma.GameProviderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameProvider
   */
  omit?: Prisma.GameProviderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameProviderInclude<ExtArgs> | null
  where?: Prisma.GameProviderWhereInput
}

/**
 * Game.gameSessions
 */
export type Game$gameSessionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSession
   */
  select?: Prisma.GameSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameSession
   */
  omit?: Prisma.GameSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameSessionInclude<ExtArgs> | null
  where?: Prisma.GameSessionWhereInput
  orderBy?: Prisma.GameSessionOrderByWithRelationInput | Prisma.GameSessionOrderByWithRelationInput[]
  cursor?: Prisma.GameSessionWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.GameSessionScalarFieldEnum | Prisma.GameSessionScalarFieldEnum[]
}

/**
 * Game.gameLaunchLinks
 */
export type Game$gameLaunchLinksArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameLaunchLink
   */
  select?: Prisma.GameLaunchLinkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameLaunchLink
   */
  omit?: Prisma.GameLaunchLinkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameLaunchLinkInclude<ExtArgs> | null
  where?: Prisma.GameLaunchLinkWhereInput
  orderBy?: Prisma.GameLaunchLinkOrderByWithRelationInput | Prisma.GameLaunchLinkOrderByWithRelationInput[]
  cursor?: Prisma.GameLaunchLinkWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.GameLaunchLinkScalarFieldEnum | Prisma.GameLaunchLinkScalarFieldEnum[]
}

/**
 * Game.operator
 */
export type Game$operatorArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Operator
   */
  select?: Prisma.OperatorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Operator
   */
  omit?: Prisma.OperatorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OperatorInclude<ExtArgs> | null
  where?: Prisma.OperatorWhereInput
}

/**
 * Game.TournamentGame
 */
export type Game$TournamentGameArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TournamentGame
   */
  select?: Prisma.TournamentGameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TournamentGame
   */
  omit?: Prisma.TournamentGameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TournamentGameInclude<ExtArgs> | null
  where?: Prisma.TournamentGameWhereInput
  orderBy?: Prisma.TournamentGameOrderByWithRelationInput | Prisma.TournamentGameOrderByWithRelationInput[]
  cursor?: Prisma.TournamentGameWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TournamentGameScalarFieldEnum | Prisma.TournamentGameScalarFieldEnum[]
}

/**
 * Game without action
 */
export type GameDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Game
   */
  select?: Prisma.GameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Game
   */
  omit?: Prisma.GameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameInclude<ExtArgs> | null
}
