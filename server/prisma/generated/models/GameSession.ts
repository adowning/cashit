
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `GameSession` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model GameSession
 * 
 */
export type GameSessionModel = runtime.Types.Result.DefaultSelection<Prisma.$GameSessionPayload>

export type AggregateGameSession = {
  _count: GameSessionCountAggregateOutputType | null
  _avg: GameSessionAvgAggregateOutputType | null
  _sum: GameSessionSumAggregateOutputType | null
  _min: GameSessionMinAggregateOutputType | null
  _max: GameSessionMaxAggregateOutputType | null
}

export type GameSessionAvgAggregateOutputType = {
  startingBalance: number | null
  startingTotalXp: number | null
  totalWagered: number | null
  totalWon: number | null
}

export type GameSessionSumAggregateOutputType = {
  startingBalance: number | null
  startingTotalXp: number | null
  totalWagered: number | null
  totalWon: number | null
}

export type GameSessionMinAggregateOutputType = {
  id: string | null
  isActive: boolean | null
  authSessionId: string | null
  currencyId: string | null
  startedAt: Date | null
  endTime: Date | null
  startTime: Date | null
  ipAddress: string | null
  startingBalance: number | null
  startingTotalXp: number | null
  userAgent: string | null
  createdAt: Date | null
  updatedAt: Date | null
  totalWagered: number | null
  totalWon: number | null
  userId: string | null
  gameId: string | null
  rtgToken: string | null
  rtgFingerPrint: string | null
  profileId: string | null
}

export type GameSessionMaxAggregateOutputType = {
  id: string | null
  isActive: boolean | null
  authSessionId: string | null
  currencyId: string | null
  startedAt: Date | null
  endTime: Date | null
  startTime: Date | null
  ipAddress: string | null
  startingBalance: number | null
  startingTotalXp: number | null
  userAgent: string | null
  createdAt: Date | null
  updatedAt: Date | null
  totalWagered: number | null
  totalWon: number | null
  userId: string | null
  gameId: string | null
  rtgToken: string | null
  rtgFingerPrint: string | null
  profileId: string | null
}

export type GameSessionCountAggregateOutputType = {
  id: number
  isActive: number
  sessionData: number
  authSessionId: number
  currencyId: number
  startedAt: number
  endTime: number
  startTime: number
  ipAddress: number
  startingBalance: number
  startingTotalXp: number
  userAgent: number
  createdAt: number
  updatedAt: number
  totalWagered: number
  totalWon: number
  userId: number
  gameId: number
  rtgToken: number
  rtgFingerPrint: number
  profileId: number
  _all: number
}


export type GameSessionAvgAggregateInputType = {
  startingBalance?: true
  startingTotalXp?: true
  totalWagered?: true
  totalWon?: true
}

export type GameSessionSumAggregateInputType = {
  startingBalance?: true
  startingTotalXp?: true
  totalWagered?: true
  totalWon?: true
}

export type GameSessionMinAggregateInputType = {
  id?: true
  isActive?: true
  authSessionId?: true
  currencyId?: true
  startedAt?: true
  endTime?: true
  startTime?: true
  ipAddress?: true
  startingBalance?: true
  startingTotalXp?: true
  userAgent?: true
  createdAt?: true
  updatedAt?: true
  totalWagered?: true
  totalWon?: true
  userId?: true
  gameId?: true
  rtgToken?: true
  rtgFingerPrint?: true
  profileId?: true
}

export type GameSessionMaxAggregateInputType = {
  id?: true
  isActive?: true
  authSessionId?: true
  currencyId?: true
  startedAt?: true
  endTime?: true
  startTime?: true
  ipAddress?: true
  startingBalance?: true
  startingTotalXp?: true
  userAgent?: true
  createdAt?: true
  updatedAt?: true
  totalWagered?: true
  totalWon?: true
  userId?: true
  gameId?: true
  rtgToken?: true
  rtgFingerPrint?: true
  profileId?: true
}

export type GameSessionCountAggregateInputType = {
  id?: true
  isActive?: true
  sessionData?: true
  authSessionId?: true
  currencyId?: true
  startedAt?: true
  endTime?: true
  startTime?: true
  ipAddress?: true
  startingBalance?: true
  startingTotalXp?: true
  userAgent?: true
  createdAt?: true
  updatedAt?: true
  totalWagered?: true
  totalWon?: true
  userId?: true
  gameId?: true
  rtgToken?: true
  rtgFingerPrint?: true
  profileId?: true
  _all?: true
}

export type GameSessionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which GameSession to aggregate.
   */
  where?: Prisma.GameSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of GameSessions to fetch.
   */
  orderBy?: Prisma.GameSessionOrderByWithRelationInput | Prisma.GameSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.GameSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` GameSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` GameSessions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned GameSessions
  **/
  _count?: true | GameSessionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: GameSessionAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: GameSessionSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: GameSessionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: GameSessionMaxAggregateInputType
}

export type GetGameSessionAggregateType<T extends GameSessionAggregateArgs> = {
      [P in keyof T & keyof AggregateGameSession]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateGameSession[P]>
    : Prisma.GetScalarType<T[P], AggregateGameSession[P]>
}




export type GameSessionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.GameSessionWhereInput
  orderBy?: Prisma.GameSessionOrderByWithAggregationInput | Prisma.GameSessionOrderByWithAggregationInput[]
  by: Prisma.GameSessionScalarFieldEnum[] | Prisma.GameSessionScalarFieldEnum
  having?: Prisma.GameSessionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: GameSessionCountAggregateInputType | true
  _avg?: GameSessionAvgAggregateInputType
  _sum?: GameSessionSumAggregateInputType
  _min?: GameSessionMinAggregateInputType
  _max?: GameSessionMaxAggregateInputType
}

export type GameSessionGroupByOutputType = {
  id: string
  isActive: boolean
  sessionData: runtime.JsonValue | null
  authSessionId: string | null
  currencyId: string | null
  startedAt: Date
  endTime: Date | null
  startTime: Date | null
  ipAddress: string | null
  startingBalance: number | null
  startingTotalXp: number | null
  userAgent: string | null
  createdAt: Date
  updatedAt: Date
  totalWagered: number
  totalWon: number
  userId: string
  gameId: string
  rtgToken: string | null
  rtgFingerPrint: string | null
  profileId: string | null
  _count: GameSessionCountAggregateOutputType | null
  _avg: GameSessionAvgAggregateOutputType | null
  _sum: GameSessionSumAggregateOutputType | null
  _min: GameSessionMinAggregateOutputType | null
  _max: GameSessionMaxAggregateOutputType | null
}

type GetGameSessionGroupByPayload<T extends GameSessionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<GameSessionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof GameSessionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], GameSessionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], GameSessionGroupByOutputType[P]>
      }
    >
  > 



export type GameSessionWhereInput = {
  AND?: Prisma.GameSessionWhereInput | Prisma.GameSessionWhereInput[]
  OR?: Prisma.GameSessionWhereInput[]
  NOT?: Prisma.GameSessionWhereInput | Prisma.GameSessionWhereInput[]
  id?: Prisma.StringFilter<"GameSession"> | string
  isActive?: Prisma.BoolFilter<"GameSession"> | boolean
  sessionData?: Prisma.JsonNullableFilter<"GameSession">
  authSessionId?: Prisma.StringNullableFilter<"GameSession"> | string | null
  currencyId?: Prisma.StringNullableFilter<"GameSession"> | string | null
  startedAt?: Prisma.DateTimeFilter<"GameSession"> | Date | string
  endTime?: Prisma.DateTimeNullableFilter<"GameSession"> | Date | string | null
  startTime?: Prisma.DateTimeNullableFilter<"GameSession"> | Date | string | null
  ipAddress?: Prisma.StringNullableFilter<"GameSession"> | string | null
  startingBalance?: Prisma.IntNullableFilter<"GameSession"> | number | null
  startingTotalXp?: Prisma.IntNullableFilter<"GameSession"> | number | null
  userAgent?: Prisma.StringNullableFilter<"GameSession"> | string | null
  createdAt?: Prisma.DateTimeFilter<"GameSession"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"GameSession"> | Date | string
  totalWagered?: Prisma.IntFilter<"GameSession"> | number
  totalWon?: Prisma.IntFilter<"GameSession"> | number
  userId?: Prisma.StringFilter<"GameSession"> | string
  gameId?: Prisma.StringFilter<"GameSession"> | string
  rtgToken?: Prisma.StringNullableFilter<"GameSession"> | string | null
  rtgFingerPrint?: Prisma.StringNullableFilter<"GameSession"> | string | null
  profileId?: Prisma.StringNullableFilter<"GameSession"> | string | null
  spins?: Prisma.GameSpinListRelationFilter
  refferenceToUserProfile?: Prisma.XOR<Prisma.UserProfileScalarRelationFilter, Prisma.UserProfileWhereInput>
  game?: Prisma.XOR<Prisma.GameScalarRelationFilter, Prisma.GameWhereInput>
  UserProfile?: Prisma.UserProfileListRelationFilter
}

export type GameSessionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  sessionData?: Prisma.SortOrderInput | Prisma.SortOrder
  authSessionId?: Prisma.SortOrderInput | Prisma.SortOrder
  currencyId?: Prisma.SortOrderInput | Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  endTime?: Prisma.SortOrderInput | Prisma.SortOrder
  startTime?: Prisma.SortOrderInput | Prisma.SortOrder
  ipAddress?: Prisma.SortOrderInput | Prisma.SortOrder
  startingBalance?: Prisma.SortOrderInput | Prisma.SortOrder
  startingTotalXp?: Prisma.SortOrderInput | Prisma.SortOrder
  userAgent?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  totalWagered?: Prisma.SortOrder
  totalWon?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  gameId?: Prisma.SortOrder
  rtgToken?: Prisma.SortOrderInput | Prisma.SortOrder
  rtgFingerPrint?: Prisma.SortOrderInput | Prisma.SortOrder
  profileId?: Prisma.SortOrderInput | Prisma.SortOrder
  spins?: Prisma.GameSpinOrderByRelationAggregateInput
  refferenceToUserProfile?: Prisma.UserProfileOrderByWithRelationInput
  game?: Prisma.GameOrderByWithRelationInput
  UserProfile?: Prisma.UserProfileOrderByRelationAggregateInput
}

export type GameSessionWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.GameSessionWhereInput | Prisma.GameSessionWhereInput[]
  OR?: Prisma.GameSessionWhereInput[]
  NOT?: Prisma.GameSessionWhereInput | Prisma.GameSessionWhereInput[]
  isActive?: Prisma.BoolFilter<"GameSession"> | boolean
  sessionData?: Prisma.JsonNullableFilter<"GameSession">
  authSessionId?: Prisma.StringNullableFilter<"GameSession"> | string | null
  currencyId?: Prisma.StringNullableFilter<"GameSession"> | string | null
  startedAt?: Prisma.DateTimeFilter<"GameSession"> | Date | string
  endTime?: Prisma.DateTimeNullableFilter<"GameSession"> | Date | string | null
  startTime?: Prisma.DateTimeNullableFilter<"GameSession"> | Date | string | null
  ipAddress?: Prisma.StringNullableFilter<"GameSession"> | string | null
  startingBalance?: Prisma.IntNullableFilter<"GameSession"> | number | null
  startingTotalXp?: Prisma.IntNullableFilter<"GameSession"> | number | null
  userAgent?: Prisma.StringNullableFilter<"GameSession"> | string | null
  createdAt?: Prisma.DateTimeFilter<"GameSession"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"GameSession"> | Date | string
  totalWagered?: Prisma.IntFilter<"GameSession"> | number
  totalWon?: Prisma.IntFilter<"GameSession"> | number
  userId?: Prisma.StringFilter<"GameSession"> | string
  gameId?: Prisma.StringFilter<"GameSession"> | string
  rtgToken?: Prisma.StringNullableFilter<"GameSession"> | string | null
  rtgFingerPrint?: Prisma.StringNullableFilter<"GameSession"> | string | null
  profileId?: Prisma.StringNullableFilter<"GameSession"> | string | null
  spins?: Prisma.GameSpinListRelationFilter
  refferenceToUserProfile?: Prisma.XOR<Prisma.UserProfileScalarRelationFilter, Prisma.UserProfileWhereInput>
  game?: Prisma.XOR<Prisma.GameScalarRelationFilter, Prisma.GameWhereInput>
  UserProfile?: Prisma.UserProfileListRelationFilter
}, "id">

export type GameSessionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  sessionData?: Prisma.SortOrderInput | Prisma.SortOrder
  authSessionId?: Prisma.SortOrderInput | Prisma.SortOrder
  currencyId?: Prisma.SortOrderInput | Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  endTime?: Prisma.SortOrderInput | Prisma.SortOrder
  startTime?: Prisma.SortOrderInput | Prisma.SortOrder
  ipAddress?: Prisma.SortOrderInput | Prisma.SortOrder
  startingBalance?: Prisma.SortOrderInput | Prisma.SortOrder
  startingTotalXp?: Prisma.SortOrderInput | Prisma.SortOrder
  userAgent?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  totalWagered?: Prisma.SortOrder
  totalWon?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  gameId?: Prisma.SortOrder
  rtgToken?: Prisma.SortOrderInput | Prisma.SortOrder
  rtgFingerPrint?: Prisma.SortOrderInput | Prisma.SortOrder
  profileId?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.GameSessionCountOrderByAggregateInput
  _avg?: Prisma.GameSessionAvgOrderByAggregateInput
  _max?: Prisma.GameSessionMaxOrderByAggregateInput
  _min?: Prisma.GameSessionMinOrderByAggregateInput
  _sum?: Prisma.GameSessionSumOrderByAggregateInput
}

export type GameSessionScalarWhereWithAggregatesInput = {
  AND?: Prisma.GameSessionScalarWhereWithAggregatesInput | Prisma.GameSessionScalarWhereWithAggregatesInput[]
  OR?: Prisma.GameSessionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.GameSessionScalarWhereWithAggregatesInput | Prisma.GameSessionScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"GameSession"> | string
  isActive?: Prisma.BoolWithAggregatesFilter<"GameSession"> | boolean
  sessionData?: Prisma.JsonNullableWithAggregatesFilter<"GameSession">
  authSessionId?: Prisma.StringNullableWithAggregatesFilter<"GameSession"> | string | null
  currencyId?: Prisma.StringNullableWithAggregatesFilter<"GameSession"> | string | null
  startedAt?: Prisma.DateTimeWithAggregatesFilter<"GameSession"> | Date | string
  endTime?: Prisma.DateTimeNullableWithAggregatesFilter<"GameSession"> | Date | string | null
  startTime?: Prisma.DateTimeNullableWithAggregatesFilter<"GameSession"> | Date | string | null
  ipAddress?: Prisma.StringNullableWithAggregatesFilter<"GameSession"> | string | null
  startingBalance?: Prisma.IntNullableWithAggregatesFilter<"GameSession"> | number | null
  startingTotalXp?: Prisma.IntNullableWithAggregatesFilter<"GameSession"> | number | null
  userAgent?: Prisma.StringNullableWithAggregatesFilter<"GameSession"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"GameSession"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"GameSession"> | Date | string
  totalWagered?: Prisma.IntWithAggregatesFilter<"GameSession"> | number
  totalWon?: Prisma.IntWithAggregatesFilter<"GameSession"> | number
  userId?: Prisma.StringWithAggregatesFilter<"GameSession"> | string
  gameId?: Prisma.StringWithAggregatesFilter<"GameSession"> | string
  rtgToken?: Prisma.StringNullableWithAggregatesFilter<"GameSession"> | string | null
  rtgFingerPrint?: Prisma.StringNullableWithAggregatesFilter<"GameSession"> | string | null
  profileId?: Prisma.StringNullableWithAggregatesFilter<"GameSession"> | string | null
}

export type GameSessionCreateInput = {
  id?: string
  isActive?: boolean
  sessionData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  authSessionId?: string | null
  currencyId?: string | null
  startedAt?: Date | string
  endTime?: Date | string | null
  startTime?: Date | string | null
  ipAddress?: string | null
  startingBalance?: number | null
  startingTotalXp?: number | null
  userAgent?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  totalWagered?: number
  totalWon?: number
  rtgToken?: string | null
  rtgFingerPrint?: string | null
  profileId?: string | null
  spins?: Prisma.GameSpinCreateNestedManyWithoutGameSessionInput
  refferenceToUserProfile: Prisma.UserProfileCreateNestedOneWithoutPastGameSessionsInput
  game: Prisma.GameCreateNestedOneWithoutGameSessionsInput
  UserProfile?: Prisma.UserProfileCreateNestedManyWithoutCurrentGameSessionInput
}

export type GameSessionUncheckedCreateInput = {
  id?: string
  isActive?: boolean
  sessionData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  authSessionId?: string | null
  currencyId?: string | null
  startedAt?: Date | string
  endTime?: Date | string | null
  startTime?: Date | string | null
  ipAddress?: string | null
  startingBalance?: number | null
  startingTotalXp?: number | null
  userAgent?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  totalWagered?: number
  totalWon?: number
  userId: string
  gameId: string
  rtgToken?: string | null
  rtgFingerPrint?: string | null
  profileId?: string | null
  spins?: Prisma.GameSpinUncheckedCreateNestedManyWithoutGameSessionInput
  UserProfile?: Prisma.UserProfileUncheckedCreateNestedManyWithoutCurrentGameSessionInput
}

export type GameSessionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  sessionData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  authSessionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  currencyId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  startTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  ipAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startingBalance?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  startingTotalXp?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  userAgent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  totalWagered?: Prisma.IntFieldUpdateOperationsInput | number
  totalWon?: Prisma.IntFieldUpdateOperationsInput | number
  rtgToken?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rtgFingerPrint?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  profileId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  spins?: Prisma.GameSpinUpdateManyWithoutGameSessionNestedInput
  refferenceToUserProfile?: Prisma.UserProfileUpdateOneRequiredWithoutPastGameSessionsNestedInput
  game?: Prisma.GameUpdateOneRequiredWithoutGameSessionsNestedInput
  UserProfile?: Prisma.UserProfileUpdateManyWithoutCurrentGameSessionNestedInput
}

export type GameSessionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  sessionData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  authSessionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  currencyId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  startTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  ipAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startingBalance?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  startingTotalXp?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  userAgent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  totalWagered?: Prisma.IntFieldUpdateOperationsInput | number
  totalWon?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  gameId?: Prisma.StringFieldUpdateOperationsInput | string
  rtgToken?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rtgFingerPrint?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  profileId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  spins?: Prisma.GameSpinUncheckedUpdateManyWithoutGameSessionNestedInput
  UserProfile?: Prisma.UserProfileUncheckedUpdateManyWithoutCurrentGameSessionNestedInput
}

export type GameSessionCreateManyInput = {
  id?: string
  isActive?: boolean
  sessionData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  authSessionId?: string | null
  currencyId?: string | null
  startedAt?: Date | string
  endTime?: Date | string | null
  startTime?: Date | string | null
  ipAddress?: string | null
  startingBalance?: number | null
  startingTotalXp?: number | null
  userAgent?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  totalWagered?: number
  totalWon?: number
  userId: string
  gameId: string
  rtgToken?: string | null
  rtgFingerPrint?: string | null
  profileId?: string | null
}

export type GameSessionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  sessionData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  authSessionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  currencyId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  startTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  ipAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startingBalance?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  startingTotalXp?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  userAgent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  totalWagered?: Prisma.IntFieldUpdateOperationsInput | number
  totalWon?: Prisma.IntFieldUpdateOperationsInput | number
  rtgToken?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rtgFingerPrint?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  profileId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type GameSessionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  sessionData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  authSessionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  currencyId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  startTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  ipAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startingBalance?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  startingTotalXp?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  userAgent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  totalWagered?: Prisma.IntFieldUpdateOperationsInput | number
  totalWon?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  gameId?: Prisma.StringFieldUpdateOperationsInput | string
  rtgToken?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rtgFingerPrint?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  profileId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type GameSessionListRelationFilter = {
  every?: Prisma.GameSessionWhereInput
  some?: Prisma.GameSessionWhereInput
  none?: Prisma.GameSessionWhereInput
}

export type GameSessionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type GameSessionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  sessionData?: Prisma.SortOrder
  authSessionId?: Prisma.SortOrder
  currencyId?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  endTime?: Prisma.SortOrder
  startTime?: Prisma.SortOrder
  ipAddress?: Prisma.SortOrder
  startingBalance?: Prisma.SortOrder
  startingTotalXp?: Prisma.SortOrder
  userAgent?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  totalWagered?: Prisma.SortOrder
  totalWon?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  gameId?: Prisma.SortOrder
  rtgToken?: Prisma.SortOrder
  rtgFingerPrint?: Prisma.SortOrder
  profileId?: Prisma.SortOrder
}

export type GameSessionAvgOrderByAggregateInput = {
  startingBalance?: Prisma.SortOrder
  startingTotalXp?: Prisma.SortOrder
  totalWagered?: Prisma.SortOrder
  totalWon?: Prisma.SortOrder
}

export type GameSessionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  authSessionId?: Prisma.SortOrder
  currencyId?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  endTime?: Prisma.SortOrder
  startTime?: Prisma.SortOrder
  ipAddress?: Prisma.SortOrder
  startingBalance?: Prisma.SortOrder
  startingTotalXp?: Prisma.SortOrder
  userAgent?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  totalWagered?: Prisma.SortOrder
  totalWon?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  gameId?: Prisma.SortOrder
  rtgToken?: Prisma.SortOrder
  rtgFingerPrint?: Prisma.SortOrder
  profileId?: Prisma.SortOrder
}

export type GameSessionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  authSessionId?: Prisma.SortOrder
  currencyId?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  endTime?: Prisma.SortOrder
  startTime?: Prisma.SortOrder
  ipAddress?: Prisma.SortOrder
  startingBalance?: Prisma.SortOrder
  startingTotalXp?: Prisma.SortOrder
  userAgent?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  totalWagered?: Prisma.SortOrder
  totalWon?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  gameId?: Prisma.SortOrder
  rtgToken?: Prisma.SortOrder
  rtgFingerPrint?: Prisma.SortOrder
  profileId?: Prisma.SortOrder
}

export type GameSessionSumOrderByAggregateInput = {
  startingBalance?: Prisma.SortOrder
  startingTotalXp?: Prisma.SortOrder
  totalWagered?: Prisma.SortOrder
  totalWon?: Prisma.SortOrder
}

export type GameSessionScalarRelationFilter = {
  is?: Prisma.GameSessionWhereInput
  isNot?: Prisma.GameSessionWhereInput
}

export type GameSessionNullableScalarRelationFilter = {
  is?: Prisma.GameSessionWhereInput | null
  isNot?: Prisma.GameSessionWhereInput | null
}

export type GameSessionCreateNestedManyWithoutGameInput = {
  create?: Prisma.XOR<Prisma.GameSessionCreateWithoutGameInput, Prisma.GameSessionUncheckedCreateWithoutGameInput> | Prisma.GameSessionCreateWithoutGameInput[] | Prisma.GameSessionUncheckedCreateWithoutGameInput[]
  connectOrCreate?: Prisma.GameSessionCreateOrConnectWithoutGameInput | Prisma.GameSessionCreateOrConnectWithoutGameInput[]
  createMany?: Prisma.GameSessionCreateManyGameInputEnvelope
  connect?: Prisma.GameSessionWhereUniqueInput | Prisma.GameSessionWhereUniqueInput[]
}

export type GameSessionUncheckedCreateNestedManyWithoutGameInput = {
  create?: Prisma.XOR<Prisma.GameSessionCreateWithoutGameInput, Prisma.GameSessionUncheckedCreateWithoutGameInput> | Prisma.GameSessionCreateWithoutGameInput[] | Prisma.GameSessionUncheckedCreateWithoutGameInput[]
  connectOrCreate?: Prisma.GameSessionCreateOrConnectWithoutGameInput | Prisma.GameSessionCreateOrConnectWithoutGameInput[]
  createMany?: Prisma.GameSessionCreateManyGameInputEnvelope
  connect?: Prisma.GameSessionWhereUniqueInput | Prisma.GameSessionWhereUniqueInput[]
}

export type GameSessionUpdateManyWithoutGameNestedInput = {
  create?: Prisma.XOR<Prisma.GameSessionCreateWithoutGameInput, Prisma.GameSessionUncheckedCreateWithoutGameInput> | Prisma.GameSessionCreateWithoutGameInput[] | Prisma.GameSessionUncheckedCreateWithoutGameInput[]
  connectOrCreate?: Prisma.GameSessionCreateOrConnectWithoutGameInput | Prisma.GameSessionCreateOrConnectWithoutGameInput[]
  upsert?: Prisma.GameSessionUpsertWithWhereUniqueWithoutGameInput | Prisma.GameSessionUpsertWithWhereUniqueWithoutGameInput[]
  createMany?: Prisma.GameSessionCreateManyGameInputEnvelope
  set?: Prisma.GameSessionWhereUniqueInput | Prisma.GameSessionWhereUniqueInput[]
  disconnect?: Prisma.GameSessionWhereUniqueInput | Prisma.GameSessionWhereUniqueInput[]
  delete?: Prisma.GameSessionWhereUniqueInput | Prisma.GameSessionWhereUniqueInput[]
  connect?: Prisma.GameSessionWhereUniqueInput | Prisma.GameSessionWhereUniqueInput[]
  update?: Prisma.GameSessionUpdateWithWhereUniqueWithoutGameInput | Prisma.GameSessionUpdateWithWhereUniqueWithoutGameInput[]
  updateMany?: Prisma.GameSessionUpdateManyWithWhereWithoutGameInput | Prisma.GameSessionUpdateManyWithWhereWithoutGameInput[]
  deleteMany?: Prisma.GameSessionScalarWhereInput | Prisma.GameSessionScalarWhereInput[]
}

export type GameSessionUncheckedUpdateManyWithoutGameNestedInput = {
  create?: Prisma.XOR<Prisma.GameSessionCreateWithoutGameInput, Prisma.GameSessionUncheckedCreateWithoutGameInput> | Prisma.GameSessionCreateWithoutGameInput[] | Prisma.GameSessionUncheckedCreateWithoutGameInput[]
  connectOrCreate?: Prisma.GameSessionCreateOrConnectWithoutGameInput | Prisma.GameSessionCreateOrConnectWithoutGameInput[]
  upsert?: Prisma.GameSessionUpsertWithWhereUniqueWithoutGameInput | Prisma.GameSessionUpsertWithWhereUniqueWithoutGameInput[]
  createMany?: Prisma.GameSessionCreateManyGameInputEnvelope
  set?: Prisma.GameSessionWhereUniqueInput | Prisma.GameSessionWhereUniqueInput[]
  disconnect?: Prisma.GameSessionWhereUniqueInput | Prisma.GameSessionWhereUniqueInput[]
  delete?: Prisma.GameSessionWhereUniqueInput | Prisma.GameSessionWhereUniqueInput[]
  connect?: Prisma.GameSessionWhereUniqueInput | Prisma.GameSessionWhereUniqueInput[]
  update?: Prisma.GameSessionUpdateWithWhereUniqueWithoutGameInput | Prisma.GameSessionUpdateWithWhereUniqueWithoutGameInput[]
  updateMany?: Prisma.GameSessionUpdateManyWithWhereWithoutGameInput | Prisma.GameSessionUpdateManyWithWhereWithoutGameInput[]
  deleteMany?: Prisma.GameSessionScalarWhereInput | Prisma.GameSessionScalarWhereInput[]
}

export type NullableIntFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type GameSessionCreateNestedOneWithoutSpinsInput = {
  create?: Prisma.XOR<Prisma.GameSessionCreateWithoutSpinsInput, Prisma.GameSessionUncheckedCreateWithoutSpinsInput>
  connectOrCreate?: Prisma.GameSessionCreateOrConnectWithoutSpinsInput
  connect?: Prisma.GameSessionWhereUniqueInput
}

export type GameSessionUpdateOneRequiredWithoutSpinsNestedInput = {
  create?: Prisma.XOR<Prisma.GameSessionCreateWithoutSpinsInput, Prisma.GameSessionUncheckedCreateWithoutSpinsInput>
  connectOrCreate?: Prisma.GameSessionCreateOrConnectWithoutSpinsInput
  upsert?: Prisma.GameSessionUpsertWithoutSpinsInput
  connect?: Prisma.GameSessionWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.GameSessionUpdateToOneWithWhereWithoutSpinsInput, Prisma.GameSessionUpdateWithoutSpinsInput>, Prisma.GameSessionUncheckedUpdateWithoutSpinsInput>
}

export type GameSessionCreateNestedManyWithoutRefferenceToUserProfileInput = {
  create?: Prisma.XOR<Prisma.GameSessionCreateWithoutRefferenceToUserProfileInput, Prisma.GameSessionUncheckedCreateWithoutRefferenceToUserProfileInput> | Prisma.GameSessionCreateWithoutRefferenceToUserProfileInput[] | Prisma.GameSessionUncheckedCreateWithoutRefferenceToUserProfileInput[]
  connectOrCreate?: Prisma.GameSessionCreateOrConnectWithoutRefferenceToUserProfileInput | Prisma.GameSessionCreateOrConnectWithoutRefferenceToUserProfileInput[]
  createMany?: Prisma.GameSessionCreateManyRefferenceToUserProfileInputEnvelope
  connect?: Prisma.GameSessionWhereUniqueInput | Prisma.GameSessionWhereUniqueInput[]
}

export type GameSessionCreateNestedOneWithoutUserProfileInput = {
  create?: Prisma.XOR<Prisma.GameSessionCreateWithoutUserProfileInput, Prisma.GameSessionUncheckedCreateWithoutUserProfileInput>
  connectOrCreate?: Prisma.GameSessionCreateOrConnectWithoutUserProfileInput
  connect?: Prisma.GameSessionWhereUniqueInput
}

export type GameSessionUncheckedCreateNestedManyWithoutRefferenceToUserProfileInput = {
  create?: Prisma.XOR<Prisma.GameSessionCreateWithoutRefferenceToUserProfileInput, Prisma.GameSessionUncheckedCreateWithoutRefferenceToUserProfileInput> | Prisma.GameSessionCreateWithoutRefferenceToUserProfileInput[] | Prisma.GameSessionUncheckedCreateWithoutRefferenceToUserProfileInput[]
  connectOrCreate?: Prisma.GameSessionCreateOrConnectWithoutRefferenceToUserProfileInput | Prisma.GameSessionCreateOrConnectWithoutRefferenceToUserProfileInput[]
  createMany?: Prisma.GameSessionCreateManyRefferenceToUserProfileInputEnvelope
  connect?: Prisma.GameSessionWhereUniqueInput | Prisma.GameSessionWhereUniqueInput[]
}

export type GameSessionUpdateManyWithoutRefferenceToUserProfileNestedInput = {
  create?: Prisma.XOR<Prisma.GameSessionCreateWithoutRefferenceToUserProfileInput, Prisma.GameSessionUncheckedCreateWithoutRefferenceToUserProfileInput> | Prisma.GameSessionCreateWithoutRefferenceToUserProfileInput[] | Prisma.GameSessionUncheckedCreateWithoutRefferenceToUserProfileInput[]
  connectOrCreate?: Prisma.GameSessionCreateOrConnectWithoutRefferenceToUserProfileInput | Prisma.GameSessionCreateOrConnectWithoutRefferenceToUserProfileInput[]
  upsert?: Prisma.GameSessionUpsertWithWhereUniqueWithoutRefferenceToUserProfileInput | Prisma.GameSessionUpsertWithWhereUniqueWithoutRefferenceToUserProfileInput[]
  createMany?: Prisma.GameSessionCreateManyRefferenceToUserProfileInputEnvelope
  set?: Prisma.GameSessionWhereUniqueInput | Prisma.GameSessionWhereUniqueInput[]
  disconnect?: Prisma.GameSessionWhereUniqueInput | Prisma.GameSessionWhereUniqueInput[]
  delete?: Prisma.GameSessionWhereUniqueInput | Prisma.GameSessionWhereUniqueInput[]
  connect?: Prisma.GameSessionWhereUniqueInput | Prisma.GameSessionWhereUniqueInput[]
  update?: Prisma.GameSessionUpdateWithWhereUniqueWithoutRefferenceToUserProfileInput | Prisma.GameSessionUpdateWithWhereUniqueWithoutRefferenceToUserProfileInput[]
  updateMany?: Prisma.GameSessionUpdateManyWithWhereWithoutRefferenceToUserProfileInput | Prisma.GameSessionUpdateManyWithWhereWithoutRefferenceToUserProfileInput[]
  deleteMany?: Prisma.GameSessionScalarWhereInput | Prisma.GameSessionScalarWhereInput[]
}

export type GameSessionUpdateOneWithoutUserProfileNestedInput = {
  create?: Prisma.XOR<Prisma.GameSessionCreateWithoutUserProfileInput, Prisma.GameSessionUncheckedCreateWithoutUserProfileInput>
  connectOrCreate?: Prisma.GameSessionCreateOrConnectWithoutUserProfileInput
  upsert?: Prisma.GameSessionUpsertWithoutUserProfileInput
  disconnect?: Prisma.GameSessionWhereInput | boolean
  delete?: Prisma.GameSessionWhereInput | boolean
  connect?: Prisma.GameSessionWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.GameSessionUpdateToOneWithWhereWithoutUserProfileInput, Prisma.GameSessionUpdateWithoutUserProfileInput>, Prisma.GameSessionUncheckedUpdateWithoutUserProfileInput>
}

export type GameSessionUncheckedUpdateManyWithoutRefferenceToUserProfileNestedInput = {
  create?: Prisma.XOR<Prisma.GameSessionCreateWithoutRefferenceToUserProfileInput, Prisma.GameSessionUncheckedCreateWithoutRefferenceToUserProfileInput> | Prisma.GameSessionCreateWithoutRefferenceToUserProfileInput[] | Prisma.GameSessionUncheckedCreateWithoutRefferenceToUserProfileInput[]
  connectOrCreate?: Prisma.GameSessionCreateOrConnectWithoutRefferenceToUserProfileInput | Prisma.GameSessionCreateOrConnectWithoutRefferenceToUserProfileInput[]
  upsert?: Prisma.GameSessionUpsertWithWhereUniqueWithoutRefferenceToUserProfileInput | Prisma.GameSessionUpsertWithWhereUniqueWithoutRefferenceToUserProfileInput[]
  createMany?: Prisma.GameSessionCreateManyRefferenceToUserProfileInputEnvelope
  set?: Prisma.GameSessionWhereUniqueInput | Prisma.GameSessionWhereUniqueInput[]
  disconnect?: Prisma.GameSessionWhereUniqueInput | Prisma.GameSessionWhereUniqueInput[]
  delete?: Prisma.GameSessionWhereUniqueInput | Prisma.GameSessionWhereUniqueInput[]
  connect?: Prisma.GameSessionWhereUniqueInput | Prisma.GameSessionWhereUniqueInput[]
  update?: Prisma.GameSessionUpdateWithWhereUniqueWithoutRefferenceToUserProfileInput | Prisma.GameSessionUpdateWithWhereUniqueWithoutRefferenceToUserProfileInput[]
  updateMany?: Prisma.GameSessionUpdateManyWithWhereWithoutRefferenceToUserProfileInput | Prisma.GameSessionUpdateManyWithWhereWithoutRefferenceToUserProfileInput[]
  deleteMany?: Prisma.GameSessionScalarWhereInput | Prisma.GameSessionScalarWhereInput[]
}

export type GameSessionCreateWithoutGameInput = {
  id?: string
  isActive?: boolean
  sessionData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  authSessionId?: string | null
  currencyId?: string | null
  startedAt?: Date | string
  endTime?: Date | string | null
  startTime?: Date | string | null
  ipAddress?: string | null
  startingBalance?: number | null
  startingTotalXp?: number | null
  userAgent?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  totalWagered?: number
  totalWon?: number
  rtgToken?: string | null
  rtgFingerPrint?: string | null
  profileId?: string | null
  spins?: Prisma.GameSpinCreateNestedManyWithoutGameSessionInput
  refferenceToUserProfile: Prisma.UserProfileCreateNestedOneWithoutPastGameSessionsInput
  UserProfile?: Prisma.UserProfileCreateNestedManyWithoutCurrentGameSessionInput
}

export type GameSessionUncheckedCreateWithoutGameInput = {
  id?: string
  isActive?: boolean
  sessionData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  authSessionId?: string | null
  currencyId?: string | null
  startedAt?: Date | string
  endTime?: Date | string | null
  startTime?: Date | string | null
  ipAddress?: string | null
  startingBalance?: number | null
  startingTotalXp?: number | null
  userAgent?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  totalWagered?: number
  totalWon?: number
  userId: string
  rtgToken?: string | null
  rtgFingerPrint?: string | null
  profileId?: string | null
  spins?: Prisma.GameSpinUncheckedCreateNestedManyWithoutGameSessionInput
  UserProfile?: Prisma.UserProfileUncheckedCreateNestedManyWithoutCurrentGameSessionInput
}

export type GameSessionCreateOrConnectWithoutGameInput = {
  where: Prisma.GameSessionWhereUniqueInput
  create: Prisma.XOR<Prisma.GameSessionCreateWithoutGameInput, Prisma.GameSessionUncheckedCreateWithoutGameInput>
}

export type GameSessionCreateManyGameInputEnvelope = {
  data: Prisma.GameSessionCreateManyGameInput | Prisma.GameSessionCreateManyGameInput[]
  skipDuplicates?: boolean
}

export type GameSessionUpsertWithWhereUniqueWithoutGameInput = {
  where: Prisma.GameSessionWhereUniqueInput
  update: Prisma.XOR<Prisma.GameSessionUpdateWithoutGameInput, Prisma.GameSessionUncheckedUpdateWithoutGameInput>
  create: Prisma.XOR<Prisma.GameSessionCreateWithoutGameInput, Prisma.GameSessionUncheckedCreateWithoutGameInput>
}

export type GameSessionUpdateWithWhereUniqueWithoutGameInput = {
  where: Prisma.GameSessionWhereUniqueInput
  data: Prisma.XOR<Prisma.GameSessionUpdateWithoutGameInput, Prisma.GameSessionUncheckedUpdateWithoutGameInput>
}

export type GameSessionUpdateManyWithWhereWithoutGameInput = {
  where: Prisma.GameSessionScalarWhereInput
  data: Prisma.XOR<Prisma.GameSessionUpdateManyMutationInput, Prisma.GameSessionUncheckedUpdateManyWithoutGameInput>
}

export type GameSessionScalarWhereInput = {
  AND?: Prisma.GameSessionScalarWhereInput | Prisma.GameSessionScalarWhereInput[]
  OR?: Prisma.GameSessionScalarWhereInput[]
  NOT?: Prisma.GameSessionScalarWhereInput | Prisma.GameSessionScalarWhereInput[]
  id?: Prisma.StringFilter<"GameSession"> | string
  isActive?: Prisma.BoolFilter<"GameSession"> | boolean
  sessionData?: Prisma.JsonNullableFilter<"GameSession">
  authSessionId?: Prisma.StringNullableFilter<"GameSession"> | string | null
  currencyId?: Prisma.StringNullableFilter<"GameSession"> | string | null
  startedAt?: Prisma.DateTimeFilter<"GameSession"> | Date | string
  endTime?: Prisma.DateTimeNullableFilter<"GameSession"> | Date | string | null
  startTime?: Prisma.DateTimeNullableFilter<"GameSession"> | Date | string | null
  ipAddress?: Prisma.StringNullableFilter<"GameSession"> | string | null
  startingBalance?: Prisma.IntNullableFilter<"GameSession"> | number | null
  startingTotalXp?: Prisma.IntNullableFilter<"GameSession"> | number | null
  userAgent?: Prisma.StringNullableFilter<"GameSession"> | string | null
  createdAt?: Prisma.DateTimeFilter<"GameSession"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"GameSession"> | Date | string
  totalWagered?: Prisma.IntFilter<"GameSession"> | number
  totalWon?: Prisma.IntFilter<"GameSession"> | number
  userId?: Prisma.StringFilter<"GameSession"> | string
  gameId?: Prisma.StringFilter<"GameSession"> | string
  rtgToken?: Prisma.StringNullableFilter<"GameSession"> | string | null
  rtgFingerPrint?: Prisma.StringNullableFilter<"GameSession"> | string | null
  profileId?: Prisma.StringNullableFilter<"GameSession"> | string | null
}

export type GameSessionCreateWithoutSpinsInput = {
  id?: string
  isActive?: boolean
  sessionData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  authSessionId?: string | null
  currencyId?: string | null
  startedAt?: Date | string
  endTime?: Date | string | null
  startTime?: Date | string | null
  ipAddress?: string | null
  startingBalance?: number | null
  startingTotalXp?: number | null
  userAgent?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  totalWagered?: number
  totalWon?: number
  rtgToken?: string | null
  rtgFingerPrint?: string | null
  profileId?: string | null
  refferenceToUserProfile: Prisma.UserProfileCreateNestedOneWithoutPastGameSessionsInput
  game: Prisma.GameCreateNestedOneWithoutGameSessionsInput
  UserProfile?: Prisma.UserProfileCreateNestedManyWithoutCurrentGameSessionInput
}

export type GameSessionUncheckedCreateWithoutSpinsInput = {
  id?: string
  isActive?: boolean
  sessionData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  authSessionId?: string | null
  currencyId?: string | null
  startedAt?: Date | string
  endTime?: Date | string | null
  startTime?: Date | string | null
  ipAddress?: string | null
  startingBalance?: number | null
  startingTotalXp?: number | null
  userAgent?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  totalWagered?: number
  totalWon?: number
  userId: string
  gameId: string
  rtgToken?: string | null
  rtgFingerPrint?: string | null
  profileId?: string | null
  UserProfile?: Prisma.UserProfileUncheckedCreateNestedManyWithoutCurrentGameSessionInput
}

export type GameSessionCreateOrConnectWithoutSpinsInput = {
  where: Prisma.GameSessionWhereUniqueInput
  create: Prisma.XOR<Prisma.GameSessionCreateWithoutSpinsInput, Prisma.GameSessionUncheckedCreateWithoutSpinsInput>
}

export type GameSessionUpsertWithoutSpinsInput = {
  update: Prisma.XOR<Prisma.GameSessionUpdateWithoutSpinsInput, Prisma.GameSessionUncheckedUpdateWithoutSpinsInput>
  create: Prisma.XOR<Prisma.GameSessionCreateWithoutSpinsInput, Prisma.GameSessionUncheckedCreateWithoutSpinsInput>
  where?: Prisma.GameSessionWhereInput
}

export type GameSessionUpdateToOneWithWhereWithoutSpinsInput = {
  where?: Prisma.GameSessionWhereInput
  data: Prisma.XOR<Prisma.GameSessionUpdateWithoutSpinsInput, Prisma.GameSessionUncheckedUpdateWithoutSpinsInput>
}

export type GameSessionUpdateWithoutSpinsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  sessionData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  authSessionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  currencyId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  startTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  ipAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startingBalance?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  startingTotalXp?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  userAgent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  totalWagered?: Prisma.IntFieldUpdateOperationsInput | number
  totalWon?: Prisma.IntFieldUpdateOperationsInput | number
  rtgToken?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rtgFingerPrint?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  profileId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  refferenceToUserProfile?: Prisma.UserProfileUpdateOneRequiredWithoutPastGameSessionsNestedInput
  game?: Prisma.GameUpdateOneRequiredWithoutGameSessionsNestedInput
  UserProfile?: Prisma.UserProfileUpdateManyWithoutCurrentGameSessionNestedInput
}

export type GameSessionUncheckedUpdateWithoutSpinsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  sessionData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  authSessionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  currencyId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  startTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  ipAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startingBalance?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  startingTotalXp?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  userAgent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  totalWagered?: Prisma.IntFieldUpdateOperationsInput | number
  totalWon?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  gameId?: Prisma.StringFieldUpdateOperationsInput | string
  rtgToken?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rtgFingerPrint?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  profileId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  UserProfile?: Prisma.UserProfileUncheckedUpdateManyWithoutCurrentGameSessionNestedInput
}

export type GameSessionCreateWithoutRefferenceToUserProfileInput = {
  id?: string
  isActive?: boolean
  sessionData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  authSessionId?: string | null
  currencyId?: string | null
  startedAt?: Date | string
  endTime?: Date | string | null
  startTime?: Date | string | null
  ipAddress?: string | null
  startingBalance?: number | null
  startingTotalXp?: number | null
  userAgent?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  totalWagered?: number
  totalWon?: number
  rtgToken?: string | null
  rtgFingerPrint?: string | null
  profileId?: string | null
  spins?: Prisma.GameSpinCreateNestedManyWithoutGameSessionInput
  game: Prisma.GameCreateNestedOneWithoutGameSessionsInput
  UserProfile?: Prisma.UserProfileCreateNestedManyWithoutCurrentGameSessionInput
}

export type GameSessionUncheckedCreateWithoutRefferenceToUserProfileInput = {
  id?: string
  isActive?: boolean
  sessionData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  authSessionId?: string | null
  currencyId?: string | null
  startedAt?: Date | string
  endTime?: Date | string | null
  startTime?: Date | string | null
  ipAddress?: string | null
  startingBalance?: number | null
  startingTotalXp?: number | null
  userAgent?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  totalWagered?: number
  totalWon?: number
  gameId: string
  rtgToken?: string | null
  rtgFingerPrint?: string | null
  profileId?: string | null
  spins?: Prisma.GameSpinUncheckedCreateNestedManyWithoutGameSessionInput
  UserProfile?: Prisma.UserProfileUncheckedCreateNestedManyWithoutCurrentGameSessionInput
}

export type GameSessionCreateOrConnectWithoutRefferenceToUserProfileInput = {
  where: Prisma.GameSessionWhereUniqueInput
  create: Prisma.XOR<Prisma.GameSessionCreateWithoutRefferenceToUserProfileInput, Prisma.GameSessionUncheckedCreateWithoutRefferenceToUserProfileInput>
}

export type GameSessionCreateManyRefferenceToUserProfileInputEnvelope = {
  data: Prisma.GameSessionCreateManyRefferenceToUserProfileInput | Prisma.GameSessionCreateManyRefferenceToUserProfileInput[]
  skipDuplicates?: boolean
}

export type GameSessionCreateWithoutUserProfileInput = {
  id?: string
  isActive?: boolean
  sessionData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  authSessionId?: string | null
  currencyId?: string | null
  startedAt?: Date | string
  endTime?: Date | string | null
  startTime?: Date | string | null
  ipAddress?: string | null
  startingBalance?: number | null
  startingTotalXp?: number | null
  userAgent?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  totalWagered?: number
  totalWon?: number
  rtgToken?: string | null
  rtgFingerPrint?: string | null
  profileId?: string | null
  spins?: Prisma.GameSpinCreateNestedManyWithoutGameSessionInput
  refferenceToUserProfile: Prisma.UserProfileCreateNestedOneWithoutPastGameSessionsInput
  game: Prisma.GameCreateNestedOneWithoutGameSessionsInput
}

export type GameSessionUncheckedCreateWithoutUserProfileInput = {
  id?: string
  isActive?: boolean
  sessionData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  authSessionId?: string | null
  currencyId?: string | null
  startedAt?: Date | string
  endTime?: Date | string | null
  startTime?: Date | string | null
  ipAddress?: string | null
  startingBalance?: number | null
  startingTotalXp?: number | null
  userAgent?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  totalWagered?: number
  totalWon?: number
  userId: string
  gameId: string
  rtgToken?: string | null
  rtgFingerPrint?: string | null
  profileId?: string | null
  spins?: Prisma.GameSpinUncheckedCreateNestedManyWithoutGameSessionInput
}

export type GameSessionCreateOrConnectWithoutUserProfileInput = {
  where: Prisma.GameSessionWhereUniqueInput
  create: Prisma.XOR<Prisma.GameSessionCreateWithoutUserProfileInput, Prisma.GameSessionUncheckedCreateWithoutUserProfileInput>
}

export type GameSessionUpsertWithWhereUniqueWithoutRefferenceToUserProfileInput = {
  where: Prisma.GameSessionWhereUniqueInput
  update: Prisma.XOR<Prisma.GameSessionUpdateWithoutRefferenceToUserProfileInput, Prisma.GameSessionUncheckedUpdateWithoutRefferenceToUserProfileInput>
  create: Prisma.XOR<Prisma.GameSessionCreateWithoutRefferenceToUserProfileInput, Prisma.GameSessionUncheckedCreateWithoutRefferenceToUserProfileInput>
}

export type GameSessionUpdateWithWhereUniqueWithoutRefferenceToUserProfileInput = {
  where: Prisma.GameSessionWhereUniqueInput
  data: Prisma.XOR<Prisma.GameSessionUpdateWithoutRefferenceToUserProfileInput, Prisma.GameSessionUncheckedUpdateWithoutRefferenceToUserProfileInput>
}

export type GameSessionUpdateManyWithWhereWithoutRefferenceToUserProfileInput = {
  where: Prisma.GameSessionScalarWhereInput
  data: Prisma.XOR<Prisma.GameSessionUpdateManyMutationInput, Prisma.GameSessionUncheckedUpdateManyWithoutRefferenceToUserProfileInput>
}

export type GameSessionUpsertWithoutUserProfileInput = {
  update: Prisma.XOR<Prisma.GameSessionUpdateWithoutUserProfileInput, Prisma.GameSessionUncheckedUpdateWithoutUserProfileInput>
  create: Prisma.XOR<Prisma.GameSessionCreateWithoutUserProfileInput, Prisma.GameSessionUncheckedCreateWithoutUserProfileInput>
  where?: Prisma.GameSessionWhereInput
}

export type GameSessionUpdateToOneWithWhereWithoutUserProfileInput = {
  where?: Prisma.GameSessionWhereInput
  data: Prisma.XOR<Prisma.GameSessionUpdateWithoutUserProfileInput, Prisma.GameSessionUncheckedUpdateWithoutUserProfileInput>
}

export type GameSessionUpdateWithoutUserProfileInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  sessionData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  authSessionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  currencyId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  startTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  ipAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startingBalance?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  startingTotalXp?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  userAgent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  totalWagered?: Prisma.IntFieldUpdateOperationsInput | number
  totalWon?: Prisma.IntFieldUpdateOperationsInput | number
  rtgToken?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rtgFingerPrint?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  profileId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  spins?: Prisma.GameSpinUpdateManyWithoutGameSessionNestedInput
  refferenceToUserProfile?: Prisma.UserProfileUpdateOneRequiredWithoutPastGameSessionsNestedInput
  game?: Prisma.GameUpdateOneRequiredWithoutGameSessionsNestedInput
}

export type GameSessionUncheckedUpdateWithoutUserProfileInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  sessionData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  authSessionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  currencyId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  startTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  ipAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startingBalance?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  startingTotalXp?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  userAgent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  totalWagered?: Prisma.IntFieldUpdateOperationsInput | number
  totalWon?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  gameId?: Prisma.StringFieldUpdateOperationsInput | string
  rtgToken?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rtgFingerPrint?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  profileId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  spins?: Prisma.GameSpinUncheckedUpdateManyWithoutGameSessionNestedInput
}

export type GameSessionCreateManyGameInput = {
  id?: string
  isActive?: boolean
  sessionData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  authSessionId?: string | null
  currencyId?: string | null
  startedAt?: Date | string
  endTime?: Date | string | null
  startTime?: Date | string | null
  ipAddress?: string | null
  startingBalance?: number | null
  startingTotalXp?: number | null
  userAgent?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  totalWagered?: number
  totalWon?: number
  userId: string
  rtgToken?: string | null
  rtgFingerPrint?: string | null
  profileId?: string | null
}

export type GameSessionUpdateWithoutGameInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  sessionData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  authSessionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  currencyId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  startTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  ipAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startingBalance?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  startingTotalXp?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  userAgent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  totalWagered?: Prisma.IntFieldUpdateOperationsInput | number
  totalWon?: Prisma.IntFieldUpdateOperationsInput | number
  rtgToken?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rtgFingerPrint?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  profileId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  spins?: Prisma.GameSpinUpdateManyWithoutGameSessionNestedInput
  refferenceToUserProfile?: Prisma.UserProfileUpdateOneRequiredWithoutPastGameSessionsNestedInput
  UserProfile?: Prisma.UserProfileUpdateManyWithoutCurrentGameSessionNestedInput
}

export type GameSessionUncheckedUpdateWithoutGameInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  sessionData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  authSessionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  currencyId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  startTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  ipAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startingBalance?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  startingTotalXp?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  userAgent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  totalWagered?: Prisma.IntFieldUpdateOperationsInput | number
  totalWon?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  rtgToken?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rtgFingerPrint?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  profileId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  spins?: Prisma.GameSpinUncheckedUpdateManyWithoutGameSessionNestedInput
  UserProfile?: Prisma.UserProfileUncheckedUpdateManyWithoutCurrentGameSessionNestedInput
}

export type GameSessionUncheckedUpdateManyWithoutGameInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  sessionData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  authSessionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  currencyId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  startTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  ipAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startingBalance?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  startingTotalXp?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  userAgent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  totalWagered?: Prisma.IntFieldUpdateOperationsInput | number
  totalWon?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  rtgToken?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rtgFingerPrint?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  profileId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type GameSessionCreateManyRefferenceToUserProfileInput = {
  id?: string
  isActive?: boolean
  sessionData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  authSessionId?: string | null
  currencyId?: string | null
  startedAt?: Date | string
  endTime?: Date | string | null
  startTime?: Date | string | null
  ipAddress?: string | null
  startingBalance?: number | null
  startingTotalXp?: number | null
  userAgent?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  totalWagered?: number
  totalWon?: number
  gameId: string
  rtgToken?: string | null
  rtgFingerPrint?: string | null
  profileId?: string | null
}

export type GameSessionUpdateWithoutRefferenceToUserProfileInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  sessionData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  authSessionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  currencyId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  startTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  ipAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startingBalance?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  startingTotalXp?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  userAgent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  totalWagered?: Prisma.IntFieldUpdateOperationsInput | number
  totalWon?: Prisma.IntFieldUpdateOperationsInput | number
  rtgToken?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rtgFingerPrint?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  profileId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  spins?: Prisma.GameSpinUpdateManyWithoutGameSessionNestedInput
  game?: Prisma.GameUpdateOneRequiredWithoutGameSessionsNestedInput
  UserProfile?: Prisma.UserProfileUpdateManyWithoutCurrentGameSessionNestedInput
}

export type GameSessionUncheckedUpdateWithoutRefferenceToUserProfileInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  sessionData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  authSessionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  currencyId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  startTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  ipAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startingBalance?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  startingTotalXp?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  userAgent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  totalWagered?: Prisma.IntFieldUpdateOperationsInput | number
  totalWon?: Prisma.IntFieldUpdateOperationsInput | number
  gameId?: Prisma.StringFieldUpdateOperationsInput | string
  rtgToken?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rtgFingerPrint?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  profileId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  spins?: Prisma.GameSpinUncheckedUpdateManyWithoutGameSessionNestedInput
  UserProfile?: Prisma.UserProfileUncheckedUpdateManyWithoutCurrentGameSessionNestedInput
}

export type GameSessionUncheckedUpdateManyWithoutRefferenceToUserProfileInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  sessionData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  authSessionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  currencyId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  startTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  ipAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startingBalance?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  startingTotalXp?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  userAgent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  totalWagered?: Prisma.IntFieldUpdateOperationsInput | number
  totalWon?: Prisma.IntFieldUpdateOperationsInput | number
  gameId?: Prisma.StringFieldUpdateOperationsInput | string
  rtgToken?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rtgFingerPrint?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  profileId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}


/**
 * Count Type GameSessionCountOutputType
 */

export type GameSessionCountOutputType = {
  spins: number
  UserProfile: number
}

export type GameSessionCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  spins?: boolean | GameSessionCountOutputTypeCountSpinsArgs
  UserProfile?: boolean | GameSessionCountOutputTypeCountUserProfileArgs
}

/**
 * GameSessionCountOutputType without action
 */
export type GameSessionCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSessionCountOutputType
   */
  select?: Prisma.GameSessionCountOutputTypeSelect<ExtArgs> | null
}

/**
 * GameSessionCountOutputType without action
 */
export type GameSessionCountOutputTypeCountSpinsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.GameSpinWhereInput
}

/**
 * GameSessionCountOutputType without action
 */
export type GameSessionCountOutputTypeCountUserProfileArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserProfileWhereInput
}


export type GameSessionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  isActive?: boolean
  sessionData?: boolean
  authSessionId?: boolean
  currencyId?: boolean
  startedAt?: boolean
  endTime?: boolean
  startTime?: boolean
  ipAddress?: boolean
  startingBalance?: boolean
  startingTotalXp?: boolean
  userAgent?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  totalWagered?: boolean
  totalWon?: boolean
  userId?: boolean
  gameId?: boolean
  rtgToken?: boolean
  rtgFingerPrint?: boolean
  profileId?: boolean
  spins?: boolean | Prisma.GameSession$spinsArgs<ExtArgs>
  refferenceToUserProfile?: boolean | Prisma.UserProfileDefaultArgs<ExtArgs>
  game?: boolean | Prisma.GameDefaultArgs<ExtArgs>
  UserProfile?: boolean | Prisma.GameSession$UserProfileArgs<ExtArgs>
  _count?: boolean | Prisma.GameSessionCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["gameSession"]>

export type GameSessionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  isActive?: boolean
  sessionData?: boolean
  authSessionId?: boolean
  currencyId?: boolean
  startedAt?: boolean
  endTime?: boolean
  startTime?: boolean
  ipAddress?: boolean
  startingBalance?: boolean
  startingTotalXp?: boolean
  userAgent?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  totalWagered?: boolean
  totalWon?: boolean
  userId?: boolean
  gameId?: boolean
  rtgToken?: boolean
  rtgFingerPrint?: boolean
  profileId?: boolean
  refferenceToUserProfile?: boolean | Prisma.UserProfileDefaultArgs<ExtArgs>
  game?: boolean | Prisma.GameDefaultArgs<ExtArgs>
}, ExtArgs["result"]["gameSession"]>

export type GameSessionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  isActive?: boolean
  sessionData?: boolean
  authSessionId?: boolean
  currencyId?: boolean
  startedAt?: boolean
  endTime?: boolean
  startTime?: boolean
  ipAddress?: boolean
  startingBalance?: boolean
  startingTotalXp?: boolean
  userAgent?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  totalWagered?: boolean
  totalWon?: boolean
  userId?: boolean
  gameId?: boolean
  rtgToken?: boolean
  rtgFingerPrint?: boolean
  profileId?: boolean
  refferenceToUserProfile?: boolean | Prisma.UserProfileDefaultArgs<ExtArgs>
  game?: boolean | Prisma.GameDefaultArgs<ExtArgs>
}, ExtArgs["result"]["gameSession"]>

export type GameSessionSelectScalar = {
  id?: boolean
  isActive?: boolean
  sessionData?: boolean
  authSessionId?: boolean
  currencyId?: boolean
  startedAt?: boolean
  endTime?: boolean
  startTime?: boolean
  ipAddress?: boolean
  startingBalance?: boolean
  startingTotalXp?: boolean
  userAgent?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  totalWagered?: boolean
  totalWon?: boolean
  userId?: boolean
  gameId?: boolean
  rtgToken?: boolean
  rtgFingerPrint?: boolean
  profileId?: boolean
}

export type GameSessionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "isActive" | "sessionData" | "authSessionId" | "currencyId" | "startedAt" | "endTime" | "startTime" | "ipAddress" | "startingBalance" | "startingTotalXp" | "userAgent" | "createdAt" | "updatedAt" | "totalWagered" | "totalWon" | "userId" | "gameId" | "rtgToken" | "rtgFingerPrint" | "profileId", ExtArgs["result"]["gameSession"]>
export type GameSessionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  spins?: boolean | Prisma.GameSession$spinsArgs<ExtArgs>
  refferenceToUserProfile?: boolean | Prisma.UserProfileDefaultArgs<ExtArgs>
  game?: boolean | Prisma.GameDefaultArgs<ExtArgs>
  UserProfile?: boolean | Prisma.GameSession$UserProfileArgs<ExtArgs>
  _count?: boolean | Prisma.GameSessionCountOutputTypeDefaultArgs<ExtArgs>
}
export type GameSessionIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  refferenceToUserProfile?: boolean | Prisma.UserProfileDefaultArgs<ExtArgs>
  game?: boolean | Prisma.GameDefaultArgs<ExtArgs>
}
export type GameSessionIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  refferenceToUserProfile?: boolean | Prisma.UserProfileDefaultArgs<ExtArgs>
  game?: boolean | Prisma.GameDefaultArgs<ExtArgs>
}

export type $GameSessionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "GameSession"
  objects: {
    spins: Prisma.$GameSpinPayload<ExtArgs>[]
    refferenceToUserProfile: Prisma.$UserProfilePayload<ExtArgs>
    game: Prisma.$GamePayload<ExtArgs>
    UserProfile: Prisma.$UserProfilePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    isActive: boolean
    sessionData: runtime.JsonValue | null
    authSessionId: string | null
    currencyId: string | null
    startedAt: Date
    endTime: Date | null
    startTime: Date | null
    ipAddress: string | null
    startingBalance: number | null
    startingTotalXp: number | null
    userAgent: string | null
    createdAt: Date
    updatedAt: Date
    totalWagered: number
    totalWon: number
    userId: string
    gameId: string
    rtgToken: string | null
    rtgFingerPrint: string | null
    profileId: string | null
  }, ExtArgs["result"]["gameSession"]>
  composites: {}
}

export type GameSessionGetPayload<S extends boolean | null | undefined | GameSessionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$GameSessionPayload, S>

export type GameSessionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<GameSessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: GameSessionCountAggregateInputType | true
  }

export interface GameSessionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GameSession'], meta: { name: 'GameSession' } }
  /**
   * Find zero or one GameSession that matches the filter.
   * @param {GameSessionFindUniqueArgs} args - Arguments to find a GameSession
   * @example
   * // Get one GameSession
   * const gameSession = await prisma.gameSession.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends GameSessionFindUniqueArgs>(args: Prisma.SelectSubset<T, GameSessionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__GameSessionClient<runtime.Types.Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one GameSession that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {GameSessionFindUniqueOrThrowArgs} args - Arguments to find a GameSession
   * @example
   * // Get one GameSession
   * const gameSession = await prisma.gameSession.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends GameSessionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, GameSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__GameSessionClient<runtime.Types.Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first GameSession that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameSessionFindFirstArgs} args - Arguments to find a GameSession
   * @example
   * // Get one GameSession
   * const gameSession = await prisma.gameSession.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends GameSessionFindFirstArgs>(args?: Prisma.SelectSubset<T, GameSessionFindFirstArgs<ExtArgs>>): Prisma.Prisma__GameSessionClient<runtime.Types.Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first GameSession that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameSessionFindFirstOrThrowArgs} args - Arguments to find a GameSession
   * @example
   * // Get one GameSession
   * const gameSession = await prisma.gameSession.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends GameSessionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, GameSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__GameSessionClient<runtime.Types.Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more GameSessions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameSessionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all GameSessions
   * const gameSessions = await prisma.gameSession.findMany()
   * 
   * // Get first 10 GameSessions
   * const gameSessions = await prisma.gameSession.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const gameSessionWithIdOnly = await prisma.gameSession.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends GameSessionFindManyArgs>(args?: Prisma.SelectSubset<T, GameSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a GameSession.
   * @param {GameSessionCreateArgs} args - Arguments to create a GameSession.
   * @example
   * // Create one GameSession
   * const GameSession = await prisma.gameSession.create({
   *   data: {
   *     // ... data to create a GameSession
   *   }
   * })
   * 
   */
  create<T extends GameSessionCreateArgs>(args: Prisma.SelectSubset<T, GameSessionCreateArgs<ExtArgs>>): Prisma.Prisma__GameSessionClient<runtime.Types.Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many GameSessions.
   * @param {GameSessionCreateManyArgs} args - Arguments to create many GameSessions.
   * @example
   * // Create many GameSessions
   * const gameSession = await prisma.gameSession.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends GameSessionCreateManyArgs>(args?: Prisma.SelectSubset<T, GameSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many GameSessions and returns the data saved in the database.
   * @param {GameSessionCreateManyAndReturnArgs} args - Arguments to create many GameSessions.
   * @example
   * // Create many GameSessions
   * const gameSession = await prisma.gameSession.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many GameSessions and only return the `id`
   * const gameSessionWithIdOnly = await prisma.gameSession.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends GameSessionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, GameSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a GameSession.
   * @param {GameSessionDeleteArgs} args - Arguments to delete one GameSession.
   * @example
   * // Delete one GameSession
   * const GameSession = await prisma.gameSession.delete({
   *   where: {
   *     // ... filter to delete one GameSession
   *   }
   * })
   * 
   */
  delete<T extends GameSessionDeleteArgs>(args: Prisma.SelectSubset<T, GameSessionDeleteArgs<ExtArgs>>): Prisma.Prisma__GameSessionClient<runtime.Types.Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one GameSession.
   * @param {GameSessionUpdateArgs} args - Arguments to update one GameSession.
   * @example
   * // Update one GameSession
   * const gameSession = await prisma.gameSession.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends GameSessionUpdateArgs>(args: Prisma.SelectSubset<T, GameSessionUpdateArgs<ExtArgs>>): Prisma.Prisma__GameSessionClient<runtime.Types.Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more GameSessions.
   * @param {GameSessionDeleteManyArgs} args - Arguments to filter GameSessions to delete.
   * @example
   * // Delete a few GameSessions
   * const { count } = await prisma.gameSession.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends GameSessionDeleteManyArgs>(args?: Prisma.SelectSubset<T, GameSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more GameSessions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameSessionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many GameSessions
   * const gameSession = await prisma.gameSession.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends GameSessionUpdateManyArgs>(args: Prisma.SelectSubset<T, GameSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more GameSessions and returns the data updated in the database.
   * @param {GameSessionUpdateManyAndReturnArgs} args - Arguments to update many GameSessions.
   * @example
   * // Update many GameSessions
   * const gameSession = await prisma.gameSession.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more GameSessions and only return the `id`
   * const gameSessionWithIdOnly = await prisma.gameSession.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends GameSessionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, GameSessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one GameSession.
   * @param {GameSessionUpsertArgs} args - Arguments to update or create a GameSession.
   * @example
   * // Update or create a GameSession
   * const gameSession = await prisma.gameSession.upsert({
   *   create: {
   *     // ... data to create a GameSession
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the GameSession we want to update
   *   }
   * })
   */
  upsert<T extends GameSessionUpsertArgs>(args: Prisma.SelectSubset<T, GameSessionUpsertArgs<ExtArgs>>): Prisma.Prisma__GameSessionClient<runtime.Types.Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of GameSessions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameSessionCountArgs} args - Arguments to filter GameSessions to count.
   * @example
   * // Count the number of GameSessions
   * const count = await prisma.gameSession.count({
   *   where: {
   *     // ... the filter for the GameSessions we want to count
   *   }
   * })
  **/
  count<T extends GameSessionCountArgs>(
    args?: Prisma.Subset<T, GameSessionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], GameSessionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a GameSession.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends GameSessionAggregateArgs>(args: Prisma.Subset<T, GameSessionAggregateArgs>): Prisma.PrismaPromise<GetGameSessionAggregateType<T>>

  /**
   * Group by GameSession.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameSessionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends GameSessionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: GameSessionGroupByArgs['orderBy'] }
      : { orderBy?: GameSessionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, GameSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the GameSession model
 */
readonly fields: GameSessionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for GameSession.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__GameSessionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  spins<T extends Prisma.GameSession$spinsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.GameSession$spinsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GameSpinPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  refferenceToUserProfile<T extends Prisma.UserProfileDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserProfileDefaultArgs<ExtArgs>>): Prisma.Prisma__UserProfileClient<runtime.Types.Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  game<T extends Prisma.GameDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.GameDefaultArgs<ExtArgs>>): Prisma.Prisma__GameClient<runtime.Types.Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  UserProfile<T extends Prisma.GameSession$UserProfileArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.GameSession$UserProfileArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the GameSession model
 */
export interface GameSessionFieldRefs {
  readonly id: Prisma.FieldRef<"GameSession", 'String'>
  readonly isActive: Prisma.FieldRef<"GameSession", 'Boolean'>
  readonly sessionData: Prisma.FieldRef<"GameSession", 'Json'>
  readonly authSessionId: Prisma.FieldRef<"GameSession", 'String'>
  readonly currencyId: Prisma.FieldRef<"GameSession", 'String'>
  readonly startedAt: Prisma.FieldRef<"GameSession", 'DateTime'>
  readonly endTime: Prisma.FieldRef<"GameSession", 'DateTime'>
  readonly startTime: Prisma.FieldRef<"GameSession", 'DateTime'>
  readonly ipAddress: Prisma.FieldRef<"GameSession", 'String'>
  readonly startingBalance: Prisma.FieldRef<"GameSession", 'Int'>
  readonly startingTotalXp: Prisma.FieldRef<"GameSession", 'Int'>
  readonly userAgent: Prisma.FieldRef<"GameSession", 'String'>
  readonly createdAt: Prisma.FieldRef<"GameSession", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"GameSession", 'DateTime'>
  readonly totalWagered: Prisma.FieldRef<"GameSession", 'Int'>
  readonly totalWon: Prisma.FieldRef<"GameSession", 'Int'>
  readonly userId: Prisma.FieldRef<"GameSession", 'String'>
  readonly gameId: Prisma.FieldRef<"GameSession", 'String'>
  readonly rtgToken: Prisma.FieldRef<"GameSession", 'String'>
  readonly rtgFingerPrint: Prisma.FieldRef<"GameSession", 'String'>
  readonly profileId: Prisma.FieldRef<"GameSession", 'String'>
}
    

// Custom InputTypes
/**
 * GameSession findUnique
 */
export type GameSessionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSession
   */
  select?: Prisma.GameSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameSession
   */
  omit?: Prisma.GameSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameSessionInclude<ExtArgs> | null
  /**
   * Filter, which GameSession to fetch.
   */
  where: Prisma.GameSessionWhereUniqueInput
}

/**
 * GameSession findUniqueOrThrow
 */
export type GameSessionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSession
   */
  select?: Prisma.GameSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameSession
   */
  omit?: Prisma.GameSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameSessionInclude<ExtArgs> | null
  /**
   * Filter, which GameSession to fetch.
   */
  where: Prisma.GameSessionWhereUniqueInput
}

/**
 * GameSession findFirst
 */
export type GameSessionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSession
   */
  select?: Prisma.GameSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameSession
   */
  omit?: Prisma.GameSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameSessionInclude<ExtArgs> | null
  /**
   * Filter, which GameSession to fetch.
   */
  where?: Prisma.GameSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of GameSessions to fetch.
   */
  orderBy?: Prisma.GameSessionOrderByWithRelationInput | Prisma.GameSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for GameSessions.
   */
  cursor?: Prisma.GameSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` GameSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` GameSessions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of GameSessions.
   */
  distinct?: Prisma.GameSessionScalarFieldEnum | Prisma.GameSessionScalarFieldEnum[]
}

/**
 * GameSession findFirstOrThrow
 */
export type GameSessionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSession
   */
  select?: Prisma.GameSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameSession
   */
  omit?: Prisma.GameSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameSessionInclude<ExtArgs> | null
  /**
   * Filter, which GameSession to fetch.
   */
  where?: Prisma.GameSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of GameSessions to fetch.
   */
  orderBy?: Prisma.GameSessionOrderByWithRelationInput | Prisma.GameSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for GameSessions.
   */
  cursor?: Prisma.GameSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` GameSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` GameSessions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of GameSessions.
   */
  distinct?: Prisma.GameSessionScalarFieldEnum | Prisma.GameSessionScalarFieldEnum[]
}

/**
 * GameSession findMany
 */
export type GameSessionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSession
   */
  select?: Prisma.GameSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameSession
   */
  omit?: Prisma.GameSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameSessionInclude<ExtArgs> | null
  /**
   * Filter, which GameSessions to fetch.
   */
  where?: Prisma.GameSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of GameSessions to fetch.
   */
  orderBy?: Prisma.GameSessionOrderByWithRelationInput | Prisma.GameSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing GameSessions.
   */
  cursor?: Prisma.GameSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` GameSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` GameSessions.
   */
  skip?: number
  distinct?: Prisma.GameSessionScalarFieldEnum | Prisma.GameSessionScalarFieldEnum[]
}

/**
 * GameSession create
 */
export type GameSessionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSession
   */
  select?: Prisma.GameSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameSession
   */
  omit?: Prisma.GameSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameSessionInclude<ExtArgs> | null
  /**
   * The data needed to create a GameSession.
   */
  data: Prisma.XOR<Prisma.GameSessionCreateInput, Prisma.GameSessionUncheckedCreateInput>
}

/**
 * GameSession createMany
 */
export type GameSessionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many GameSessions.
   */
  data: Prisma.GameSessionCreateManyInput | Prisma.GameSessionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * GameSession createManyAndReturn
 */
export type GameSessionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSession
   */
  select?: Prisma.GameSessionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the GameSession
   */
  omit?: Prisma.GameSessionOmit<ExtArgs> | null
  /**
   * The data used to create many GameSessions.
   */
  data: Prisma.GameSessionCreateManyInput | Prisma.GameSessionCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameSessionIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * GameSession update
 */
export type GameSessionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSession
   */
  select?: Prisma.GameSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameSession
   */
  omit?: Prisma.GameSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameSessionInclude<ExtArgs> | null
  /**
   * The data needed to update a GameSession.
   */
  data: Prisma.XOR<Prisma.GameSessionUpdateInput, Prisma.GameSessionUncheckedUpdateInput>
  /**
   * Choose, which GameSession to update.
   */
  where: Prisma.GameSessionWhereUniqueInput
}

/**
 * GameSession updateMany
 */
export type GameSessionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update GameSessions.
   */
  data: Prisma.XOR<Prisma.GameSessionUpdateManyMutationInput, Prisma.GameSessionUncheckedUpdateManyInput>
  /**
   * Filter which GameSessions to update
   */
  where?: Prisma.GameSessionWhereInput
  /**
   * Limit how many GameSessions to update.
   */
  limit?: number
}

/**
 * GameSession updateManyAndReturn
 */
export type GameSessionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSession
   */
  select?: Prisma.GameSessionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the GameSession
   */
  omit?: Prisma.GameSessionOmit<ExtArgs> | null
  /**
   * The data used to update GameSessions.
   */
  data: Prisma.XOR<Prisma.GameSessionUpdateManyMutationInput, Prisma.GameSessionUncheckedUpdateManyInput>
  /**
   * Filter which GameSessions to update
   */
  where?: Prisma.GameSessionWhereInput
  /**
   * Limit how many GameSessions to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameSessionIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * GameSession upsert
 */
export type GameSessionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSession
   */
  select?: Prisma.GameSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameSession
   */
  omit?: Prisma.GameSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameSessionInclude<ExtArgs> | null
  /**
   * The filter to search for the GameSession to update in case it exists.
   */
  where: Prisma.GameSessionWhereUniqueInput
  /**
   * In case the GameSession found by the `where` argument doesn't exist, create a new GameSession with this data.
   */
  create: Prisma.XOR<Prisma.GameSessionCreateInput, Prisma.GameSessionUncheckedCreateInput>
  /**
   * In case the GameSession was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.GameSessionUpdateInput, Prisma.GameSessionUncheckedUpdateInput>
}

/**
 * GameSession delete
 */
export type GameSessionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSession
   */
  select?: Prisma.GameSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameSession
   */
  omit?: Prisma.GameSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameSessionInclude<ExtArgs> | null
  /**
   * Filter which GameSession to delete.
   */
  where: Prisma.GameSessionWhereUniqueInput
}

/**
 * GameSession deleteMany
 */
export type GameSessionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which GameSessions to delete
   */
  where?: Prisma.GameSessionWhereInput
  /**
   * Limit how many GameSessions to delete.
   */
  limit?: number
}

/**
 * GameSession.spins
 */
export type GameSession$spinsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSpin
   */
  select?: Prisma.GameSpinSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameSpin
   */
  omit?: Prisma.GameSpinOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameSpinInclude<ExtArgs> | null
  where?: Prisma.GameSpinWhereInput
  orderBy?: Prisma.GameSpinOrderByWithRelationInput | Prisma.GameSpinOrderByWithRelationInput[]
  cursor?: Prisma.GameSpinWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.GameSpinScalarFieldEnum | Prisma.GameSpinScalarFieldEnum[]
}

/**
 * GameSession.UserProfile
 */
export type GameSession$UserProfileArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserProfile
   */
  select?: Prisma.UserProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserProfile
   */
  omit?: Prisma.UserProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserProfileInclude<ExtArgs> | null
  where?: Prisma.UserProfileWhereInput
  orderBy?: Prisma.UserProfileOrderByWithRelationInput | Prisma.UserProfileOrderByWithRelationInput[]
  cursor?: Prisma.UserProfileWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.UserProfileScalarFieldEnum | Prisma.UserProfileScalarFieldEnum[]
}

/**
 * GameSession without action
 */
export type GameSessionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameSession
   */
  select?: Prisma.GameSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameSession
   */
  omit?: Prisma.GameSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameSessionInclude<ExtArgs> | null
}
