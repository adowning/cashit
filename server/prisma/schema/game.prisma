enum GameCategory {
  FISH
  POKER
  SLOTS
  TABLE_GAMES
  LIVE_CASINO
  SPORTSBOOK
  VIRTUAL_SPORTS
  LOTTERY
  CRASH
  OTHER
}

enum GameProviderName {
  PRAGMATICPLAY
  EVOPLAY
  NETENT
  PLAYNGO
  RELAXGAMING
  HACKSAW
  BGAMING
  SPRIBE
  INTERNAL
  REDTIGER
  NETGAME
  BIGFISHGAMES
  CQNINE
  NOLIMIT
  KICKASS
}

enum ProviderAuthType {
  API_KEY // Simple API key in header or query
  OAUTH2 // OAuth2 client credentials or other flows
  JWT_SIGN // Your server signs a JWT to send to the provider
  CUSTOM // Requires custom logic, details might be in configJson
  NONE // No specific auth beyond what's in the RGS call itself (e.g. session token)
}

model Game {
  id                 String             @id @default(cuid())
  name               String
  title              String
  goldsvetData       Json?
  // slug            String           @unique
  description        String?            @db.Text
  supportedProviders GameProviderName[]
  category           GameCategory
  tags               String[]
  isActive           Boolean            @default(true)
  thumbnailUrl       String?
  bannerUrl          String?
  meta               Json? // For RTP, volatility, features, releaseDate etc.
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  featured           Boolean            @default(false)
  providerName       String? // Kept for potential direct use or legacy
  totalWagered       Int                @default(0)
  gameProviderId     String?
  gameProvider       GameProvider?      @relation(fields: [gameProviderId], references: [id])

  gameSessions    GameSession[]
  gameLaunchLinks GameLaunchLink[]
  operatorId      String?
  operator        Operator?        @relation(fields: [operatorId], references: [id])
  TournamentGame  TournamentGame[]

  @@map("games")
}

model GameSession {
  id                      String      @id @default(cuid())
  isActive                Boolean     @default(false) // Typically false once ended
  sessionData             Json? // e.g., betHistory, lastSpin
  spins                   GameSpin[]
  authSessionId           String?
  currencyId              String?
  startedAt               DateTime    @default(now())
  endTime                 DateTime?
  startTime               DateTime?
  ipAddress               String?
  startingBalance         Int?        @default(0)
  startingTotalXp         Int?        @default(0)
  userAgent               String?
  createdAt               DateTime    @default(now())
  updatedAt               DateTime    @updatedAt
  totalWagered            Int         @default(0)
  totalWon                Int         @default(0)
  userId                  String
  refferenceToUserProfile UserProfile @relation("UserGameSessions", fields: [userId], references: [id], onDelete: Cascade)

  gameId         String
  game           Game          @relation(fields: [gameId], references: [id], onDelete: Cascade)
  rtgToken       String?
  rtgFingerPrint String?
  // gameTransactions Transaction[]
  profileId      String?
  // profileId String
  // profile   Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  UserProfile    UserProfile[]

  @@map("game_sessions")
}

model GameSpin {
  id             String      @id @default(cuid())
  spinData       Json? // e.g., betAmount, winAmount
  createdAt      DateTime    @default(now())
  grossWinAmount Int         @default(0)
  currencyId     String?
  spinNumber     Int         @default(0)
  gameSessionId  String
  wagerAmount    Int         @default(0)
  sessionId      String
  timeStamp      DateTime
  gameSession    GameSession @relation(fields: [gameSessionId], references: [id], onDelete: Cascade)

  @@map("game_spins")
}

model GameProvider {
  id          String  @id @default(cuid())
  name        String  @unique // e.g., "RedTigerGaming", "PragmaticPlay", "NetGame"
  displayName String? // For display purposes, e.g., "Red Tiger"

  rgsBaseUrl      String // Base URL for the Remote Game Server (RGS) API
  settingsPath    String? // Path for the game settings/init endpoint (e.g., "/user/settings")
  spinPath        String? // Path for the spin/play endpoint (e.g., "/game/spin")
  resolveBetPath  String? // Path for bet settlement or specific win actions, if applicable
  // Add other common action paths if needed (e.g., refundPath, historyPath)
  providerRoundId String?
  authType        ProviderAuthType @default(API_KEY) // How to authenticate with this provider's RGS
  apiKey          String? // Store securely if using API Key auth (consider vault/encryption)
  apiSecret       String? // Store securely
  publicKey       String? // For other auth types like JWT signing/verification
  privateKeyRef   String? // Reference to a private key stored securely (e.g., in a vault)

  // Provider-specific configurations stored as JSON
  // This can hold things like required headers, specific field mappings,
  // or any other unique settings for this provider.
  configJson Json? @default("{}")

  isActive Boolean @default(true)
  notes    String?

  games Game[] // One provider can have many games

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@index([isActive])
}

model GameLaunchLink {
  id                 String       @id @default(cuid())
  token_internal     String       @unique @default(cuid()) // Primary internal token for launching
  currency           String // Currency context for the game session (e.g., "USD", "CREDITS")
  player_operator_id String? // Player's ID as known by the external operator system
  mode               String // e.g., "real" money, "demo" play
  meta               Json? // e.g., "real" money, "demo" play
  requestIp          String?      @map("request_ip")
  userAgent          String?      @map("user_agent") @db.Text
  session_url        String?      @unique // The fully formed URL given to the player
  state              String       @default("SESSION_INIT") // e.g., INIT, STARTED, EXPIRED, COMPLETED
  active             Boolean      @default(true)
  expiresAt          DateTime?    @map("expires_at")
  extra_meta         Json? // Provider options, language, specific entry points
  token_original     String? // If the launch involves an upstream provider's token
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  userId             String
  gameId             String
  game               Game         @relation(fields: [gameId], references: [id], onDelete: NoAction)
  operatorId         String
  operator           Operator     @relation(fields: [operatorId], references: [id], onDelete: NoAction)
  UserProfile        UserProfile? @relation(fields: [userProfileId], references: [id])
  userProfileId      String?

  @@map("game_launch_links")
}
